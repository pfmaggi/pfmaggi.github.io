<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pietro F. Maggi</title>
    <link>http://pietromaggi.com/</link>
    <description>Recent content on Pietro F. Maggi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>pfm@pietromaggi.com (Pietro F. Maggi)</managingEditor>
    <webMaster>pfm@pietromaggi.com (Pietro F. Maggi)</webMaster>
    <copyright>(c) 2015 Pietro F. Maggi.</copyright>
    <lastBuildDate>Thu, 14 Jan 2016 23:00:00 +0100</lastBuildDate>
    <atom:link href="http://pietromaggi.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Secondary External Storage in Android KitKat - Part 1</title>
      <link>http://pietromaggi.com/2016/01/14/secondary-external-storage-in-android-kitkat---part-1/</link>
      <pubDate>Thu, 14 Jan 2016 23:00:00 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2016/01/14/secondary-external-storage-in-android-kitkat---part-1/</guid>
      <description>

&lt;p&gt;First technical post for 2016. Finally!&lt;/p&gt;

&lt;p&gt;To kick-start 2016 I&amp;rsquo;ve chosen a topic that is more and more relevant in our market: The changes introduced by Google in Android v4.4 KitKat, regarding the secondary storage (the SDCard).&lt;br /&gt;
I&amp;rsquo;ve already talked about this in my AppForum 2015 talk last October in London&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, but I want to add some extra info and rationales here.&lt;/p&gt;

&lt;h2 id=&#34;a-bit-of-background&#34;&gt;A bit of background&lt;/h2&gt;

&lt;p&gt;Android&amp;rsquo;s purpose is to establish an open platform for developers to build innovative apps.
For this reason, Google put in place a compatibility program that defines technical details of the Android Platform;&lt;/p&gt;

&lt;p&gt;For every Android release, there&amp;rsquo;s a Compatibility Definition Document, the last available at this moment is for &lt;a href=&#34;http://static.googleusercontent.com/media/source.android.com/it//compatibility/6.0/android-6.0-cdd.pdf&#34;&gt;Android 6.0, aka Marshmallow&lt;/a&gt;, that defines some of the technical features and device needs to have to be a compatible Android device. And this compatibility is a requirement to be able to license GMS&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; for the device.&lt;/p&gt;

&lt;p&gt;To put it clearly:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You want GMS? You need to comply to the CDD&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here we&amp;rsquo;re talking about Android v4.4 KitKat, so here&amp;rsquo;s a link to &lt;a href=&#34;http://source.android.com/compatibility/4.4/android-4.4-cdd.pdf&#34;&gt;Android 4.4 CDD&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-s-the-catch&#34;&gt;What&amp;rsquo;s the catch?&lt;/h2&gt;

&lt;p&gt;From the CDD, Android devices are required to have a Secondary Storage available with a minimum 1GB size if you don&amp;rsquo;t have this internal in your device but you provide an SDCard slot, you need to ship the device with an SDCard, again, 1GB minimum size.&lt;br /&gt;
So usually, you end up that the SDCard is your &lt;em&gt;Secondary External Storage&lt;/em&gt;, and the &lt;em&gt;Primary External Storage&lt;/em&gt; is the 1GB partition (minimum) you included in the device.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Not a big deal&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To access an External Storage on Android v4.3 and previous versions, you have to specify a couple of permissions in your &lt;code&gt;AndroidManifest.xml&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These will gave you read&amp;amp;write access to all the External Storage available&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;br /&gt;
Given that there are ways to gently ask for the &lt;a href=&#34;http://pietromaggi.com/2014/10/19/finding-the-sdcard-path-on-android-devices/&#34;&gt;SDCard true path&lt;/a&gt; this was more or less working.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But Android is now a multiuser OS! and an SDCard with a FAT file system, is not very good protecting the data between the different users&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Android support SDCard with FAT file system, to provide a layer of security, it uses the &lt;a href=&#34;https://en.wikipedia.org/wiki/Filesystem_in_Userspace&#34;&gt;Linux FUSE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Android v4.4 Google decides to go a step further mandating that an app can write (with the right permissions that we just saw) only on the Primary External Storage. For all the other External Storage, an app can only write in its package folder. e.g. if you app package is com.pietromaggi.sample.externalstorage, It can only write in the folders &lt;code&gt;&amp;lt;sdcard root&amp;gt;/Android/data/com.pietromaggi.sample.externalstorage&lt;/code&gt;.&lt;br /&gt;
There&amp;rsquo;s no way, for a normal application, to write anywhere else on the SDCard.&lt;/p&gt;

&lt;h2 id=&#34;ok-but-there-s-an-happy-end-somewhere&#34;&gt;OK, but there&amp;rsquo;s an happy end somewhere?&lt;/h2&gt;

&lt;p&gt;Really, if you&amp;rsquo;re trying to get a way to revert Android behavior to what it was before API level 19, no, this is it.&lt;br /&gt;
Luckily Google has introduced new API in KitKat (and Lollipop and Marshmallow) that allows to mitigate the issue. Some user interventions may be needed but at least there are standard APIs available.&lt;/p&gt;

&lt;p&gt;In the second part of this blog I&amp;rsquo;ll present a sample app that uses some of these APIs.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Slides presented in London: &lt;script async class=&#39;speakerdeck-embed&#39; data-id=&#39;ef4248bf72454b2e9602db55bdf1e8ed&#39; data-ratio=&#39;1.33333333333333&#39; src=&#39;//speakerdeck.com/assets/embed.js&#39;&gt;&lt;/script&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;GMS Stands for Google Mobile Services, and is the collection of services and application built by Google that are not part of AOSP (Android Open Source Project) like GMail, Google Maps, Google Play Store and the push notification service GCM (Google Cloud Messaging).
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;The catch is that, before Android v4.4, API level 19, and the introduction of the &lt;code&gt;Environment.getExternalFilesDirs()&lt;/code&gt; there was no way to know how many External Storage you had available on a device. The only available API was &lt;code&gt;Environment.getExternalStorageDirectory()&lt;/code&gt; that returns the Primary External Storage.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Speaking Appointments</title>
      <link>http://pietromaggi.com/speaking/</link>
      <pubDate>Sat, 09 Jan 2016 21:53:35 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/speaking/</guid>
      <description>

&lt;h2 id=&#34;march-2016&#34;&gt;MARCH 2016&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;14-Mar-16 - Developer Kitchen in Stockholm, Android Seminar.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;archive-and-talk-links&#34;&gt;ARCHIVE AND TALK LINKS&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;20-Nov-15 - Partner Technical Session in Rome organized by the Italian team. They gently invited me to help, finally back to Rome!&lt;/li&gt;
&lt;li&gt;14-Oct-15 - Talk on &lt;a href=&#34;http://www.slideshare.net/pietrofmaggi/emea-appforum-2015-android-kitkat-lollipop-new-features-for-enterprise-developers&#34;&gt;What&amp;rsquo;s new in Android from JellyBean to Marshmallow for Enterprise Developers.&lt;/a&gt; at this year &lt;a href=&#34;http://zebraevents.cvent.com/events/emea-appforum-2015/event-summary-b2ec8025b2ed46d0a7814cce4474b55d.aspx&#34;&gt;App Forum 2015 in London&lt;/a&gt; &lt;br&gt;
&lt;img src=&#34;http://pietromaggi.com/images/conferences/AppForum2015.png&#34; alt=&#34;Enterprise AppForum&#34; title=&#34;Anterprise AppForum Banner&#34; /&gt;&lt;/li&gt;
&lt;li&gt;08-Apr-15 - DroidCon Turin - &lt;a href=&#34;https://www.youtube.com/watch?v=ImOAuMR3X9w&#34;&gt;&amp;laquo;Android Industrial Mobility&amp;raquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;07-Mar-15 - DroidCon Tunis - &amp;laquo;Android Industrial Mobility&amp;raquo;&lt;/li&gt;
&lt;li&gt;22-Nov-14 - DroidCon Amsterdam - RhoMobile is a sponsor at the event, we&amp;rsquo;ll be there with a booth and I&amp;rsquo;ll present my talk: &amp;laquo;Android Industrial Mobility&amp;raquo;.&lt;/li&gt;
&lt;li&gt;18-Nov-14 – &lt;a href=&#34;http://www.motorolasolutionsevents.com/enterprise_appforum_2014/&#34;&gt;Enterprise App Forum - Brussels&lt;/a&gt; - Various things, coaching mostly &lt;br&gt;
&lt;img src=&#34;http://pietromaggi.com/images/conferences/EnterpriseAppForum2014.png&#34; alt=&#34;Enterprise AppForum&#34; title=&#34;Anterprise AppForum Banner&#34; /&gt;&lt;/li&gt;
&lt;li&gt;31-Oct-14 - DroidCon London - RhoMobile is a sponsor at the event, we&amp;rsquo;ll be there with a booth and I&amp;rsquo;ll present my talk: &lt;a href=&#34;https://skillsmatter.com/skillscasts/5824-current-best-practices-for-building-enterprise-mobile-apps&#34;&gt;&amp;laquo;Android Industrial Mobility&amp;raquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;10-Oct-14 - DroidCon Bucharest - &amp;laquo;Android Industrial Mobility&amp;raquo;&lt;/li&gt;
&lt;li&gt;29-Sep-14 - Europe Mobile App, Dorint Sanssouci Berlin/Potsdam - &lt;a href=&#34;http://mobileappeurope.com/wp-content/uploads/2014/04/pietro_maggi_android_industrial_mobility.pdf&#34;&gt;&amp;laquo;Android Industrial Mobility&amp;raquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;08-May-14 - DroidCon Berlin - Berlin - &amp;laquo;Android Industrial Mobility&amp;raquo;&lt;/li&gt;
&lt;li&gt;06-Feb-14 – DroidCon Italy - Turin - &amp;laquo;RhoMobile - Build Mobile application using your web skills&amp;raquo;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://pietromaggi.com/about/</link>
      <pubDate>Sat, 09 Jan 2016 20:50:38 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/about/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/wipjam.png&#34; alt=&#34;Pietro F. Maggi&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Hi!
My name is Pietro F. Maggi, I&amp;rsquo;m a Father an Husband and occasionally I find the time to write some code.&lt;/p&gt;

&lt;p&gt;I really believe that the best way to learn how something works is to take it apart (I know, I can&amp;rsquo;t really blame my kids when they do the same).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve more than fifteen years designing and developing software solutions with a deep mobile experience. I frequently speak at conferences and Zebra Technologies events to present DevTools for Enterprise mobility.&lt;/p&gt;

&lt;p&gt;Public speaking, business development, and software development are my main strengths.&lt;/p&gt;

&lt;p&gt;Specialties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Software evengelist.&lt;/li&gt;
&lt;li&gt;Designing and implementation of Mobile solutions and Mobile Web solutions.&lt;/li&gt;
&lt;li&gt;Software development from bare metal embedded to backend servers.&lt;/li&gt;
&lt;li&gt;RF and 802.11 technology.&lt;/li&gt;
&lt;li&gt;Mentoring and coaching resources.&lt;/li&gt;
&lt;li&gt;Managing partners and customers satisfaction.&lt;/li&gt;
&lt;li&gt;Communication skill.&lt;/li&gt;
&lt;li&gt;Fast Learner.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I&amp;rsquo;ve to define myself in a sentence, I&amp;rsquo;m an &lt;em&gt;Extrovert Developer&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you would like to get in touch with me, whether it be for tech support, a business venture, or to just say hi, feel free to send me an email or follow me on Twitter!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/pfmaggi&#34;&gt;@pfmaggi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;mailto:pfm@pietromaggi.com&#34;&gt;pfm@pietromaggi.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://github.com/pfmaggi&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/in/pietromaggi&#34;&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome</title>
      <link>http://pietromaggi.com/2016/01/09/welcome/</link>
      <pubDate>Sat, 09 Jan 2016 20:50:14 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2016/01/09/welcome/</guid>
      <description>&lt;p&gt;Time for revamping a bit this blog.&lt;br /&gt;
From a technical point of view, I struggled with octopress v2.x to keep this blog aligned across the multiple machine I use in my work/life. Octopress v3 is supposed to solve most of the issue that plagued me over these years but, I wanted to test something a bit different.&lt;/p&gt;

&lt;p&gt;New year new static blog generator. Given that I want to spend some time evaluating &lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt; I decided to give &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; a try.&lt;/p&gt;

&lt;p&gt;As always, I don&amp;rsquo;t want to spend much time on the layout and the style of this site. My main concern is to be able to post content regularly, something that is not so easy, given the rate I had releasing new content.&lt;/p&gt;

&lt;p&gt;So, back on track for 2016, I want to release new content on this site, and I hope that this new platform will support me well.
At this moment I&amp;rsquo;ve moved all the previous content, correcting few typos in the process, using one of the vanilla themes available.
I&amp;rsquo;ll will probably spend some time in the future to refine the layout, but this is more or less it.&lt;/p&gt;

&lt;p&gt;Another change is the comment section, that will go life with one of the free discussion platform available, still have to decide which one.&lt;/p&gt;

&lt;p&gt;Let me know if you enjoy the change and, more important, which topics you&amp;rsquo;ll like that I cover here.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Zebra&#39;s EMDK project using SDK Platform 23</title>
      <link>http://pietromaggi.com/2015/11/25/building-zebras-emdk-project-using-sdk-platform-23/</link>
      <pubDate>Wed, 25 Nov 2015 09:54:55 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2015/11/25/building-zebras-emdk-project-using-sdk-platform-23/</guid>
      <description>

&lt;p&gt;There&amp;rsquo;s a recurring question coming to me and to Launchpad&amp;rsquo;s forums lately:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.motorolasolutions.com/message/86287#86287&#34;&gt;&lt;em&gt;How can I compile my Android app, using Zebra&amp;rsquo;s EMDK, if I need the latest support library?&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;some-background&#34;&gt;Some background&lt;/h1&gt;

&lt;p&gt;With the Android tools moving super-fast (Android studio v1.0 launched at the beginning of 2015, the latest stable release is v1.4.1, we already have v1.5RC and v2.0 has been announced&amp;hellip;) keeping up to this pace is not easy for our EMDK team!&lt;/p&gt;

&lt;p&gt;We discovered some integration issues when Android Studio v1.3 was released and &lt;a href=&#34;https://developer.motorolasolutions.com/community/android/android-forums/android-blogs/blog/2015/08/21/announcement-emdk-issue-with-android-studio-13-new-project-wizard&#34;&gt;we presented a workaround&lt;/a&gt; to use the EMDK as the building SDK. Limiting the project to API level 16 or 19. This should be good, right?&lt;/p&gt;

&lt;p&gt;A downside of this approach surfaced when Google updated the templates for new projects, now based on the Android Support Library. I really like the approach to base new projects on the support library; the problem is that it does require to build the project with API level 21+.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here we can have a problem&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;using-zebra-s-emdk&#34;&gt;Using Zebra&amp;rsquo;s EMDK&lt;/h1&gt;

&lt;p&gt;So, talking just about Android Studio, that is the current up-to-date Android IDE, we currently document two ways to use the EMDK:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.motorolasolutions.com/docs/DOC-2983&#34;&gt;The official one&lt;/a&gt;, selecting the EMDK in the &amp;laquo;Compile SDK&amp;raquo; drop-down when creating the project&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.motorolasolutions.com/community/android/android-forums/android-blogs/blog/2015/08/21/announcement-emdk-issue-with-android-studio-13-new-project-wizard&#34;&gt;The Android Studio v1.3+ workaround way&lt;/a&gt; that suggest to manually set the EMDK as the &amp;laquo;Compile SDK&amp;raquo;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both methods fails to compile a project using the latest Android Support Library.&lt;/p&gt;

&lt;h1 id=&#34;a-little-gradle-magic&#34;&gt;A little gradle magic&lt;/h1&gt;

&lt;p&gt;Here&amp;rsquo;s a third, &lt;strong&gt;UNOFFICIAL&lt;/strong&gt;, way to include the EMDK in an Android project and use the latest available SDK to build the project.&lt;/p&gt;

&lt;h2 id=&#34;copy-the-lib-file-in-your-project&#34;&gt;Copy the lib file in your project&lt;/h2&gt;

&lt;p&gt;First of all, create in your Android project a lib folder and copy into it the com.symbol.emdk.jar library that you got installing the EMDK on your PC/Mac:&lt;/p&gt;

&lt;p&gt;This is probably easier to say than to do, because the default Android Studio project view doesn&amp;rsquo;t show these files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/EMDK_gradle/Android_Project1.jpg&#34; alt=&#34;Default Android Project Panel&#34; title=&#34;Default Android Project Panel&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The easiest way, at least for me, is to copy the file from the setup position to a newly created &lt;code&gt;libs&lt;/code&gt; folder in my project from Windows&amp;rsquo; File Explorer or OSX&amp;rsquo;s Finder and then check that everything is OK switching the Android Studio project view from &amp;laquo;Android&amp;raquo; to &amp;laquo;Project Files&amp;raquo;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/EMDK_gradle/Android_Project2.jpg&#34; alt=&#34;Project Files Panel View&#34; title=&#34;Project Files Panel View&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;modify-the-build-gradle-file&#34;&gt;Modify the build.gradle file&lt;/h2&gt;

&lt;p&gt;OK, once the file is included in our project (and this means that you can check in this file in your SCM and checkout on a new PC and rebuilt it without the need to Zebra EMDK installed) we can explain to Android Studio how to use it. To do this we need to modify the &lt;code&gt;build.gradle&lt;/code&gt; file included in the app folder. If you&amp;rsquo;ve switched back to the &amp;laquo;Android Project view&amp;raquo;, this is the Module: App, gradle file. As shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/EMDK_gradle/gradle_file.jpg&#34; alt=&#34;Gradle file to Edit&#34; title=&#34;Gradle file to Edit&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In this file you need to setup the dependencies so that the build process uses this lib as a reference without including it into the final APK (otherwise the application will exit with and exception when launched).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   dependencies {
       compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;], exclude: [&#39;com.symbol.emdk.jar&#39;])
       compile &#39;com.android.support:appcompat-v7:23.0.1&#39;
       provided fileTree(dir: &#39;libs&#39;, include: [&#39;com.symbol.emdk.jar&#39;])
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this changes you can build your project using the latest available SDK, just remember that you&amp;rsquo;re targeting Zebra devices with API level 16 or 19, so, setup your minimum SDK accordingly.&lt;/p&gt;

&lt;p&gt;You can find a demo app built with this technique &lt;a href=&#34;https://github.com/pfmaggi/GetDeviceInfo_EMDK&#34;&gt;on my github account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy coding&lt;br /&gt;
~Pietro&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slide Decks</title>
      <link>http://pietromaggi.com/decks/</link>
      <pubDate>Sun, 25 Oct 2015 19:31:46 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/decks/</guid>
      <description>

&lt;h2 id=&#34;android-wireless-deepdive-decks-wireless&#34;&gt;&lt;a href=&#34;http://pietromaggi.com/decks/wireless/&#34;&gt;Android Wireless DeepDive&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Exploring how to build a RhoMobile native extension for an Android undocumented feature&lt;/p&gt;

&lt;h2 id=&#34;mobile-barcode-scanning-api-status-decks-barcodes-api&#34;&gt;&lt;a href=&#34;http://pietromaggi.com/decks/barcodes-api/&#34;&gt;Mobile Barcode Scanning API Status&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;An analysis of barcode scanning API status on mobile devices&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Back Button and Enterprise Browser</title>
      <link>http://pietromaggi.com/2015/09/25/android-back-button-and-enterprise-browser/</link>
      <pubDate>Fri, 25 Sep 2015 11:33:11 +0200</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2015/09/25/android-back-button-and-enterprise-browser/</guid>
      <description>

&lt;h2 id=&#34;enterprise-browser:7f473ce4cff36ed9ec3742536e6fab0f&#34;&gt;Enterprise Browser&lt;/h2&gt;

&lt;p&gt;Enterprise Browser is Zebra Technologies&amp;rsquo; Industrial Browser built for our Rugged Devices, we support most of our Windows Mobile/Windows CE devices and Android devices.&lt;/p&gt;

&lt;p&gt;This product is usually used with existing web application that cannot be updated/modified moving from one device to another.
This help us winning some opportunities but sometimes present some unique challenges like, as an example, disabling the Android back button default behavior.&lt;/p&gt;

&lt;h2 id=&#34;back-button-on-android:7f473ce4cff36ed9ec3742536e6fab0f&#34;&gt;Back Button on Android?&lt;/h2&gt;

&lt;p&gt;Given that this is a cross-platform product (built on top of our RhoMobile Suite) we don&amp;rsquo;t have a custom settings to disable the back button in the Config.xml configuration file, however it is still possible to add a default Metatags in the configuration so that no changes in the existing pages are needed.&lt;/p&gt;

&lt;p&gt;So, do we&amp;rsquo;ve an API to intercept the Back Button?&lt;/p&gt;

&lt;p&gt;Of course! the &lt;a href=&#34;https://developer.motorolasolutions.com/docs/DOC-2520&#34;&gt;KeyCapture API&lt;/a&gt; can be used to intercept and disable it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;EB.KeyCapture.captureKey(BOOLEAN dispatch, STRING keyValue)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setting the &lt;code&gt;dispatch&lt;/code&gt; value to &lt;code&gt;false&lt;/code&gt;,  We just need to get the correct KeyCode.&lt;/p&gt;

&lt;p&gt;This can a bit tricky and can be different from device to device, the best solution I&amp;rsquo;ve is to ask directly to the device with a simple HTML page that display the keycode off all the keys that are pressed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;META HTTP-Equiv=&amp;quot;KeyCapture&amp;quot; Content=&amp;quot;KeyValue:All; Dispatch:False; KeyEvent:url(&#39;JavaScript:alert(&#39;Key Pressed: %s&#39;);&#39;)&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
	&amp;lt;title&amp;gt;Display KeyCode&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;H1&amp;gt;Press a key to see it&#39;s KeyCode&amp;lt;/H1&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we&amp;rsquo;ve the correct KeyCode, we just need to call this API in every page that is loaded in the browser&amp;hellip; Sometimes that is not easy to do sometimes, especially when the application cannot be modified.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve a solution for this issue: having a &lt;code&gt;DefaultMetaTags&lt;/code&gt; in Enterprise Browser&amp;rsquo;s configuration.&lt;/p&gt;

&lt;h2 id=&#34;what-s-a-defaultmetatags:7f473ce4cff36ed9ec3742536e6fab0f&#34;&gt;What&amp;rsquo;s a DefaultMetaTags&lt;/h2&gt;

&lt;p&gt;We can start from the &lt;a href=&#34;https://developer.motorolasolutions.com/docs/DOC-2571#defaultmetatags&#34;&gt;documentation&lt;/a&gt;, what does it means?&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;DefaultMetaTags&lt;/code&gt; is a way to call an Enterprise Browser API on top of every HTML page that is loaded in the browser. This can be used, as an example to enable on screen UI elements like the battery or WiFi icon.&lt;/p&gt;

&lt;p&gt;So, putting the different things together, we can put this in the &amp;ldquo;Config.xml&amp;rsquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;DefaultMetaTags&amp;gt;
    &amp;lt;MetaTag value=&amp;quot;KeyCapture~KeyValue:0xA6;Dispatch:False”/&amp;gt;
 &amp;lt;/DefaultMetaTags&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BTW: &lt;code&gt;0xA6&lt;/code&gt; is the correct value for the Back Button on a TC55 running Android v4.4 KitKat.&lt;/p&gt;

&lt;h2 id=&#34;closing-comments:7f473ce4cff36ed9ec3742536e6fab0f&#34;&gt;Closing comments&lt;/h2&gt;

&lt;p&gt;Enterprise Browser&amp;rsquo;s &lt;code&gt;DefaultMetaTags&lt;/code&gt; is a very flexible way to &amp;laquo;patch&amp;raquo; an existing Web application without touching its source code.&lt;/p&gt;

&lt;p&gt;As a closing comment here&amp;rsquo;s a sample configuration that zoom the current web page pressing a button:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;MetaTag VALUE=&amp;quot;KeyCapture~KeyValue:0x79;Dispatch:False;KeyEvent:url(&#39;JavaScript:eval(&#39;zoom.page=\&#39;1.3\&#39;;&#39;);&#39;)&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;If you&amp;rsquo;re interested in Enterprise Browser, you can visit us at &lt;a href=&#34;http://bit.ly/EMEAAppForum2015&#34;&gt;EMEA AppForum in London, Oct. 12th-14th&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finding the SDCard Path on Android devices</title>
      <link>http://pietromaggi.com/2014/10/19/finding-the-sdcard-path-on-android-devices/</link>
      <pubDate>Sun, 19 Oct 2014 20:55:18 +0200</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2014/10/19/finding-the-sdcard-path-on-android-devices/</guid>
      <description>

&lt;p&gt;With Motorola Solutions we&amp;rsquo;re busy finishing the first round of Android Developer&amp;rsquo;s Kitchens around Europe. Just in time to prepare for the &lt;a href=&#34;http://www.motorolasolutionsevents.com/enterprise_appforum_2014/&#34;&gt;Enterprise App Forum in Brussels!&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The nice things of these events is the interaction with our partners and theirs real live problem!&lt;/p&gt;

&lt;p&gt;Last week I got an interesting question regarding our TC55:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can I programmatically get the path for the SDCard on the TC55?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s a good question; usually you don&amp;rsquo;t want to insert in your code the dependency to an hard coded path!
The usual answer is based around the function &lt;code&gt;Environment.getExternalStorageDirectory();&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The problem is that this function report a different folder if the SDCard is inserted in the device or not.
This is not a problem unique to the TC55, it&amp;rsquo;s a common problem on Android and there are different ways to handle it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://futurewithdreams.blogspot.it/2014/01/get-external-sdcard-location-in-android.html&#34;&gt;Reading the partition table from &lt;code&gt;/proc/mounts&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/a/23949650/118862&#34;&gt;Use some environment variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/22219312/android-open-external-storage-directorysdcard-for-storing-file&#34;&gt;Still use the getExternalStorageDirectory() function, together with the isExternalStorageRemovable() and getExternalStorageState() functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given that we&amp;rsquo;ve the luxury to target just a few devices, the Motorola Solutions one :-), the best option is to use the environment variables.&lt;/p&gt;

&lt;h3 id=&#34;let-s-see-what-happens-on-the-tc55&#34;&gt;Let&amp;rsquo;s see what happens on the TC55&lt;/h3&gt;

&lt;p&gt;On this device, using &lt;code&gt;Environment.getExternalStorageDirectory();&lt;/code&gt; returns different results depending if you&amp;rsquo;ve installed or not an SDCard:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Without SDCard —&amp;gt; /&lt;code&gt;STORAGE/SDCARD1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;With SDCard —&amp;gt; &lt;code&gt;/STORAGE/SDCARD0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s see what we can achieve with the environment variables!&lt;/p&gt;

&lt;p&gt;We can log into a TC55 and use the &lt;code&gt;printenv&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;adb shell
printenv

_=/system/bin/printenv
LD_LIBRARY_PATH=/vendor/lib:/system/lib
HOSTNAME=android
BOOTCLASSPATH=/system/framework/core.jar:/system/framework/core-junit.jar:/system/framework/bouncycastle.jar:/system/framework/ext.jar:/system/framework/framework.jar:/system/framework/framework_ext.jar:/system/framework/android.policy.jar:/system/framework/services.jar:/system/framework/apache-xml.jar
PATH=/sbin:/vendor/bin:/system/sbin:/system/bin:/system/xbin
LOOP_MOUNTPOINT=/mnt/obb
ANDROID_DATA=/data
ANDROID_ROOT=/system
SHELL=/system/bin/sh
MKSH=/system/bin/sh
USER=shell
EXTERNAL_SDCARD_STORAGE=/storage/sdcard0
ANDROID_PROPERTY_WORKSPACE=8,49152
EXTERNAL_STORAGE=/storage/sdcard1
ANDROID_ASSETS=/system/app
TERM=vt100
RANDOM=16913
ASEC_MOUNTPOINT=/mnt/asec
SECURE_STORAGE_SDCARD=/storage/sdcard0
HOME=/data
ANDROID_BOOTLOGO=1
MASS_STORAGE=/mnt/udisk
PS1=$(precmd)$USER@$HOSTNAME:${PWD:-?} $
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From this is easy to see that the way to get the SDCard path is to use a couple of environment variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;System.getenv(&amp;laquo;EXTERNAL_STORAGE&amp;raquo;)&lt;/code&gt; —&amp;gt; Internal SDCard &lt;code&gt;/STORAGE/SDCARD1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;System.getenv(&amp;laquo;EXTERNAL_SDCARD_STORAGE&amp;raquo;)&lt;/code&gt; —&amp;gt; True SDCard &lt;code&gt;/STORAGE/SDCARD0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This solutions is still depending on two specific environment variables, is much better than hardcoding the path strings in the application but is probably only acceptable if you&amp;rsquo;re targeting just few devices.
Another point is that, on other devices, you get the true SDCard path linked to the &lt;code&gt;SECONDARY_STORAGE&lt;/code&gt; environment variable. So a better solution could be to check for both variables with something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String strSDCardPath = System.getenv(&amp;quot;SECONDARY_STORAGE&amp;quot;);
if ((null == strSDCardPath) || (strSDCardPath.length() == 0)) {
    strSDCardPath = System.getenv(&amp;quot;EXTERNAL_SDCARD_STORAGE&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we will start to release KitKat based devices it will be even more important taking a look at the right path for these volumes :-)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;EDIT:&lt;/em&gt; I&amp;rsquo;ve a new &lt;a href=&#34;http://pietromaggi.com/2016/01/14/secondary-external-storage-in-android-kitkat---part-1/&#34;&gt;blog post&lt;/a&gt; with additional information for Zebra Technologies KitKat devices.&lt;/p&gt;

&lt;p&gt;You can find in my github account a &lt;a href=&#34;https://github.com/pfmaggi/GetDeviceInfo&#34;&gt;sample application&lt;/a&gt; that retrieves these data.&lt;/p&gt;

&lt;p&gt;Let me know if you find this information useful via &lt;a href=&#34;http://twitter.com/pfmaggi&#34;&gt;twitter @pfmaggi&lt;/a&gt; or &lt;a href=&#34;mailto:pfm@pietromaggi.com&#34;&gt;email&lt;/a&gt; or &lt;a href=&#34;http://www.motorolasolutionsevents.com/enterprise_appforum_2014/&#34;&gt;joining me and the EMEA Software Enablement Team in Brussels for the Enterprise AppForum, our annual developer events&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting device info from MSI Android devices</title>
      <link>http://pietromaggi.com/2014/09/02/getting-device-info-from-msi-android-devices/</link>
      <pubDate>Tue, 02 Sep 2014 11:56:38 +0200</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2014/09/02/getting-device-info-from-msi-android-devices/</guid>
      <description>

&lt;h1 id=&#34;the-good-old-ways&#34;&gt;The good old ways!&lt;/h1&gt;

&lt;p&gt;On Symbol/MSI Windows Mobile devices, we where providing some APIs in the EMDK to get additional information.
Looking into the Resource Coordinator is possible to find APIs like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RCM_GetESN() - retrieves the device electronic serial number&lt;/li&gt;
&lt;li&gt;RCM_GetUniqueUnitId() - retrieves the unique unit identification number&lt;/li&gt;
&lt;li&gt;RCM_GetVersion() - retrieves version information&lt;/li&gt;
&lt;li&gt;etc&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;hellip;and we don&amp;rsquo;t have anything like this in the Android EMDK. WHY?&lt;/p&gt;

&lt;p&gt;Simply because the functionality is already included in the standard Android SDK.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how to get this is data on an MSI device with the Android OS.&lt;/p&gt;

&lt;h1 id=&#34;the-fabulous-new-way&#34;&gt;The fabulous new way!&lt;/h1&gt;

&lt;p&gt;You can find the completed project in &lt;a href=&#34;https://github.com/pfmaggi/GetDeviceInfo&#34;&gt;this repository&lt;/a&gt; on my github account, I&amp;rsquo;m using Windows 7 and Eclipse+ADT, but you can follow these steps with Android Studio quite nicely.&lt;/p&gt;

&lt;h1 id=&#34;create-a-new-project&#34;&gt;Create a new Project&lt;/h1&gt;

&lt;p&gt;Create a new Android project, nothing fancy here, it&amp;rsquo;s just a standard app with a single Blank Activity.
You can follow these images as a guideline. Your interface may vary as Google updates the Android wizard quite often.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/create_project_01.jpg&#34; alt=&#34;Create Project - step 1&#34; title=&#34;Android New Project Wizard - page 1&#34; /&gt;
 &lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/create_project_02.jpg&#34; alt=&#34;Create Project - step 2&#34; title=&#34;Android New Project Wizard - page 2&#34; /&gt;
 &lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/create_project_03.jpg&#34; alt=&#34;Create Project - step 3&#34; title=&#34;Android New Project Wizard - page 3&#34; /&gt;
 &lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/create_project_04.jpg&#34; alt=&#34;Create Project - step 4&#34; title=&#34;Android New Project Wizard - page 4&#34; /&gt;
 &lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/create_project_05.jpg&#34; alt=&#34;Create Project - step 5&#34; title=&#34;Android New Project Wizard - page 5&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then we can do some housekeeping deleting the unnecessary main.xml menu resource:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/delete_menu.jpg&#34; alt=&#34;Delete Menu resource&#34; title=&#34;Delete unnecessary menu resource&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can then start the two main changes:
  - Setting up the Activity Layout
  - Updating the Activity onCreate method to retrieve the device data&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/activity_layout.jpg&#34; alt=&#34;Main Activity Layout&#34; title=&#34;Main Activity Layout&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;

&amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
              android:layout_width=&amp;quot;match_parent&amp;quot;
              android:layout_height=&amp;quot;match_parent&amp;quot;
              android:orientation=&amp;quot;vertical&amp;quot;
    &amp;gt;
    &amp;lt;TextView
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;@string/device_name&amp;quot;
        /&amp;gt;
    &amp;lt;TextView
        android:id=&amp;quot;@+id/device_type&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:layout_marginLeft=&amp;quot;16dp&amp;quot;
        android:layout_marginRight=&amp;quot;16dp&amp;quot;
        android:textSize=&amp;quot;18sp&amp;quot;
        style=&amp;quot;?android:listSeparatorTextViewStyle&amp;quot;
        /&amp;gt;
    &amp;lt;TextView
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;@string/electronic_serial_number&amp;quot;
        /&amp;gt;
    &amp;lt;TextView
        android:id=&amp;quot;@+id/device_esn&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:layout_marginLeft=&amp;quot;16dp&amp;quot;
        android:layout_marginRight=&amp;quot;16dp&amp;quot;
        android:textSize=&amp;quot;18sp&amp;quot;
        style=&amp;quot;?android:listSeparatorTextViewStyle&amp;quot;
        /&amp;gt;
    &amp;lt;TextView
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;@string/build_number&amp;quot;
        /&amp;gt;
    &amp;lt;TextView
        android:id=&amp;quot;@+id/build_number&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:layout_marginLeft=&amp;quot;16dp&amp;quot;
        android:layout_marginRight=&amp;quot;16dp&amp;quot;
        android:textSize=&amp;quot;18sp&amp;quot;
        style=&amp;quot;?android:listSeparatorTextViewStyle&amp;quot;
        /&amp;gt;
&amp;lt;/LinearLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This together with the string.xml containing the referenced string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;resources&amp;gt;

    &amp;lt;string name=&amp;quot;app_name&amp;quot;&amp;gt;Get Device Info&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;electronic_serial_number&amp;quot;&amp;gt;Device ESN:&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;build_number&amp;quot;&amp;gt;Build Number:&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;device_name&amp;quot;&amp;gt;Device:&amp;lt;/string&amp;gt;

&amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the simple Activity java code to collect the information is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.pietromaggi.sample.getdeviceinfo;

import android.os.Build;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.widget.TextView;


public class MainActivity extends ActionBarActivity {
    TextView DeviceNameTextView;
    TextView ESNTextView;
    TextView BuildNumberTextView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        DeviceNameTextView = (TextView)findViewById(R.id.device_type);
        DeviceNameTextView.setText(Build.DEVICE);

        ESNTextView = (TextView)findViewById(R.id.device_esn);
        ESNTextView.setText(Build.SERIAL);

        BuildNumberTextView = (TextView)findViewById(R.id.build_number);
        BuildNumberTextView.setText(Build.ID);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;where-s-the-tricks&#34;&gt;Where&amp;rsquo;s the tricks?&lt;/h1&gt;

&lt;p&gt;There&amp;rsquo;s really no trick, Android SDK provide this information, and more using these constants:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.android.com/reference/android/os/Build.html#DEVICE&#34;&gt;Build.DEVICE = The name of the industrial design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.android.com/reference/android/os/Build.html#SERIAL&#34;&gt;Build.SERIAL = A hardware serial number, if available&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.android.com/reference/android/os/Build.html#ID&#34;&gt;Build.ID = changelist number&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Obviously, it&amp;rsquo;s the OEM building the device that put together the plumbing to link the correct information. Your mileage may vary on different devices.&lt;/p&gt;

&lt;p&gt;Running this application on an ET1 with Jelly Bean you get:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/screen_ET1.png&#34; alt=&#34;ET1 Screenshot&#34; title=&#34;ET1 Screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Running this application on an MC40 with Jelly Bean you get:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/screen_MC40.png&#34; alt=&#34;MC40 Screenshot&#34; title=&#34;MC40 Screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;While the TC55 is always a bit different :-)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/screen_TC55JB.png&#34; alt=&#34;TC55 Screenshot&#34; title=&#34;TC55 Screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Hope you may find this useful. Send me an email if you&amp;rsquo;d like to see any particular topic on this blog.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rhodes 5.0.2 and Visual Studio 2008 Localized edition</title>
      <link>http://pietromaggi.com/2014/08/22/rhodes-5.0.2-and-visual-studio-2008-localized-edition/</link>
      <pubDate>Fri, 22 Aug 2014 13:01:48 +0200</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2014/08/22/rhodes-5.0.2-and-visual-studio-2008-localized-edition/</guid>
      <description>&lt;p&gt;Oh the joy of a new RhoMobile version!&lt;/p&gt;

&lt;p&gt;Creating new virtual machines and finally deciding that is time to leave the old trusty Windows XP and jump on the new Windows 7 with 63+1 bits. Oh man! what a pleasant use of time :-)&lt;/p&gt;

&lt;p&gt;On top of this I wanted to spin the setup a bit and decided to use a localized version of Visual Studio 2008&amp;hellip; what can go wrong with it?&lt;/p&gt;

&lt;p&gt;Well&amp;hellip; you may encounter a fancy Microsoft &amp;laquo;feature&amp;raquo; with a message that more or less reads:
&lt;a href=&#34;http://social.msdn.microsoft.com/Forums/vstudio/en-US/14dc118f-5adc-4a90-9c07-fde701f6b36c/vcbld0001-vcprojectenginedll-could-not-be-loaded?forum=vcgeneral&#34;&gt;&amp;laquo;VCProjectEngine.dll&amp;raquo; Could not be loaded&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This obviously, in your language of choice.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Solution?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From the same thread, copy the content of the localized package for vcbuild in the main folder; in my case:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From: &lt;code&gt;C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\vcpackages\1040&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To: &lt;code&gt;C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\vcpackages&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I just made a copy of the original content before moving the files (you never know).&lt;/p&gt;

&lt;p&gt;Enjoy your localized Visual Studio!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuring RhoMobile Suite v5.0 on a clean OS X Mavericks machine</title>
      <link>http://pietromaggi.com/2014/08/11/configuring-rhomobile-suite-v5.0-on-a-clean-os-x-mavericks-machine/</link>
      <pubDate>Mon, 11 Aug 2014 09:57:10 +0200</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2014/08/11/configuring-rhomobile-suite-v5.0-on-a-clean-os-x-mavericks-machine/</guid>
      <description>

&lt;h1 id=&#34;rhomobile-suite-v5-0:1ccd390bb055ec5c67cc32a64682c5d7&#34;&gt;RhoMobile Suite v5.0&lt;/h1&gt;

&lt;p&gt;The new main release of Rhodes, RhoElements and RhoConnect had just been released a couple of weeks ago &lt;a href=&#34;http://newsroom.motorolasolutions.com/Feature/See-RhoMobile-in-Action-at-OSCON-2014-4a61.aspx&#34;&gt;during OSCON&lt;/a&gt;. It&amp;rsquo;s now time to install it and start building some mobile apps!&lt;/p&gt;

&lt;p&gt;In this post I&amp;rsquo;d like to help you installing RMSv5.0 on a new OS X Mavericks machine and install everything that is needed to build iOS and Android applications, the only pre-requisite is to have a valid OS X Mavericks license installed on a Mac or inside a virtual machine&amp;hellip; on a Mac :-).&lt;/p&gt;

&lt;p&gt;These are the steps we will follow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#OSX_Update&#34;&gt;Update OS X to the latest version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#XCode&#34;&gt;Install XCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Terminal&#34;&gt;Familiarize with the Terminal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#JDK7&#34;&gt;Install Java JDK 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#HomeBrew&#34;&gt;Install HomeBrew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#RVM&#34;&gt;Install RVM and Ruby 1.9.3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#utilities&#34;&gt;Install git, node and other little utilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Android&#34;&gt;Install Android SDK and NDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#RMS5&#34;&gt;Install RMS v5.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Account&#34;&gt;Create a RhoMobile.com account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Launching&#34;&gt;Launching RhoStudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Setup&#34;&gt;Configure RhoStudio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Build&#34;&gt;Build a sample app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;a-name-osx-update-a-update-os-x-to-the-latest-version:1ccd390bb055ec5c67cc32a64682c5d7&#34;&gt;&lt;a name=&#34;OSX_Update&#34;&gt;&lt;/a&gt;Update OS X to the latest version&lt;/h3&gt;

&lt;p&gt;The first step is to check that the version of OS X on your machine is up-to-date, a quick stop in the Mac AppStore &lt;em&gt;Updates&lt;/em&gt; tab can give you an idea of what is available.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/OSX_RMS5/updates.png&#34; alt=&#34;One Update waiting to be installed&#34; title=&#34;One Update Waiting to be installed&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;a-name-xcode-a-install-xcode:1ccd390bb055ec5c67cc32a64682c5d7&#34;&gt;&lt;a name=&#34;XCode&#34;&gt;&lt;/a&gt;Install XCode&lt;/h3&gt;

&lt;p&gt;The next step is to install the latest XCode on you OS. In this guide I&amp;rsquo;m using XCode 5 as version 6 is still in beta, and we like stable releases!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/OSX_RMS5/XCode5.png&#34; alt=&#34;XCode 5 available in the Mac AppStore&#34; title=&#34;XCode 5 available in the Mac AppStore&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve installed XCode, you need to launch it to accept Apple EULA.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/OSX_RMS5/XCode5_EULA.png&#34; alt=&#34;XCode 5 EULA&#34; title=&#34;XCode 5 EULA&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;a-name-terminal-a-familiarize-with-the-terminal:1ccd390bb055ec5c67cc32a64682c5d7&#34;&gt;&lt;a name=&#34;Terminal&#34;&gt;&lt;/a&gt;Familiarize with the terminal&lt;/h3&gt;

&lt;p&gt;During the initial RMS setup some of the steps require that you use the Terminal, also known as &lt;a href=&#34;http://en.wikipedia.org/wiki/Command-line_interface&#34;&gt;command prompt or console&lt;/a&gt;.
The Terminal is already available on OS X, and you can find it inside the Utility folder in your Applications.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/OSX_RMS5/LaunchTerminal.png&#34; alt=&#34;Launching Terminal&#34; title=&#34;Launching Terminal&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve launched the Terminal could be &lt;strong&gt;very&lt;/strong&gt; useful to keep it into the dock, as we will need it for some of the steps to complete RMS setup.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/OSX_RMS5/KeepInDock.png&#34; alt=&#34;Keep Terminal in the dock&#34; title=&#34;Keep Terminal in the dock&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;a-name-jdk7-a-install-java-jdk7:1ccd390bb055ec5c67cc32a64682c5d7&#34;&gt;&lt;a name=&#34;JDK7&#34;&gt;&lt;/a&gt;Install Java JDK7&lt;/h3&gt;

&lt;p&gt;OS X Mavericks comes without any Java environment installed, &amp;laquo;the easiest way&amp;raquo; to install it, is to open the terminal and type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;java -version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will pop up a windows asking if you want to install Java, the answer is a resounding YES!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/OSX_RMS5/NoJava.png&#34; alt=&#34;No Java environment&#34; title=&#34;No Java Environment&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Selecting &lt;strong&gt;More Info&amp;hellip;&lt;/strong&gt; will open the Safari browser on the Oracle website, you can select the most up-to-date JDK v7 for OS X to download&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/OSX_RMS5/JavaDownload.png&#34; alt=&#34;Download Java&#34; title=&#34;Download Java&#34; /&gt;&lt;/p&gt;

&lt;p&gt;and Install&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/OSX_RMS5/JavaInstall.png&#34; alt=&#34;Install Java&#34; title=&#34;Install Java&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When the install is complete you can test that the java environment is now available:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/OSX_RMS5/JavaIsInstalled.png&#34; alt=&#34;Java is installed&#34; title=&#34;Java is installed&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;a-name-homebrew-a-install-homebrew:1ccd390bb055ec5c67cc32a64682c5d7&#34;&gt;&lt;a name=&#34;HomeBrew&#34;&gt;&lt;/a&gt;Install HomeBrew&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://brew.sh/&#34;&gt;HomeBrew&lt;/a&gt; is an open source package manager, working from the command line, that help setting up open source application on OS X.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ruby -e &amp;quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Paste that at the terminal prompt, execute it and follow the on-screen instruction accepting all the defaults.
Next step is to check that HomeBrew is setup correctly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew doctor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If everything is setup correctly you get the message: &lt;em&gt;Your system is ready to brew&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/OSX_RMS5/ReadyToBrew.png&#34; alt=&#34;Your System is ready to Brew&#34; title=&#34;Your System is ready to Brew&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you get a different message with some missing or misconfigured software you can follow the on-screen-instruction or you can find further information on the &lt;a href=&#34;https://github.com/Homebrew/homebrew/wiki&#34;&gt;HomeBrew Wiki&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;a-name-rvm-a-install-rvm-and-ruby-1-9-3:1ccd390bb055ec5c67cc32a64682c5d7&#34;&gt;&lt;a name=&#34;RVM&#34;&gt;&lt;/a&gt;Install RVM and Ruby 1.9.3&lt;/h3&gt;

&lt;p&gt;OS X Mavericks comes with Ruby v2.0 installed by default, however RMSv5 requires Ruby v1.9.3. Overall working with Ruby can require to switch ruby environment often and to release this pain &lt;a href=&#34;http://pietromaggi.com/2013/12/29/ruby-version-manager-aka-rvm-the-swiss-army-knife-of-ruby-versions/&#34;&gt;some utilities has been created&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this case we&amp;rsquo;re going to install RVM and use it to install Ruby v1.9.3.
First we need to install some prerequisite using HomeBrew:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew tap homebrew/versions
brew install gcc46
brew cleanup
brew doctor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then install RVM itself together with ruby 1.9.3:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;\curl -sSL https://get.rvm.io | bash -s stable --ruby=1.9.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you need to close the terminal and relaunch it to ave the &lt;strong&gt;RVM&lt;/strong&gt; environment available in the command line.&lt;/p&gt;

&lt;p&gt;To check that everything is setup correctly you can do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rvm list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you should get the reply:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rhomobile$ rvm list

rvm rubies

=* ruby-1.9.3-p547 [ x86_64 ]

# =&amp;gt; - current
# =* - current &amp;amp;&amp;amp; default
#  * - default

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case Ruby v1.9.3 is the current and default ruby environment. If this is not the case, you can set it up as the default ruby using the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rvm alias create default 1.9.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get more information on RVM you can check the documentation available on &lt;a href=&#34;https://rvm.io/&#34;&gt;its website&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;a-name-utilities-a-install-git-node-and-other-little-utilities:1ccd390bb055ec5c67cc32a64682c5d7&#34;&gt;&lt;a name=&#34;utilities&#34;&gt;&lt;/a&gt;Install git, node and other little utilities&lt;/h3&gt;

&lt;p&gt;RMS uses git &lt;em&gt;a lot&lt;/em&gt;, to sync projects with RhoHub, and is overall a nice tool. It&amp;rsquo;s already installed on Mavericks, but is version 1.8.5.2, better to keep an up-to-date version using HomeBrew:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install git
git --version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will install git v2.0.4 (at the moment of writing this).&lt;/p&gt;

&lt;p&gt;If asking to the system for the installed git version still report 1.8.5.2:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git --version
git version 1.8.5.2 (Apple Git-48)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you need to modify the PATH environment as suggested using the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rhomobile$ brew doctor
Please note that these warnings are just used to help the Homebrew maintainers
with debugging if you file an issue. If everything you use Homebrew for is
working fine: please don&#39;t worry and just ignore them. Thanks!

Warning: /usr/bin occurs before /usr/local/bin
This means that system-provided programs will be used instead of those
provided by Homebrew. The following tools exist at both paths:

    git
    git-cvsserver
    git-receive-pack
    git-shell
    git-upload-archive
    git-upload-pack

Consider setting your PATH so that /usr/local/bin
occurs before /usr/bin. Here is a one-liner:
    echo export PATH=&#39;/usr/local/bin:$PATH&#39; &amp;gt;&amp;gt; ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, using the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo export PATH=&#39;/usr/local/bin:$PATH&#39; &amp;gt;&amp;gt; ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Solve the issue (after closing and restarting the &lt;strong&gt;Terminal&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;The second application that we need to install is NodeJS, this is needed by RhoConnect Push and to support RhoConnect Source Adapters in JavaScript. Again, we use HomeBrew for this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install node
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Latest application we need to support RhoConnect is &lt;a href=&#34;http://redis.io&#34;&gt;Redis&lt;/a&gt;, again we can use HomeBrew to install it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install redis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can install at least one command line utility that can be very handy looking for &amp;laquo;stuffs&amp;raquo; inside source codes: &lt;em&gt;The Silver Searcher&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install the_silver_searcher
man ag
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As always, using &lt;strong&gt;man&lt;/strong&gt; in the command line will open the documentation for the command, in the case of the silver searcher, the command is &lt;strong&gt;ag&lt;/strong&gt; (like the Silver symbol).&lt;/p&gt;

&lt;h3 id=&#34;a-name-android-a-install-android-sdk-and-ndk:1ccd390bb055ec5c67cc32a64682c5d7&#34;&gt;&lt;a name=&#34;Android&#34;&gt;&lt;/a&gt;Install Android SDK and NDK&lt;/h3&gt;

&lt;p&gt;Next step is to install what is needed to build RhoMobile Android Applications. You need to remember that to compile RhoMobile native applications you need to have the target OS tool chain. For Android this means the SDK and the NDK.&lt;/p&gt;

&lt;p&gt;Navigate to the &lt;a href=&#34;http://developer.android.com/sdk/index.html&#34;&gt;Android developer tools page&lt;/a&gt; and download the stand-alone Android SDK tools for Mac:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/OSX_RMS5/AndroidSDK.png&#34; alt=&#34;Android SDK Tools for Mac&#34; title=&#34;Android SDK Tools for Mac&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When the download is complete you can install the SDK in the &lt;strong&gt;Development&lt;/strong&gt; folder, again from the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd ~/Downloads/
mkdir ~/Development
unzip android-sdk_r23.0.2-macosx.zip -d ~/Development/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create &lt;strong&gt;android-sdk-macosx&lt;/strong&gt; under your home folder. To add the sdk to your PATH, use the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo export PATH=&#39;$PATH:~/Development/android-sdk-macosx/tools&#39; &amp;gt;&amp;gt; ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;closing and relaunching the Terminal will make this new PATH available. You can now launch the Android SDK manager using the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;android
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And install the latest platform tools and the Platform SDK (not shown in the image is the Android Support Library that is always nice to have installed):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/OSX_RMS5/UpdateAndroidSDK.png&#34; alt=&#34;Update Android SDK&#34; title=&#34;Update Android SDK&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve installed these packages, you can close the Android SDK Manager and add the now available platform tools folder to your PATH:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo export PATH=&#39;$PATH:~/Development/android-sdk-macosx/platform-tools&#39; &amp;gt;&amp;gt; ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;closing and relaunching the Terminal will make this new PATH available. You can now launch the Android Debug Bridge using the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;adb devices
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you plan to develop using Motorola Solutions (or Symbol) Android devices, you need to modify an Android configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rhomobile$ android update adb
adb has been updated. You must restart adb with the following commands
	adb kill-server
	adb start-server
echo -e &amp;quot;0x05e0\n0x0414&amp;quot; &amp;gt;&amp;gt; ~/.android/adb_usb.ini
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now attaching your device you can see it with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;adb kill-server
adb devices
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next step is to install the Android NDK, containing the C/C++ compiler for Android, &lt;a href=&#34;http://developer.android.com/tools/sdk/ndk/index.html&#34;&gt;download and install the Mac OS 64-bit release&lt;/a&gt;, following Google &lt;a href=&#34;http://developer.android.com/tools/sdk/ndk/index.html#Installing&#34;&gt;instructions&lt;/a&gt;. Again, from the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd ~/Development/
tar xzvf ~/Downloads/android-ndk32-r10-darwin-x86_64.tar.bz2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-rms5-a-install-rms-v5-0:1ccd390bb055ec5c67cc32a64682c5d7&#34;&gt;&lt;a name=&#34;RMS5&#34;&gt;&lt;/a&gt;Install RMS v5.0&lt;/h3&gt;

&lt;p&gt;For this step we can take the info from the &lt;a href=&#34;http://docs.rhomobile.com/en/5.0.0/guide/rhomobile-install#mac-os&#34;&gt;RhoMobile official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;first of all we need to download the RMS5 image file from [RhoMobile website](). Opening the image will show it&amp;rsquo;s content, first step is to copy the &lt;strong&gt;Motorola RhoStudio&lt;/strong&gt; in the application folder:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/OSX_RMS5/RMS5_Package.png&#34; alt=&#34;RMS5 image file content&#34; title=&#34;RMS5 Image file content&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then we&amp;rsquo;ve some additional steps to do from the Terminal&amp;hellip; yes, again from the command line :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; I previously used &lt;strong&gt;sudo&lt;/strong&gt; at this step and this produce a series of side effects. Just be sure to run the &amp;laquo;Install gems&amp;raquo; script with your user!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /Volumes/Motorola\ RhoMobile\ Suite\ Installer/
./Install\ gems 

Select Ruby version to install gems:
1) ruby-1.9.3-p547
2) ruby-1.9.3-p547@global
#? 2

Using /Users/rhomobile/.rvm/gems/ruby-1.9.3-p547 with gemset global
ruby 1.9.3p547 (2014-05-14 revision 45962) [x86_64-darwin13.3.0]

Do you want to install gems with &#39;sudo&#39; command prefix? [yN]  N

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the gems setup is complete, you can install the support for RhoConnect Push server:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /Volumes/Motorola\ RhoMobile\ Suite\ Installer/
sudo ./Install\ rhoconnect-push
Password:

Do you want to install rhoconnect-push with &#39;sudo&#39; command prefix? [Yn]  Y
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-account-a-create-a-rhomobile-com-account:1ccd390bb055ec5c67cc32a64682c5d7&#34;&gt;&lt;a name=&#34;Account&#34;&gt;&lt;/a&gt;Create a RhoMobile.com account&lt;/h3&gt;

&lt;p&gt;Version 5 of the RhoMobile Suite has a &lt;a href=&#34;http://rhomobile.com/rhopricing.html&#34;&gt;new licensing&lt;/a&gt;, that is a yearly subscription available in different levels, starting from a free one, up to an Enterprise grade.&lt;/p&gt;

&lt;p&gt;Whatever the level you choose, you need to create an account on the RhoMobile.com website to use the Suite, both from RhoStudio and from the command line tools.&lt;/p&gt;

&lt;h3 id=&#34;a-name-launching-a-launching-rhostudio:1ccd390bb055ec5c67cc32a64682c5d7&#34;&gt;&lt;a name=&#34;Launching&#34;&gt;&lt;/a&gt;Launching RhoStudio&lt;/h3&gt;

&lt;p&gt;RhoStudio and the whole RhoMobile Suite is now installed on your Mac, but you still need some steps to finish the configuration and start doing some coding. First of all launch RhoStudio from the Application folder (launch the 64-bit version) and select the second ruby environment for it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/OSX_RMS5/LaunchRhoStudio.png&#34; alt=&#34;Launch RhoStudio&#34; title=&#34;Launch RhoStudio&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/OSX_RMS5/SelectRuby.png&#34; alt=&#34;Select Ruby Environment&#34; title=&#34;Select Ruby Environment&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At this moment you will get a request to install a J6SE environment, go ahead and install it (the JDK we installed is for the Android SDK, this is used to run Eclipse)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/OSX_RMS5/Java6SE.png&#34; alt=&#34;Java 6 Runtime&#34; title=&#34;Java 6 Runtime&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Finally we&amp;rsquo;ve RhoStudio running, we need to configure it!&lt;/p&gt;

&lt;p&gt;BTW: if the first launch ends with and error in RhoStudio console, simply close it and relaunch RhoStudio again, you end up with a login request, simply use the RhoMobile account you created at the previous step.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/OSX_RMS5/FirstRhoStudio.png&#34; alt=&#34;RhoStudio first launch&#34; title=&#34;First RhoStudio Launch&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;a-name-setup-a-rhostudio-setup:1ccd390bb055ec5c67cc32a64682c5d7&#34;&gt;&lt;a name=&#34;Setup&#34;&gt;&lt;/a&gt;RhoStudio Setup&lt;/h3&gt;

&lt;p&gt;There are some parameters to setup in RhoStudio before being able to build any project. Opening the settings windows using &lt;strong&gt;Command-,&lt;/strong&gt; you can setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JDK Path = /Library/Java/JavaVirtualMachines/jdk1.7.0_67.jdk&lt;/li&gt;
&lt;li&gt;Android SDK Path = &lt;your user folder&gt;/Development/android-sdk-macosx&lt;/li&gt;
&lt;li&gt;Android NDK Path = &lt;your user folder&gt;/Development/android-ndk-r10&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;as shown in these images:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/OSX_RMS5/RhoStudioParam_1.png&#34; alt=&#34;JDK Path&#34; title=&#34;JDK Path&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/OSX_RMS5/RhoStudioParam_2.png&#34; alt=&#34;Android SDK and NDK path&#34; title=&#34;Android SDK and NDK path&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Another (easier?) way to configure Rhodes is doing it from the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rhodes-setup
We will ask you a few questions below about your dev environment.

JDK path (required) (/Library/Java/Home):
Android SDK path (blank to skip) (): /Users/rhomobile/Development/android-sdk-macosx/
Android NDK path (blank to skip) (/Users/rhomobile/Development/android-ndk-r10):
Windows Mobile 6 SDK CabWiz (blank to skip) ():
BlackBerry JDE 4.6 (blank to skip) ():
BlackBerry JDE 4.6 MDS (blank to skip) ():
BlackBerry JDE 4.2 (blank to skip) ():
BlackBerry JDE 4.2 MDS (blank to skip) ():

If you want to build with other BlackBerry SDK versions edit: /Users/rhomobile/.rvm/gems/ruby-1.9.3-p547@global/gems/rhodes-5.0.2/rhobuild.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-name-build-a-build-your-first-rhomobile-application:1ccd390bb055ec5c67cc32a64682c5d7&#34;&gt;&lt;a name=&#34;Build&#34;&gt;&lt;/a&gt;Build your first RhoMobile application&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ll cut this short at this moment, you should have everything setup at this moment and you should be able to follow the instructions on &lt;a href=&#34;http://docs.rhomobile.com/en/5.0.0/guide/creating_a_project&#34;&gt;RhoMobile website&lt;/a&gt;. You can reach out to me if you&amp;rsquo;ve any question and I plan to add another post with some &amp;laquo;post-setup&amp;raquo; optimization in the near future.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Little command line tricks</title>
      <link>http://pietromaggi.com/2014/01/10/little-command-line-tricks/</link>
      <pubDate>Fri, 10 Jan 2014 19:37:45 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2014/01/10/little-command-line-tricks/</guid>
      <description>

&lt;p&gt;This is a different blog, more a remainder for me than anything else. Hope that someone else can find these useful&amp;hellip; they&amp;rsquo;re for me!&lt;/p&gt;

&lt;h3 id=&#34;recover-a-failed-download-with-curl&#34;&gt;Recover a failed download with curl:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -C - -o partially_downloaded_file &#39;www.example.com/path/to/the/file&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;burn-a-playable-dvd-from-a-video-ts-folder-http-hints-macworld-com-article-php-story-20070612161317338&#34;&gt;&lt;a href=&#34;http://hints.macworld.com/article.php?story=20070612161317338&#34;&gt;Burn a playable DVD from a VIDEO_TS folder&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;After searching the forums and trying various things, I still couldn&amp;rsquo;t find a quick, reliable, free method of burning a VIDEO_TS folder to a pure UDF DVD,
so that it would play in regular DVD players, as well trigger DVD Player to start up automatically. Anyway, as often is the case, Terminal had the answers.
Just type in this command and change the paths to suit:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hdiutil makehybrid -udf -udf-volume-name DVD_NAME -o MY_DVD.iso /path/to/VIDEO_TS/parent/folder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure that /path/to/VIDEO_TS/parent/folder is the path to the folder containing the VIDEO_TS folder, not the VIDEO_TS folder itself.
Once the .iso file has been created, drag this to Disk Utility and hit the Burn button.&lt;/p&gt;

&lt;h3 id=&#34;generate-a-pdf-from-a-markdown-file&#34;&gt;Generate a pdf from a markdown file&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;markdown &amp;lt;File.md&amp;gt; | htmldoc --cont --headfootsize 8.0 --linkcolor blue --linkstyle plain --format pdf14 - &amp;gt; FileFormat.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;android-related-commands&#34;&gt;Android related Commands&lt;/h1&gt;

&lt;h3 id=&#34;taking-screenshot-of-an-android-device&#34;&gt;Taking screenshot of an Android device&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;adb shell screencap -p | perl -pe &#39;s/\x0D\x0A/\x0A/g&#39; &amp;gt; screen.png
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;launch-browser-and-navigate-to-url-on-android-devices&#34;&gt;Launch browser and navigate to URL on android devices&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;adb shell am start -a android.intent.action.VIEW -d URL
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Diving into Android source code</title>
      <link>http://pietromaggi.com/2014/01/02/diving-into-android-source-code/</link>
      <pubDate>Thu, 02 Jan 2014 14:34:27 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2014/01/02/diving-into-android-source-code/</guid>
      <description>

&lt;h2 id=&#34;why-dive-into-android-code&#34;&gt;Why dive into Android code?&lt;/h2&gt;

&lt;p&gt;When you&amp;rsquo;ve to write applications for Android, you&amp;rsquo;re targeting a giant moving API surface, sometimes you can be surprised of some different behavior in different Android versions or with an API call that is not well documented, so having the option to delve into Android Source Code is a great opportunity.&lt;/p&gt;

&lt;p&gt;A lot of things can be written on how to do this, there&amp;rsquo;s some documentation available on &lt;a href=&#34;http://source.android.com/source/index.html&#34;&gt;AOSP website&lt;/a&gt;, however I think that the best starting point is a video tutorial by NewCircle&amp;rsquo;s Instructor Dave Smith on this very topic:&lt;/p&gt;

&lt;h4 id=&#34;diving-into-android-source-code&#34;&gt;Diving into Android Source Code&lt;/h4&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/NsqFOSzoYE8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;p&gt;So, take your time to setup your own copy of the Android source code and, next time you&amp;rsquo;re asking yourself &amp;laquo;What&amp;rsquo;s going on when you call an API, you can check the source code!&amp;raquo;&lt;/p&gt;

&lt;h2 id=&#34;on-a-similar-topic-dalvik-vm&#34;&gt;On a similar topic: Dalvik VM&lt;/h2&gt;

&lt;p&gt;Dan Bernstein has presented at Google I/O 2008 a talk about the internals of Dalvik VM:&lt;/p&gt;

&lt;h4 id=&#34;dalvik-virtual-machine-internals&#34;&gt;Dalvik Virtual Machine Internals&lt;/h4&gt;

&lt;p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/ptjedOZEXPM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re interested in this piece of the Android Source Code, this is the best starting point, even if nowadays ART has taken the place of Dalvik. A lot of Dalvik design is still in use nowadays!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2014 New Year resolutions</title>
      <link>http://pietromaggi.com/2014/01/01/2014-new-year-resolutions/</link>
      <pubDate>Wed, 01 Jan 2014 17:41:32 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2014/01/01/2014-new-year-resolutions/</guid>
      <description>

&lt;h2 id=&#34;blog-a-bit-more&#34;&gt;Blog a bit more&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s been one of my goal for a long time, and something that I always suggest to people to increase their &lt;em&gt;&lt;a href=&#34;http://www.codusoperandi.com/posts/increasing-your-luck-surface-area&#34;&gt;&amp;laquo;Luck Surface Area&amp;raquo;&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In my case I can add an additional goal: keep track of what I do, tricks that I find and document procedure, fixes and workarounds.
That&amp;rsquo;s always a bit of a pain point for me: I manage to do something and then in six months (or six hours) I forgot how I&amp;rsquo;ve done it and I need to start from scratch&amp;hellip; &lt;strong&gt;Never More&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;content-in-markdown&#34;&gt;Content in Markdown&lt;/h3&gt;

&lt;p&gt;That&amp;rsquo;s one of the key technical decisions that I already have clear in mind, the content I&amp;rsquo;m going to produce will be in pure text, using &lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt; formatting.&lt;/p&gt;

&lt;h3 id=&#34;choosing-a-blog-engine-and-an-hosting-platform&#34;&gt;Choosing a blog engine and an hosting platform&lt;/h3&gt;

&lt;p&gt;I don&amp;rsquo;t want to spend a lot of time setting up a system at this moment, I prefer to use my time for other things!
GitHub offer a nice way to have a &lt;a href=&#34;https://pages.github.com/&#34;&gt;git repository used as a blog source&lt;/a&gt;. It&amp;rsquo;s a no-brainer for me!&lt;/p&gt;

&lt;p&gt;Static site generators like &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekill&lt;/a&gt; are another &lt;em&gt;no brainer&lt;/em&gt;. In my case I prefer to have some helps so I&amp;rsquo;m going to use &lt;a href=&#34;http://octopress.org/&#34;&gt;octopress&lt;/a&gt; starting with the &lt;a href=&#34;https://github.com/TheChymera/Koenigspress&#34;&gt;KoenigsPress&lt;/a&gt; theme.&lt;/p&gt;

&lt;h3 id=&#34;hosting-solutions&#34;&gt;Hosting solutions&lt;/h3&gt;

&lt;p&gt;GitHub pages&lt;/p&gt;

&lt;h3 id=&#34;setting-up-my-custom-domain&#34;&gt;Setting up my custom domain&lt;/h3&gt;

&lt;p&gt;At the end I used godaddy.com to buy the domain pietromaggi.com for the next 10 years, I&amp;rsquo;ve managed to find a nice coupon and after few minutes I was able to have everything setup correctly.
Some additional information are available on stackoverflow and this &lt;a href=&#34;http://learnaholic.me/2012/10/10/deploying-octopress-to-github-pages-and-setting-custom-subdomain-cname/&#34;&gt;blog&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;documenting-my-writing-process&#34;&gt;Documenting my writing process&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rake new_post[&amp;quot;my new great post&amp;quot;]
rake preview
git status
git add .
git commit -m &amp;quot;Added new great post&amp;quot;
git push origin source
rake gen_deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Hopefully I&amp;rsquo;ll finally start to crank out some content!&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2013 in numbers</title>
      <link>http://pietromaggi.com/2013/12/31/2013-in-numbers/</link>
      <pubDate>Tue, 31 Dec 2013 20:52:22 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2013/12/31/2013-in-numbers/</guid>
      <description>

&lt;h2 id=&#34;what-an-interesting-year&#34;&gt;What an interesting year!&lt;/h2&gt;

&lt;p&gt;This is the first year that I joined a regional team and this involved a lot of travel (12900 flight hours) across all EMEA.
Has been a blast meeting a lot of end-users, partners and colleagues.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve started doing my &amp;laquo;RhoMobile Developer Roadshow&amp;raquo;, usually a one man show with up to three events a week for a total of 22 cities, from Lisbon to Dubai, and from Capetown to Helsinki.
Has been a blast, physically and emotionally! and I really enjoyed it.&lt;/p&gt;

&lt;p&gt;So 2013 has been an year where I&amp;rsquo;ve discovered that I like to travel, especially to meet people and chat with them about technology. I like to train/coach people, I now have few end-users/partners direct relations as the go-to guy for RhoMobile projects and I like to speak in public, both at our small events and at big technology conferences.  I&amp;rsquo;ve discovered this last point presenting at a couple of DroidCon events later in 2013 (London and Amsterdam).&lt;/p&gt;

&lt;p&gt;2013 included a new manager (Hi James, thanks for all the support) and a new team: the dynamic duo with Paul&amp;amp;Pietro. By the end of 2013 Paul decided to follow a different professional path so, all the best to him!&lt;/p&gt;

&lt;p&gt;And now I&amp;rsquo;m ready for 2014!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>