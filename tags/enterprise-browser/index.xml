<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Enterprise Browser on Pietro F. Maggi</title>
    <link>http://pietromaggi.com/tags/enterprise-browser/index.xml</link>
    <description>Recent content in Enterprise Browser on Pietro F. Maggi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>pfm@pietromaggi.com (Pietro F. Maggi)</managingEditor>
    <webMaster>pfm@pietromaggi.com (Pietro F. Maggi)</webMaster>
    <copyright>(c) 2013-2016 Pietro F. Maggi</copyright>
    <atom:link href="http://pietromaggi.com/tags/enterprise-browser/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Enterprise Browser and DataWedge on Android - friends at the end</title>
      <link>http://pietromaggi.com/2016/10/29/enterprise-browser-and-datawedge-on-android---friends-at-the-end/</link>
      <pubDate>Sat, 29 Oct 2016 11:00:00 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2016/10/29/enterprise-browser-and-datawedge-on-android---friends-at-the-end/</guid>
      <description>

&lt;p&gt;During Enterprise Browser hands-on lab, I got some enquiry about using other MobilityDNA utilities together with EB; in particular how to integrate &lt;em&gt;SwipeAssist&lt;/em&gt; and &lt;em&gt;Simulscan&lt;/em&gt;.
These utilities can be integrated, with some heavy lifting, and accepting some constraints.&lt;/p&gt;

&lt;h2 id=&#34;some-background&#34;&gt;Some background&lt;/h2&gt;

&lt;p&gt;The current scanner framework implementation on our Android devices make available a single scanner object that provides full Scanner control. As always &amp;hellip;&amp;laquo;with great power comes great responsibility&amp;raquo;: an application using the scanner object from the Barcode API, is required to release it when it&amp;rsquo;s going in the background (usually you do this handling in the &lt;code&gt;onPause()&lt;/code&gt; callback in your native application).
Enteprise Browser implements its own &lt;code&gt;Barcode API&lt;/code&gt; on top of the native EMDK Barcode API, however, due to the nature of the web application running inside EB, it does not release the scanner object. This locks the use of the scanner out for any other application that is in foreground while EB is in the background; &lt;em&gt;including DataWedge&lt;/em&gt;.
Because utilities like SwipeAssist, are linked to DataWedge:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NO DataWedge --&amp;gt; NO SwipeAssist
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-standard-experience&#34;&gt;The standard experience&lt;/h3&gt;

&lt;p&gt;When you run EB v1.5 on our Android devices, DataWedge is completely disabled, even when EB is in the background&amp;hellip;
This is good if you plan to work completely inside an EB application, however, sometimes, you want to have some sort of integration.&lt;/p&gt;

&lt;h3 id=&#34;some-of-the-requests&#34;&gt;Some of the requests&lt;/h3&gt;

&lt;p&gt;During these last weeks I got some request from Enterprise Browser users:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Being able to use DataWedge to scan barcodes inside EB&lt;/li&gt;
&lt;li&gt;Being able to use SwipeAssist&lt;/li&gt;
&lt;li&gt;Being able to use SimulScan multibarcode scanning from EB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s start from the first request!&lt;/p&gt;

&lt;h2 id=&#34;making-eb-and-dw-coexist&#34;&gt;Making EB and DW coexist&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve documented the steps to enable DataWedge in EB on the &lt;a href=&#34;http://techdocs.zebra.com/enterprise-browser/1-5/guide/datawedge/&#34;&gt;documentation website for EB v1.5&lt;/a&gt;.
So, go there, and download the new DW profiles documented there!&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve imported the two profile from the previous section, DataWedge will display a new profile with the name &amp;laquo;EnterpriseBrowser&amp;raquo;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_7b.png&#34; alt=&#34;EnterpriseBrowser profile now shown&#34; title=&#34;profile&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re now ready to play with Enteprise Browser configuration to see if this works.&lt;/p&gt;

&lt;h3 id=&#34;update-config-xml-and-test-a-sample-webpage&#34;&gt;Update Config.xml and test a sample webpage&lt;/h3&gt;

&lt;p&gt;To follow this steps you need to have launched EB at least once, so that it creates its default configuration files under &lt;code&gt;/&amp;lt;sdcard/internal&amp;gt;/Android/data/com.symbol.enterprisebrowser&lt;/code&gt;.
The you can proceeds copying it to your PC to apply some changes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/eb_Config.xml.png&#34; alt=&#34;Copy Config.xml to your PC to Modify it&#34; title=&#34;Copy Config.xml to your PC to modify it&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You need to apply three changes to follow along the rest of this blog:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a name=&#34;Config_1&#34;&gt;&lt;/a&gt;Enable the internal EB webserver and specify the folder how we plan to have the local files (as an example on the internal sdcard of the TC55 KK):&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;WebServer&amp;gt;
      &amp;lt;Enabled VALUE=&amp;quot;1&amp;quot;/&amp;gt;
      &amp;lt;Port VALUE=&amp;quot;8082&amp;quot;/&amp;gt;
      &amp;lt;WebFolder VALUE=&amp;quot;/storage/sdcard0/www/&amp;quot;/&amp;gt;
      &amp;lt;Public VALUE=&amp;quot;0&amp;quot;/&amp;gt;
    &amp;lt;/WebServer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Modify the startpage value:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;General&amp;gt;
      &amp;lt;Name value=&amp;quot;Menu&amp;quot;/&amp;gt;
      &amp;lt;StartPage value=&amp;quot;http://127.0.0.1:8082/index.html&amp;quot; name=&amp;quot;Lab&amp;quot;/&amp;gt;
      &amp;lt;UseRegularExpressions value=&amp;quot;0&amp;quot;/&amp;gt;
    &amp;lt;/General&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Enable the use of DataWedge for barcode scanning inside Enteprise Browser&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;usedwforscanning  value=&amp;quot;1&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can try with a simple HTML page to see if it works:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;html&amp;gt;
      &amp;lt;head&amp;gt;
      &amp;lt;/head&amp;gt;
      &amp;lt;body&amp;gt;
        &amp;lt;input type=&amp;quot;number&amp;quot; id=&amp;quot;Barcode&amp;quot; /&amp;gt;
      &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To test this page on the device, we&amp;rsquo;ve to copy it into the root folder of the HTTP server we configured in our &lt;code&gt;Config.xml&lt;/code&gt;, if you used the settings reported &lt;a href=&#34;#Config_1&#34;&gt;here&lt;/a&gt;, you can copy this file to &lt;code&gt;/storage/sdcard0/www/&lt;/code&gt; giving it the name: &lt;code&gt;index.html&lt;/code&gt;.
Opening Enterprise Browser we see that we can:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;touch the edit field (and have the numeric keyboard displayed)&lt;/li&gt;
&lt;li&gt;scan a barcode with the hardware trigger&lt;/li&gt;
&lt;li&gt;have the barcode inserted in the edit field by DataWedge&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/eb_step1.png&#34; alt=&#34;EB and DW test1&#34; title=&#34;EB and DW test1&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;automate-this-step-a-bit&#34;&gt;Automate this step a bit&lt;/h3&gt;

&lt;p&gt;Next thing that would be nice to have is to avoid to touch the display to be able to scan, in this case a little JavaScript can help.
With this version of the sample we can immediately scan a barcode getting the data in the input field. Note that no Keyboard is shown as I&amp;rsquo;ve not touched the input field here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;script&amp;gt;
      function domReadyEvent() {
        setTimeout(function() {
          var fld = document.getElementById(&#39;Barcode&#39;);
          fld.focus();
        }, 1000);
      }

      window.addEventListener(&#39;DOMContentLoaded&#39;, domReadyEvent);
    &amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;input type=&amp;quot;number&amp;quot; id=&amp;quot;Barcode&amp;quot; /&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/eb_step2.png&#34; alt=&#34;EB and DW test2&#34; title=&#34;EB and DW test2&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;eb-and-swipeassist&#34;&gt;EB and SwipeAssist&lt;/h2&gt;

&lt;p&gt;What if we want to use SwipeAssist inside this demo application?
It&amp;rsquo;s simply a matter of enabling the &lt;code&gt;Show&lt;/code&gt; option in the Data Capture Panel section of our DataWedge profile &lt;code&gt;EB_Simulscan&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_15.png&#34; alt=&#34;Activate SwipeAssist in DataWedge Profile for EB&#34; title=&#34;Activate SwipeAssist in DataWedge Profile for EB&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And the result in EB is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/eb_swipeassist.png&#34; alt=&#34;SwipeAssist active in EB&#34; title=&#34;SwipeAssist active in EB&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;eb-and-simulscan&#34;&gt;EB and SimulScan&lt;/h2&gt;

&lt;p&gt;Next, and final, goal is to use SimulScan to read two barcodes and have the data filled in two different input field, with the minimum JavaScript necessary to select the first input field:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;script&amp;gt;
      function domReadyEvent() {
        setTimeout(function() {
          var fld = document.getElementById(&#39;Barcode&#39;);
          fld.focus();
        }, 1000);
      }

      window.addEventListener(&#39;DOMContentLoaded&#39;, domReadyEvent);
    &amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;input type=&amp;quot;number&amp;quot; id=&amp;quot;Barcode&amp;quot; /&amp;gt; &amp;lt;br&amp;gt;
    &amp;lt;input type=&amp;quot;number&amp;quot; id=&amp;quot;Barcode2&amp;quot; /&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It now time to play a bit with the DataWedge profile configuration, starting disabling the Data Capture Panel, and Enabling Simulscan, selecting the &lt;code&gt;Default - Barcode 2&lt;/code&gt; template:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_16.png&#34; alt=&#34;Enable Simulscan in DataWedge Profile for EB&#34; title=&#34;Enable Simulscan in DataWedge Profile for EB&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If we now try this on our page, we see that the two barcodes are send as a single string, we need to split the two barcodes.  The &lt;code&gt;Region Separator&lt;/code&gt; seems like a good candidate, however, even sending a tab as a separator is not going to solve this issue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_17.png&#34; alt=&#34;Tab as Region Separator&#34; title=&#34;Tab as Region Separator&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_18.png&#34; alt=&#34;Final DataWedge Profile with Tab Terminator in Simulscan&#34; title=&#34;Final DataWedge Profile with Tab Terminator in Simulscan&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The reason is that the web pages takes to much time to switch the focus to the second input field and so you end up loosing the data of the second barcodes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/eb_step3a.png&#34; alt=&#34;Second barcode from Simulscan is lost&#34; title=&#34;Second barcode from Simulscan is lost&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can try a different solution using DataWedge &lt;em&gt;Advanced Data Formatting&lt;/em&gt; so, we revert back to not have any region separator for Simulscan and we add and Advanced Data formatting rule:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_19.png&#34; alt=&#34;Add an Advanced Formatting Rule&#34; title=&#34;Add an Advanced Formatting Rule&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Enable it!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_20.png&#34; alt=&#34;Enable it&#34; title=&#34;Enable it&#34; /&gt;&lt;/p&gt;

&lt;p&gt;and specify when it needs to be activated. I this case for me it&amp;rsquo;s always in my scenario&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_21.png&#34; alt=&#34;ADF Criteria&#34; title=&#34;ADF Criteria&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Just checking that this rule is only applied to data coming from Simulscan and not from the Barcode scanner&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_22.png&#34; alt=&#34;ADF Source&#34; title=&#34;ADF Source&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And now the actual rule.
The basic idea is to send the first 9 chars of the data coming from Simulscan (in my case this is the first barcode), then send a tab, wait for 100ms and then send the rest of the data coming from Simulscan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_23.png&#34; alt=&#34;Enable it&#34; title=&#34;Enable it&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Again:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Send the first 9 chars&lt;/li&gt;
&lt;li&gt;Send a tab (&lt;code&gt;0x09&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Wait 100ms&lt;/li&gt;
&lt;li&gt;Send the rest of the data&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If we try this setup with our simple test page, the result is actually the desidered one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/eb_step3.png&#34; alt=&#34;The final app scanning two barcodes at once with Simulscan&#34; title=&#34;The final app scanning two barcodes at once with Simulscan&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We reached the end of this exploration on how is possible to integrate Enterprise Browser with DataWedge.
In some cases it makes sense to use a similar setup to enable existing webpages without touching them. For this reason, in the samples presented here, I tried to minimize the amout of JavaScript code needed to have them working.
A much better integration can be achieved starting to work on the onKeyPress events or using EB Intent API.
Personally I think that if you want to customize your web app to have a better integration on Zebra devices, using EB&amp;rsquo;s Barcode API is a better choice that following the DataWedge route.&lt;/p&gt;

&lt;p&gt;Talking about Simulscan, it could be interesting evaluate how to integrate DataWedge SimulScan Intent output with EB&amp;hellip; Till there&amp;rsquo;s no integrated SimulScan API in Enterprise Browser.&lt;/p&gt;

&lt;p&gt;Let me know if you have any comment on these topics.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Back Button and Enterprise Browser</title>
      <link>http://pietromaggi.com/2015/09/25/android-back-button-and-enterprise-browser/</link>
      <pubDate>Fri, 25 Sep 2015 11:33:11 +0200</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2015/09/25/android-back-button-and-enterprise-browser/</guid>
      <description>

&lt;h2 id=&#34;edit&#34;&gt;Edit&lt;/h2&gt;

&lt;p&gt;Enteprise Browser v1.3 introduced a change that requires to enable &lt;code&gt;FunctionKeysCapturable&lt;/code&gt; to be able to use the KeyCapture API.&lt;br /&gt;
To do this you need to update your &lt;code&gt;Config.xml&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;FunctionKeysCapturable                 value=&amp;quot;1&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;enterprise-browser&#34;&gt;Enterprise Browser&lt;/h2&gt;

&lt;p&gt;Enterprise Browser is Zebra Technologies&amp;rsquo; Industrial Browser built for our Rugged Devices, we support most of our Windows Mobile/Windows CE devices and Android devices.&lt;/p&gt;

&lt;p&gt;This product is usually used with existing web application that cannot be updated/modified moving from one device to another.
This help us winning some opportunities but sometimes present some unique challenges like, as an example, disabling the Android back button default behavior.&lt;/p&gt;

&lt;h2 id=&#34;back-button-on-android&#34;&gt;Back Button on Android?&lt;/h2&gt;

&lt;p&gt;Given that this is a cross-platform product (built on top of our RhoMobile Suite) we don&amp;rsquo;t have a custom settings to disable the back button in the Config.xml configuration file, however it is still possible to add a default Metatags in the configuration so that no changes in the existing pages are needed.&lt;/p&gt;

&lt;p&gt;So, do we&amp;rsquo;ve an API to intercept the Back Button?&lt;/p&gt;

&lt;p&gt;Of course! the &lt;a href=&#34;https://developer.motorolasolutions.com/docs/DOC-2520&#34;&gt;KeyCapture API&lt;/a&gt; can be used to intercept and disable it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;EB.KeyCapture.captureKey(BOOLEAN dispatch, STRING keyValue)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setting the &lt;code&gt;dispatch&lt;/code&gt; value to &lt;code&gt;false&lt;/code&gt;,  We just need to get the correct KeyCode.&lt;/p&gt;

&lt;p&gt;This can a bit tricky and can be different from device to device, the best solution I&amp;rsquo;ve is to ask directly to the device with a simple HTML page that display the keycode off all the keys that are pressed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;META HTTP-Equiv=&amp;quot;KeyCapture&amp;quot; Content=&amp;quot;KeyValue:All; Dispatch:False; KeyEvent:url(&#39;JavaScript:alert(&#39;Key Pressed: %s&#39;);&#39;)&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
	&amp;lt;title&amp;gt;Display KeyCode&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;H1&amp;gt;Press a key to see it&#39;s KeyCode&amp;lt;/H1&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we&amp;rsquo;ve the correct KeyCode, we just need to call this API in every page that is loaded in the browser&amp;hellip; Sometimes that is not easy to do sometimes, especially when the application cannot be modified.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve a solution for this issue: having a &lt;code&gt;DefaultMetaTags&lt;/code&gt; in Enterprise Browser&amp;rsquo;s configuration.&lt;/p&gt;

&lt;h2 id=&#34;what-s-a-defaultmetatags&#34;&gt;What&amp;rsquo;s a DefaultMetaTags&lt;/h2&gt;

&lt;p&gt;We can start from the &lt;a href=&#34;https://developer.motorolasolutions.com/docs/DOC-2571#defaultmetatags&#34;&gt;documentation&lt;/a&gt;, what does it means?&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;DefaultMetaTags&lt;/code&gt; is a way to call an Enterprise Browser API on top of every HTML page that is loaded in the browser. This can be used, as an example to enable on screen UI elements like the battery or WiFi icon.&lt;/p&gt;

&lt;p&gt;So, putting the different things together, we can put this in the &amp;ldquo;Config.xml&amp;rsquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;DefaultMetaTags&amp;gt;
    &amp;lt;MetaTag value=&amp;quot;KeyCapture~KeyValue:0xA6;Dispatch:False&amp;quot;/&amp;gt;
 &amp;lt;/DefaultMetaTags&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BTW: &lt;code&gt;0xA6&lt;/code&gt; is the correct value for the Back Button on a TC55 running Android v4.4 KitKat.&lt;/p&gt;

&lt;h2 id=&#34;closing-comments&#34;&gt;Closing comments&lt;/h2&gt;

&lt;p&gt;Enterprise Browser&amp;rsquo;s &lt;code&gt;DefaultMetaTags&lt;/code&gt; is a very flexible way to &amp;laquo;patch&amp;raquo; an existing Web application without touching its source code.&lt;/p&gt;

&lt;p&gt;As a closing comment here&amp;rsquo;s a sample configuration that zoom the current web page pressing a button:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;MetaTag VALUE=&amp;quot;KeyCapture~KeyValue:0x79;Dispatch:False;KeyEvent:url(&#39;JavaScript:eval(&#39;zoom.page=\&#39;1.3\&#39;;&#39;);&#39;)&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;If you&amp;rsquo;re interested in Enterprise Browser, you can visit us at &lt;a href=&#34;http://bit.ly/EMEAAppForum2015&#34;&gt;EMEA AppForum in London, Oct. 12th-14th&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>