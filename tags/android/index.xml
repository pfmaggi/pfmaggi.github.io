<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Pietro F. Maggi</title>
    <link>http://pietromaggi.com/tags/android/</link>
    <description>Recent content in Android on Pietro F. Maggi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>pfm@pietromaggi.com (Pietro F. Maggi)</managingEditor>
    <webMaster>pfm@pietromaggi.com (Pietro F. Maggi)</webMaster>
    <copyright>(c) 2013-2016 Pietro F. Maggi</copyright>
    <lastBuildDate>Thu, 26 May 2016 20:00:00 +0100</lastBuildDate>
    <atom:link href="http://pietromaggi.com/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Enterprise Browser and DataWedge on Android - friends at the end</title>
      <link>http://pietromaggi.com/2016/05/26/enterprise-browser-and-datawedge-on-android---friends-at-the-end/</link>
      <pubDate>Thu, 26 May 2016 20:00:00 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2016/05/26/enterprise-browser-and-datawedge-on-android---friends-at-the-end/</guid>
      <description>

&lt;p&gt;This has been a tough week: a flat tire (and a lost flight), three (very) late flights in a row and sleep deprivation. Luckily I have our Developer&amp;rsquo;s Kitchen workshops keeping me awake, with interesting questions from the attendees.&lt;/p&gt;

&lt;p&gt;During Enterprise Browser hands-on lab, I got some enquiry about using other MobilityDNA utilities together with EB; in particular how to integrate &lt;em&gt;SwipeAssist&lt;/em&gt; and &lt;em&gt;Simulscan&lt;/em&gt;.&lt;br /&gt;
These utilities can be integrated, with some heavy lifting, and accepting some constraints.&lt;/p&gt;

&lt;h2 id=&#34;some-background:1b590469ff2d9700a874a759be47ee99&#34;&gt;Some background&lt;/h2&gt;

&lt;p&gt;The current scanner framework implementation on our Android devices make available a single scanner object that provides full Scanner control. As always &amp;hellip;&amp;laquo;with great power comes great responsibility&amp;raquo;: an application using the scanner object from the Barcode API, is required to release it when it&amp;rsquo;s going in the background (usually you do this handling in the &lt;code&gt;onPause()&lt;/code&gt; callback in your native application).&lt;br /&gt;
Enteprise Browser implements its own &lt;code&gt;Barcode API&lt;/code&gt; on top of the native EMDK Barcode API, however, due to the nature of the web application running inside EB, it does not release the scanner object. This locks the use of the scanner out for any other application that is in foreground while EB is in the background; &lt;em&gt;including DataWedge&lt;/em&gt;.&lt;br /&gt;
Because utilities like SwipeAssist, are linked to DataWedge:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NO DataWedge --&amp;gt; NO SwipeAssist
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-standard-experience:1b590469ff2d9700a874a759be47ee99&#34;&gt;The standard experience&lt;/h3&gt;

&lt;p&gt;When you run EB v1.4 on our Android devices, DataWedge is completely disabled, even when EB is in the background&amp;hellip;&lt;br /&gt;
This is good if you plan to work completely inside an EB application, however, sometimes, you want to have some sort of integration.&lt;/p&gt;

&lt;h3 id=&#34;some-of-the-requests:1b590469ff2d9700a874a759be47ee99&#34;&gt;Some of the requests&lt;/h3&gt;

&lt;p&gt;During these last weeks I got some request from Enterprise Browser users:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Being able to use DataWedge to scan barcodes inside EB&lt;/li&gt;
&lt;li&gt;Being able to use SwipeAssist&lt;/li&gt;
&lt;li&gt;Being able to use SimulScan multibarcode scanning from EB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s start from the first request!&lt;/p&gt;

&lt;h2 id=&#34;making-eb-and-dw-coexist:1b590469ff2d9700a874a759be47ee99&#34;&gt;Making EB and DW coexist&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve documented the steps to use DataWedge in EB on the &lt;a href=&#34;http://ebzebra.github.io/docs/1.4/#guide-datawedge&#34;&gt;documentation website for EB v1.4&lt;/a&gt;.&lt;br /&gt;
Somehow, I think that it takes a lot of thinks for granted, so I&amp;rsquo;m going to put here a step-by-step guide on how to do the integration.&lt;/p&gt;

&lt;h3 id=&#34;the-hidden-datawedge-profiles:1b590469ff2d9700a874a759be47ee99&#34;&gt;The hidden DataWedge profiles&lt;/h3&gt;

&lt;p&gt;On a new Zebra&amp;rsquo;s Android device, you just have three visible DataWedge profiles, however there&amp;rsquo;re more profiles that are hidden and not editable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_1.png&#34; alt=&#34;DataWedge initial setup&#34; title=&#34;DataWedge initial setup&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can guess, we need to modify one of the profiles that are not modificable, this means, a bit of heavy lifting.&lt;br /&gt;
So better proceeds with some caution, starting doing this on a test device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/lifting.png&#34; alt=&#34;Lifting&#34; title=&#34;Lifting&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;manually-modify-datawedge-profiles:1b590469ff2d9700a874a759be47ee99&#34;&gt;Manually Modify DataWedge profiles&lt;/h3&gt;

&lt;p&gt;First step is to export all the profiles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Launch DataWedge and Export the profiles using the &lt;code&gt;Menu-&amp;gt;Settings-&amp;gt;Export&lt;/code&gt; option to export the profiles into (for a TC55KK) &lt;code&gt;/storage/sdcard0/Android/data/com.symbol.datawedge/files&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_2.png&#34; alt=&#34;Export all DataWedge profiles&#34; title=&#34;Export all DataWedge profiles&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Copy the file on your PC and use an utility like &lt;a href=&#34;http://sqlite2009pro.azurewebsites.net/&#34;&gt;SQLite2009 Pro Enterprise Manager&lt;/a&gt; for Windows or &lt;a href=&#34;https://menial.co.uk/base/&#34;&gt;Base&lt;/a&gt; for the mac to open and modify it. Any SQLite editor is ok for this, even sqlite command line interface.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here&amp;rsquo;re the profiles included in DataWedge on a brand new TC55 KK with BSP 2.65:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_3.png&#34; alt=&#34;All DataWedge profiles&#34; title=&#34;All DataWedge profiles&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In this picture I&amp;rsquo;ve highlighted the RhoElements profile that is the one associated to Enterprise Browser package.&lt;br /&gt;
We need to update a couple of tables, first, take a note about the &lt;code&gt;id&lt;/code&gt; associated with this profile, in my case it&amp;rsquo;s the profile number 6.&lt;/p&gt;

&lt;p&gt;First table to modify is &lt;code&gt;applist&lt;/code&gt;, where we need to delete all packages/activities associated with the &lt;code&gt;profile_id&lt;/code&gt; linked to the RhoElements profile.&lt;br /&gt;
In my DataWedge.db I&amp;rsquo;ve two line to delete:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_4.png&#34; alt=&#34;RhoElements profile associated apps&#34; title=&#34;RhoElements profile associated apps&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Second step is to update the RhoElements entry in the profiles table to make this profile editable and deletable:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_5.png&#34; alt=&#34;Update RhoElements profile&#34; title=&#34;Update RhoElements profile&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We then need to save the DataWedge.db database and copy it back to the device, I&amp;rsquo;m going to use the same folder &lt;code&gt;/storage/sdcard0/Android/data/com.symbol.datawedge/files&lt;/code&gt; and manually import it back into DataWedge using the command &lt;code&gt;Menu-&amp;gt;Settings-&amp;gt;Import&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_6.png&#34; alt=&#34;Import all DataWedge profiles&#34; title=&#34;Import all DataWedge profiles&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now the RhoElements profile is visible and can me modified on the device if needed. We&amp;rsquo;re good to go with no changes at this moment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_7.png&#34; alt=&#34;RhoElements profile is now visible&#34; title=&#34;RhoElements profile is now visible&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;create-a-new-datawedge-profile-linked-to-enterprise-browser-activity:1b590469ff2d9700a874a759be47ee99&#34;&gt;Create a new DataWedge Profile linked to Enterprise Browser Activity&lt;/h3&gt;

&lt;p&gt;Next step is to create a DataWedge profile linked to our Enteprise Browser, in this way it will be possible to customize DW experience inside EB.&lt;br /&gt;
This requires to have Enterprise Browser installed on the device so, if you&amp;rsquo;ve not yet installed it, proceeds to our &lt;a href=&#34;https://developer.motorolasolutions.com/community/technologies/enterprisebrowser&#34;&gt;developer community website&lt;/a&gt;, download the latest release, install it, and then come back.&lt;/p&gt;

&lt;p&gt;Once, you&amp;rsquo;ve EB installed on the device, from inside DataWedge, you can create a new profile using the &lt;code&gt;Menus-&amp;gt;New profile&lt;/code&gt; command, we can use &lt;code&gt;EB_Simulscan&lt;/code&gt; as new profile name to remember what is our final goal :-)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_8.png&#34; alt=&#34;Create a new EB profile&#34; title=&#34;Create a new EB profile&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In this way we will have our new playground available:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_9.png&#34; alt=&#34;Our new EB profile&#34; title=&#34;Our new EB profile&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now we need to link this profile with EB package name and activities.&lt;br /&gt;
To do this, open the EB_Simulscan profile and tap on &lt;code&gt;Associated apps&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_10.png&#34; alt=&#34;Tap on Associated apps&#34; title=&#34;Tap on Associated apps&#34; /&gt;&lt;/p&gt;

&lt;p&gt;From the association screen we need to select &lt;code&gt;Menu-&amp;gt;New app/activity&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_11.png&#34; alt=&#34;Select New app/activity&#34; title=&#34;Select New app/activity&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then select EB package from the list (EB v1.4 needs to be installed at this point):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_12.png&#34; alt=&#34;Select EB package&#34; title=&#34;Select EB package&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then select &lt;code&gt;*&lt;/code&gt; to indicate that this profile is linked to all activities of the selected package:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_13.png&#34; alt=&#34;Select * as activity&#34; title=&#34;Select * as activity&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At the end we get this configuration for our profile:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_14.png&#34; alt=&#34;Final configuration for our new EB profile&#34; title=&#34;Final configuration for our new EB profile&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re now ready to play with Enteprise Browser configuration to see if this works.&lt;/p&gt;

&lt;h3 id=&#34;update-config-xml-and-test-a-sample-webpage:1b590469ff2d9700a874a759be47ee99&#34;&gt;Update Config.xml and test a sample webpage&lt;/h3&gt;

&lt;p&gt;To follow this steps you need to have launched EB at least once, so that it creates its default configuration files under &lt;code&gt;/&amp;lt;sdcard/internal&amp;gt;/Android/data/com.symbol.enterprisebrowser&lt;/code&gt;.&lt;br /&gt;
The you can proceeds copying it to your PC to apply some changes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/eb_Config.xml.png&#34; alt=&#34;Copy Config.xml to your PC to Modify it&#34; title=&#34;Copy Config.xml to your PC to modify it&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You need to apply three changes to follow along the rest of this blog:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a name=&#34;Config_1&#34;&gt;&lt;/a&gt;Enable the internal EB webserver and specify the folder how we plan to have the local files (as an example on the internal sdcard of the TC55 KK):&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;WebServer&amp;gt;
      &amp;lt;Enabled VALUE=&amp;quot;1&amp;quot;/&amp;gt;
      &amp;lt;Port VALUE=&amp;quot;8082&amp;quot;/&amp;gt;
      &amp;lt;WebFolder VALUE=&amp;quot;/storage/sdcard0/www/&amp;quot;/&amp;gt;
      &amp;lt;Public VALUE=&amp;quot;0&amp;quot;/&amp;gt;
    &amp;lt;/WebServer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Modify the startpage value:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;General&amp;gt;
      &amp;lt;Name value=&amp;quot;Menu&amp;quot;/&amp;gt;
      &amp;lt;StartPage value=&amp;quot;http://127.0.0.1:8082/index.html&amp;quot; name=&amp;quot;Lab&amp;quot;/&amp;gt;
      &amp;lt;UseRegularExpressions value=&amp;quot;0&amp;quot;/&amp;gt;
    &amp;lt;/General&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Enable the use of DataWedge for barcode scanning inside Enteprise Browser&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;usedwforscanning  value=&amp;quot;1&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can try with a simple HTML page to see if it works:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;html&amp;gt;
      &amp;lt;head&amp;gt;
      &amp;lt;/head&amp;gt;
      &amp;lt;body&amp;gt;
        &amp;lt;input type=&amp;quot;number&amp;quot; id=&amp;quot;Barcode&amp;quot; /&amp;gt;
      &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To test this page on the device, we&amp;rsquo;ve to copy it into the root folder of the HTTP server we configured in our &lt;code&gt;Config.xml&lt;/code&gt;, if you used the settings reported &lt;a href=&#34;#Config_1&#34;&gt;here&lt;/a&gt;, you can copy this file to &lt;code&gt;/storage/sdcard0/www/&lt;/code&gt; giving it the name: &lt;code&gt;index.html&lt;/code&gt;.&lt;br /&gt;
Opening Enterprise Browser we see that we can:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;touch the edit field (and have the numeric keyboard displayed)&lt;/li&gt;
&lt;li&gt;scan a barcode with the hardware trigger&lt;/li&gt;
&lt;li&gt;have the barcode inserted in the edit field by DataWedge&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/eb_step1.png&#34; alt=&#34;EB and DW test1&#34; title=&#34;EB and DW test1&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;automate-this-step-a-bit:1b590469ff2d9700a874a759be47ee99&#34;&gt;Automate this step a bit&lt;/h3&gt;

&lt;p&gt;Next thing that would be nice to have is to avoid to touch the display to be able to scan, in this case a little JavaScript can help.&lt;br /&gt;
With this version of the sample we can immediately scan a barcode getting the data in the input field. Note that no Keyboard is shown as I&amp;rsquo;ve not touched the input field here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;script&amp;gt;
      function domReadyEvent() {
        setTimeout(function() {
          var fld = document.getElementById(&#39;Barcode&#39;);
          fld.focus();
        }, 1000);
      }
      
      window.addEventListener(&#39;DOMContentLoaded&#39;, domReadyEvent);
    &amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;input type=&amp;quot;number&amp;quot; id=&amp;quot;Barcode&amp;quot; /&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/eb_step2.png&#34; alt=&#34;EB and DW test2&#34; title=&#34;EB and DW test2&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;eb-and-swipeassist:1b590469ff2d9700a874a759be47ee99&#34;&gt;EB and SwipeAssist&lt;/h2&gt;

&lt;p&gt;What if we want to use SwipeAssist inside this demo application?&lt;br /&gt;
It&amp;rsquo;s simply a matter of enabling the &lt;code&gt;Show&lt;/code&gt; option in the Data Capture Panel section of our DataWedge profile &lt;code&gt;EB_Simulscan&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_15.png&#34; alt=&#34;Activate SwipeAssist in DataWedge Profile for EB&#34; title=&#34;Activate SwipeAssist in DataWedge Profile for EB&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And the result in EB is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/eb_swipeassist.png&#34; alt=&#34;SwipeAssist active in EB&#34; title=&#34;SwipeAssist active in EB&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;eb-and-simulscan:1b590469ff2d9700a874a759be47ee99&#34;&gt;EB and SimulScan&lt;/h2&gt;

&lt;p&gt;Next, and final, goal is to use SimulScan to read two barcodes and have the data filled in two different input field, with the minimum JavaScript necessary to select the first input field:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;script&amp;gt;
      function domReadyEvent() {
        setTimeout(function() {
          var fld = document.getElementById(&#39;Barcode&#39;);
          fld.focus();
        }, 1000);
      }
      
      window.addEventListener(&#39;DOMContentLoaded&#39;, domReadyEvent);
    &amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;input type=&amp;quot;number&amp;quot; id=&amp;quot;Barcode&amp;quot; /&amp;gt; &amp;lt;br&amp;gt;
    &amp;lt;input type=&amp;quot;number&amp;quot; id=&amp;quot;Barcode2&amp;quot; /&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It now time to play a bit with the DataWedge profile configuration, starting disabling the Data Capture Panel, and Enabling Simulscan, selecting the &lt;code&gt;Default - Barcode 2&lt;/code&gt; template:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_16.png&#34; alt=&#34;Enable Simulscan in DataWedge Profile for EB&#34; title=&#34;Enable Simulscan in DataWedge Profile for EB&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If we now try this on our page, we see that the two barcodes are send as a single string, we need to split the two barcodes.  The &lt;code&gt;Region Separator&lt;/code&gt; seems like a good candidate, however, even sending a tab as a separator is not going to solve this issue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_17.png&#34; alt=&#34;Tab as Region Separator&#34; title=&#34;Tab as Region Separator&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_18.png&#34; alt=&#34;Final DataWedge Profile with Tab Terminator in Simulscan&#34; title=&#34;Final DataWedge Profile with Tab Terminator in Simulscan&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The reason is that the web pages takes to much time to switch the focus to the second input field and so you end up loosing the data of the second barcodes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/eb_step3a.png&#34; alt=&#34;Second barcode from Simulscan is lost&#34; title=&#34;Second barcode from Simulscan is lost&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can try a different solution using DataWedge &lt;em&gt;Advanced Data Formatting&lt;/em&gt; so, we revert back to not have any region separator for Simulscan and we add and Advanced Data formatting rule:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_19.png&#34; alt=&#34;Add an Advanced Formatting Rule&#34; title=&#34;Add an Advanced Formatting Rule&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Enable it!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_20.png&#34; alt=&#34;Enable it&#34; title=&#34;Enable it&#34; /&gt;&lt;/p&gt;

&lt;p&gt;and specify when it needs to be activated. I this case for me it&amp;rsquo;s always in my scenario&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_21.png&#34; alt=&#34;ADF Criteria&#34; title=&#34;ADF Criteria&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Just checking that this rule is only applied to data coming from Simulscan and not from the Barcode scanner&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_22.png&#34; alt=&#34;ADF Source&#34; title=&#34;ADF Source&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And now the actual rule.&lt;br /&gt;
The basic idea is to send the first 9 chars of the data coming from Simulscan (in my case this is the first barcode), then send a tab, wait for 100ms and then send the rest of the data coming from Simulscan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/dw_23.png&#34; alt=&#34;Enable it&#34; title=&#34;Enable it&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Again:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Send the first 9 chars&lt;/li&gt;
&lt;li&gt;Send a tab (&lt;code&gt;0x09&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Wait 100ms&lt;/li&gt;
&lt;li&gt;Send the rest of the data&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If we try this setup with our simple test page, the result is actually the desidered one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/eb_dw/eb_step3.png&#34; alt=&#34;The final app scanning two barcodes at once with Simulscan&#34; title=&#34;The final app scanning two barcodes at once with Simulscan&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion:1b590469ff2d9700a874a759be47ee99&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We reached the end of this exploration on how is possible to integrate Enterprise Browser with DataWedge.&lt;br /&gt;
In some cases it makes sense to use a similar setup to enable existing webpages without touching them. For this reason, in the samples presented here, I tried to minimize the amout of JavaScript code needed to have them working.&lt;br /&gt;
A much better integration can be achieved starting to work on the onKeyPress events or using EB Intent API.&lt;br /&gt;
Personally I think that if you want to customize your web app to have a better integration on Zebra devices, using EB&amp;rsquo;s Barcode API is a better choice that following the DataWedge route.&lt;/p&gt;

&lt;p&gt;Talking about Simulscan, it could be interesting evaluate how to integrate DataWedge SimulScan Intent output with EB&amp;hellip; Till there&amp;rsquo;s no integrated SimulScan API in Enterprise Browser.&lt;/p&gt;

&lt;p&gt;Let me know if you have any comment on these topics.&lt;/p&gt;

&lt;h4 id=&#34;edit:1b590469ff2d9700a874a759be47ee99&#34;&gt;Edit&lt;/h4&gt;

&lt;p&gt;2016-06-01 - Minor correction to the initial write-up (added explanation about where to copy the html pages on the device).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Disabling MC40 Home Button with a custom intent</title>
      <link>http://pietromaggi.com/2016/01/18/disabling-mc40-home-button-with-a-custom-intent/</link>
      <pubDate>Mon, 18 Jan 2016 09:00:00 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2016/01/18/disabling-mc40-home-button-with-a-custom-intent/</guid>
      <description>

&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;Zebra Technologies&amp;rsquo; devices are purpose built to be single use devices. Having an OS like Android nowadays provides a lot of flexibility&amp;hellip;  sometimes a bit too much.&lt;br /&gt;
With this idea in mind, the Android version used on these devices sometimes provide some nice surprise, like an Intent to disable the omnipresent Android&amp;rsquo;s Home button.&lt;/p&gt;

&lt;h2 id=&#34;the-basic-idea&#34;&gt;The basic idea&lt;/h2&gt;

&lt;p&gt;MC40 support an &lt;a href=&#34;http://developer.android.com/reference/android/content/Intent.html&#34;&gt;Android intent&lt;/a&gt; to disable the normal Home button behavior: &lt;em&gt;You can disable it and there&amp;rsquo;s no way to exit from the foreground application&lt;/em&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.zebra.com/community/android/android-forums/android-blogs/blog/2014/12/19/disabling-home-button-via-intent-mc40&#34;&gt;You can find a blog by Pavel Machala briefly describing the idea on Launchpad&lt;/a&gt;.&lt;br /&gt;
Here I want to present a simple sample that show how to use this intent, covering the only issue that is: &lt;em&gt;handling re-branded devices&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;project-setup&#34;&gt;Project setup&lt;/h2&gt;

&lt;p&gt;We start creating a new Android application in Android Studio (I&amp;rsquo;m using Android Studio v1.5.1 with Build tools 23.0.1, you&amp;rsquo;re mileage can vary if you&amp;rsquo;re using a different setup).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; is not required to build this application using Zebra Technologies&amp;rsquo; EMDK. A normal Android application can use this intent.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/AndroidNewPrj_01.jpg&#34; alt=&#34;Creating a new Android Application, step 1&#34; title=&#34;Creating a new Android Application, step 1&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/AndroidNewPrj_02.jpg&#34; alt=&#34;Creating a new Android Application, step 2&#34; title=&#34;Creating a new Android Application, step 2&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/AndroidNewPrj_03.jpg&#34; alt=&#34;Creating a new Android Application, step 3&#34; title=&#34;Creating a new Android Application, step 3&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/AndroidNewPrj_04.jpg&#34; alt=&#34;Creating a new Android Application, step 4&#34; title=&#34;Creating a new Android Application, step 4&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once we&amp;rsquo;ve the app framework setup by Android Studio, we can simplify the interface down to a Status message and a button.&lt;br /&gt;
First step: remove &lt;code&gt;content_main.xml&lt;/code&gt; and &lt;code&gt;menu_main&lt;/code&gt; then replace the content of &lt;code&gt;activity_main.xml&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;match_parent&amp;quot;
    android:gravity=&amp;quot;center&amp;quot;
    android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;
                    
    &amp;lt;TextView
        android:id=&amp;quot;@+id/tvwHomeBtnStatus&amp;quot;
        android:layout_width=&amp;quot;wrap_content&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot; 
        android:padding=&amp;quot;24dp&amp;quot;
        android:text=&amp;quot;@string/home_btn_status_on&amp;quot;/&amp;gt;

    &amp;lt;Button
        android:id=&amp;quot;@+id/btnToggleStatus&amp;quot;
        android:layout_width=&amp;quot;wrap_content&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot; 
        android:text=&amp;quot;@string/toggle&amp;quot;/&amp;gt;
&amp;lt;/LinearLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This layout requires the following &lt;code&gt;string.xml&lt;/code&gt; inside the &lt;code&gt;res/values&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;resources&amp;gt;
    &amp;lt;string name=&amp;quot;app_name&amp;quot;&amp;gt;MC40HomeButton&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;home_btn_status_on&amp;quot;&amp;gt;Home Button Enabled&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;home_btn_status_off&amp;quot;&amp;gt;Home Button Disabled&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;toggle&amp;quot;&amp;gt;Toggle current device setting&amp;lt;/string&amp;gt;
&amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/Strings.jpg&#34; alt=&#34;Our Strings.xml at this point&#34; title=&#34;Our Strings.xml at this point&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can now remove a lot of the generated template code in &lt;code&gt;MainActivity.java&lt;/code&gt; trimming down the code to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.pietromaggi.sample.mc40homebutton;

import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }
}                                
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we run the application at this moment, it&amp;rsquo;s not doing a lot :-)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/Screenshot_tag1.png&#34; alt=&#34;MC40 Screenshot of the app as recorded at tag1&#34; title=&#34;MC40 Screenshot of the app as recorded at tag1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can find the app at this stage &lt;a href=&#34;https://github.com/pfmaggi/mc40_homebutton/tree/tag1&#34;&gt;on the github repository under the &lt;code&gt;tag1&lt;/code&gt; tag&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next step would be to check that we&amp;rsquo;re really running on a Zebra Technologies&amp;rsquo; MC40, and then adding some logic to the app.&lt;/p&gt;

&lt;h2 id=&#34;dealing-with-multiple-os-versions-and-re-branding&#34;&gt;Dealing with multiple OS versions and re-branding&lt;/h2&gt;

&lt;p&gt;First we check that we&amp;rsquo;re running on a Zebra&amp;rsquo;s MC40 using a couple of Android constant:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;android.os.Build.MANUFACTURER&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;android.os.Build.MODEL&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The catch is that MC40, running Jelly Bean, report &amp;laquo;Motorola Solution&amp;raquo; as &lt;code&gt;MANUFACTURER&lt;/code&gt;, we need to address this difference and, as reported in &lt;a href=&#34;https://developer.zebra.com/community/android/android-forums/android-blogs/blog/2014/12/19/disabling-home-button-via-intent-mc40&#34;&gt;Pavel&amp;rsquo;s notes&lt;/a&gt;, the broadcast intent action is different for Motorola Solution or Zebra&amp;rsquo;s MC40.&lt;/p&gt;

&lt;p&gt;Once we&amp;rsquo;ve seen if the device the app is running on is supported, we can send a first Intent, to disable the home button, and configure the toggle button, so that is really toggle the Home Button status from disable to enabled and vice versa.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.pietromaggi.sample.mc40homebutton;

import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

public class MainActivity extends AppCompatActivity {
  private static final String MANUFACTURER_ZEBRA = &amp;quot;Zebra Technologies&amp;quot;;
  private static final String MANUFACTURER_MSI = &amp;quot;Motorola Solutions&amp;quot;;
  private static final String MODEL_MC40 = &amp;quot;MC40N0&amp;quot;;
  private static final String INTENT_ZEBRA = &amp;quot;com.symbol.intent.action.HOMEKEY_MODE&amp;quot;;
  private static final String INTENT_MSI = &amp;quot;com.motorolasolutions.intent.action.HOMEKEY_MODE&amp;quot;;
  private static final String INTENT_EXTRA = &amp;quot;state&amp;quot;;
  private String mStrIntent;
  private TextView mTvwStatus;
  private int mStatus;

  @Override
  protected void onCreate(Bundle savedInstanceState) {
    String StrManufacturer = Build.MANUFACTURER;
    String strModel = Build.MODEL;
    boolean bSupported = true;

    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    mTvwStatus = (TextView) findViewById(R.id.tvwHomeBtnStatus);

    if (strModel.equalsIgnoreCase(MODEL_MC40)) {
      // We&#39;re running on an MC40
      if (StrManufacturer.equalsIgnoreCase(MANUFACTURER_ZEBRA)) {
        // This is a Zebra Device
        mStrIntent = INTENT_ZEBRA;
      } else if (StrManufacturer.equalsIgnoreCase(MANUFACTURER_MSI)) {
        // This is a Motorola Solution Device
        // just double OS version, only Jelly Bean is supported
        mStrIntent = INTENT_MSI;
        if (Build.VERSION_CODES.JELLY_BEAN != Build.VERSION.SDK_INT) {
          bSupported = false;
        }

      }
    } else {
      // This is something else, not supported
      bSupported = false;
    }

    Button btnToggle = (Button)findViewById(R.id.btnToggleStatus);
    if (bSupported) {
      mTvwStatus.setText(R.string.home_btn_status_off);
      mStatus = 0;
      Intent i = new Intent(mStrIntent);
      i.putExtra(INTENT_EXTRA, mStatus);
      sendBroadcast(i);

      btnToggle.setOnClickListener(new View.OnClickListener() {
          @Override
          public void onClick(View v) {
          //Toggle Current Status
          if (0 == mStatus) {
            mStatus = 1;
            mTvwStatus.setText(R.string.home_btn_status_on);
          } else {
            mStatus = 0;
            mTvwStatus.setText(R.string.home_btn_status_off);
          }
          Intent i = new Intent(mStrIntent);
          i.putExtra(INTENT_EXTRA, mStatus);
          sendBroadcast(i);
        }
      });
    } else {
      mTvwStatus.setText(R.string.device_not_supported);
      btnToggle.setEnabled(false);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we run the application on a supported device, we get the expected behavior:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/Screenshot_tag2.png&#34; alt=&#34;MC40 Screenshot of the app as recorded at tag2&#34; title=&#34;MC40 Screenshot of the app as recorded at tag2&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;managing-state&#34;&gt;Managing state&lt;/h2&gt;

&lt;p&gt;The application now works as expected, but with an issue linked to not managing the state. As an example, simply rotating the device, the Activity is destroyed to create a new one with the standard behavior to disable the Home Button, even if we just re-enabled it using the &lt;code&gt;toggle&lt;/code&gt; button.&lt;br /&gt;
An easy solution is to add some code to manage the Application status overriding the &lt;code&gt;onSaveInstanceState(Bundle)&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
public void onSaveInstanceState(Bundle savedInstanceState) {
  super.onSaveInstanceState(savedInstanceState);
  savedInstanceState.putInt(KEY_STATE, mState);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And update the &lt;a href=&#34;https://github.com/pfmaggi/mc40_homebutton/blob/tag3/app/src/main/java/com/pietromaggi/sample/mc40homebutton/MainActivity.java#L55&#34;&gt;&lt;code&gt;onCreate&lt;/code&gt; method to check the bundle to see if it&amp;rsquo;s defined and behave accordingly&lt;/a&gt;.&lt;br /&gt;
The final version of the application, managing the state, can be find on github associated to &lt;a href=&#34;https://github.com/pfmaggi/mc40_homebutton/tree/tag3&#34;&gt;tag3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let me know if you&amp;rsquo;ve found this article useful.&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;notes&#34;&gt;Notes&lt;/h5&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;If your app locks down a few other things or you&amp;rsquo;re using something like Zebra&amp;rsquo;s &lt;a href=&#34;https://www.zebra.com/us/en/products/software/mobile-computers/mobile-app-utilities/enterprise-home-screen.html&#34;&gt;Enterprise Home Screen&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Secondary External Storage in Android KitKat - Part 1</title>
      <link>http://pietromaggi.com/2016/01/14/secondary-external-storage-in-android-kitkat---part-1/</link>
      <pubDate>Thu, 14 Jan 2016 23:00:00 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2016/01/14/secondary-external-storage-in-android-kitkat---part-1/</guid>
      <description>

&lt;p&gt;First technical post for 2016. Finally!&lt;/p&gt;

&lt;p&gt;To kick-start 2016 I&amp;rsquo;ve chosen a topic that is more and more relevant in our market: The changes introduced by Google in Android v4.4 KitKat, regarding the secondary storage (the SDCard).&lt;br /&gt;
I&amp;rsquo;ve already talked about this in my AppForum 2015 talk last October in London&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:51c058b2f0ea7a68582777f63f59ded1:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:51c058b2f0ea7a68582777f63f59ded1:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, but I want to add some extra info and rationales here.&lt;/p&gt;

&lt;h2 id=&#34;a-bit-of-background:51c058b2f0ea7a68582777f63f59ded1&#34;&gt;A bit of background&lt;/h2&gt;

&lt;p&gt;Android&amp;rsquo;s purpose is to establish an open platform for developers to build innovative apps.
For this reason, Google put in place a compatibility program that defines technical details of the Android Platform;&lt;/p&gt;

&lt;p&gt;For every Android release, there&amp;rsquo;s a Compatibility Definition Document, the last available at this moment is for &lt;a href=&#34;http://static.googleusercontent.com/media/source.android.com/it//compatibility/6.0/android-6.0-cdd.pdf&#34;&gt;Android 6.0, aka Marshmallow&lt;/a&gt;, that defines some of the technical features and device needs to have to be a compatible Android device. And this compatibility is a requirement to be able to license GMS&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:51c058b2f0ea7a68582777f63f59ded1:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:51c058b2f0ea7a68582777f63f59ded1:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; for the device.&lt;/p&gt;

&lt;p&gt;To put it clearly:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You want GMS? You need to comply to the CDD&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here we&amp;rsquo;re talking about Android v4.4 KitKat, so here&amp;rsquo;s a link to &lt;a href=&#34;http://source.android.com/compatibility/4.4/android-4.4-cdd.pdf&#34;&gt;Android 4.4 CDD&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-s-the-catch:51c058b2f0ea7a68582777f63f59ded1&#34;&gt;What&amp;rsquo;s the catch?&lt;/h2&gt;

&lt;p&gt;From the CDD, Android devices are required to have a Secondary Storage available with a minimum 1GB size if you don&amp;rsquo;t have this internal in your device but you provide an SDCard slot, you need to ship the device with an SDCard, again, 1GB minimum size.&lt;br /&gt;
So usually, you end up that the SDCard is your &lt;em&gt;Secondary External Storage&lt;/em&gt;, and the &lt;em&gt;Primary External Storage&lt;/em&gt; is the 1GB partition (minimum) you included in the device.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Not a big deal&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To access an External Storage on Android v4.3 and previous versions, you have to specify a couple of permissions in your &lt;code&gt;AndroidManifest.xml&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These will gave you read&amp;amp;write access to all the External Storage available&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:51c058b2f0ea7a68582777f63f59ded1:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:51c058b2f0ea7a68582777f63f59ded1:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;br /&gt;
Given that there are ways to gently ask for the &lt;a href=&#34;http://pietromaggi.com/2014/10/19/finding-the-sdcard-path-on-android-devices/&#34;&gt;SDCard true path&lt;/a&gt; this was more or less working.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But Android is now a multiuser OS! and an SDCard with a FAT file system, is not very good protecting the data between the different users&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Android support SDCard with FAT file system, to provide a layer of security, it uses the &lt;a href=&#34;https://en.wikipedia.org/wiki/Filesystem_in_Userspace&#34;&gt;Linux FUSE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Android v4.4 Google decides to go a step further mandating that an app can write (with the right permissions that we just saw) only on the Primary External Storage. For all the other External Storage, an app can only write in its package folder. e.g. if you app package is com.pietromaggi.sample.externalstorage, It can only write in the folders &lt;code&gt;&amp;lt;sdcard root&amp;gt;/Android/data/com.pietromaggi.sample.externalstorage&lt;/code&gt;.&lt;br /&gt;
There&amp;rsquo;s no way, for a normal application, to write anywhere else on the SDCard.&lt;/p&gt;

&lt;h2 id=&#34;ok-but-there-s-an-happy-end-somewhere:51c058b2f0ea7a68582777f63f59ded1&#34;&gt;OK, but there&amp;rsquo;s an happy end somewhere?&lt;/h2&gt;

&lt;p&gt;Really, if you&amp;rsquo;re trying to get a way to revert Android behavior to what it was before API level 19, no, this is it.&lt;br /&gt;
Luckily Google has introduced new API in KitKat (and Lollipop and Marshmallow) that allows to mitigate the issue. Some user interventions may be needed but at least there are standard APIs available.&lt;/p&gt;

&lt;p&gt;In the second part of this blog I&amp;rsquo;ll present a sample app that uses some of these APIs.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:51c058b2f0ea7a68582777f63f59ded1:1&#34;&gt;Slides presented in London: &lt;script async class=&#39;speakerdeck-embed&#39; data-id=&#39;ef4248bf72454b2e9602db55bdf1e8ed&#39; data-ratio=&#39;1.33333333333333&#39; src=&#39;//speakerdeck.com/assets/embed.js&#39;&gt;&lt;/script&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:51c058b2f0ea7a68582777f63f59ded1:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:51c058b2f0ea7a68582777f63f59ded1:2&#34;&gt;GMS Stands for Google Mobile Services, and is the collection of services and application built by Google that are not part of AOSP (Android Open Source Project) like GMail, Google Maps, Google Play Store and the push notification service GCM (Google Cloud Messaging).
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:51c058b2f0ea7a68582777f63f59ded1:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:51c058b2f0ea7a68582777f63f59ded1:3&#34;&gt;The catch is that, before Android v4.4, API level 19, and the introduction of the &lt;code&gt;Environment.getExternalFilesDirs()&lt;/code&gt; there was no way to know how many External Storage you had available on a device. The only available API was &lt;code&gt;Environment.getExternalStorageDirectory()&lt;/code&gt; that returns the Primary External Storage.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:51c058b2f0ea7a68582777f63f59ded1:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Building Zebra&#39;s EMDK project using SDK Platform 23</title>
      <link>http://pietromaggi.com/2015/11/25/building-zebras-emdk-project-using-sdk-platform-23/</link>
      <pubDate>Wed, 25 Nov 2015 09:54:55 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2015/11/25/building-zebras-emdk-project-using-sdk-platform-23/</guid>
      <description>

&lt;h1 id=&#34;note-emdk-4-0-is-now-documenting-this-method-to-add-com-symbol-emdk-jar-as-a-dependency-http-techdocs-zebra-com-emdk-for-android-4-0-tutorial-tutcreateprojectandroidstudio-emdkasadependencyingradlebuild:a73dc43b5349510a6429445ab1819abf&#34;&gt;Note: &lt;a href=&#34;http://techdocs.zebra.com/emdk-for-android/4-0/tutorial/tutCreateProjectAndroidStudio/#emdkasadependencyingradlebuild&#34;&gt;EMDK 4.0 is now documenting this method to add com.symbol.emdk.jar as a dependency&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;There&amp;rsquo;s a recurring question coming to me and to Launchpad&amp;rsquo;s forums lately:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.zebra.com/message/86287#86287&#34;&gt;&lt;em&gt;How can I compile my Android app, using Zebra&amp;rsquo;s EMDK, if I need the latest support library?&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;some-background:a73dc43b5349510a6429445ab1819abf&#34;&gt;Some background&lt;/h1&gt;

&lt;p&gt;With the Android tools moving super-fast (Android studio v1.0 launched at the beginning of 2015, the latest stable release is v1.4.1, we already have v1.5RC and v2.0 has been announced&amp;hellip;) keeping up to this pace is not easy for our EMDK team!&lt;/p&gt;

&lt;p&gt;We discovered some integration issues when Android Studio v1.3 was released and &lt;a href=&#34;https://developer.zebra.com/community/android/android-forums/android-blogs/blog/2015/08/21/announcement-emdk-issue-with-android-studio-13-new-project-wizard&#34;&gt;we presented a workaround&lt;/a&gt; to use the EMDK as the building SDK. Limiting the project to API level 16 or 19. This should be good, right?&lt;/p&gt;

&lt;p&gt;A downside of this approach surfaced when Google updated the templates for new projects, now based on the Android Support Library. I really like the approach to base new projects on the support library; the problem is that it does require to build the project with API level 21+.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here we can have a problem&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;using-zebra-s-emdk:a73dc43b5349510a6429445ab1819abf&#34;&gt;Using Zebra&amp;rsquo;s EMDK&lt;/h1&gt;

&lt;p&gt;So, talking just about Android Studio, that is the current up-to-date Android IDE, we currently document two ways to use the EMDK:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://techdocs.zebra.com/emdk-for-android/4-0/tutorial/tutCreateProjectAndroidStudio/#setemdkapi19ascompilesdkinprojectstructure&#34;&gt;The official one&lt;/a&gt;, selecting the EMDK in the &amp;laquo;Compile SDK&amp;raquo; drop-down when creating the project&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.zebra.com/community/android/android-forums/android-blogs/blog/2015/08/21/announcement-emdk-issue-with-android-studio-13-new-project-wizard&#34;&gt;The Android Studio v1.3+ workaround way&lt;/a&gt; that suggest to manually set the EMDK as the &amp;laquo;Compile SDK&amp;raquo;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both methods fails to compile a project using the latest Android Support Library.&lt;/p&gt;

&lt;h1 id=&#34;a-little-gradle-magic:a73dc43b5349510a6429445ab1819abf&#34;&gt;A little gradle magic&lt;/h1&gt;

&lt;p&gt;Here&amp;rsquo;s a third, &lt;strong&gt;UNOFFICIAL&lt;/strong&gt;, way to include the EMDK in an Android project and use the latest available SDK to build the project.&lt;/p&gt;

&lt;h2 id=&#34;copy-the-lib-file-in-your-project:a73dc43b5349510a6429445ab1819abf&#34;&gt;Copy the lib file in your project&lt;/h2&gt;

&lt;p&gt;First of all, create in your Android project a lib folder and copy into it the com.symbol.emdk.jar library that you got installing the EMDK on your PC/Mac:&lt;/p&gt;

&lt;p&gt;This is probably easier to say than to do, because the default Android Studio project view doesn&amp;rsquo;t show these files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/EMDK_gradle/Android_Project1.jpg&#34; alt=&#34;Default Android Project Panel&#34; title=&#34;Default Android Project Panel&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The easiest way, at least for me, is to copy the file from the setup position to a newly created &lt;code&gt;libs&lt;/code&gt; folder in my project from Windows&amp;rsquo; File Explorer or OSX&amp;rsquo;s Finder and then check that everything is OK switching the Android Studio project view from &amp;laquo;Android&amp;raquo; to &amp;laquo;Project Files&amp;raquo;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/EMDK_gradle/Android_Project2.jpg&#34; alt=&#34;Project Files Panel View&#34; title=&#34;Project Files Panel View&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;modify-the-build-gradle-file:a73dc43b5349510a6429445ab1819abf&#34;&gt;Modify the build.gradle file&lt;/h2&gt;

&lt;p&gt;OK, once the file is included in our project (and this means that you can check in this file in your SCM and checkout on a new PC and rebuilt it without the need to Zebra EMDK installed) we can explain to Android Studio how to use it. To do this we need to modify the &lt;code&gt;build.gradle&lt;/code&gt; file included in the app folder. If you&amp;rsquo;ve switched back to the &amp;laquo;Android Project view&amp;raquo;, this is the Module: App, gradle file. As shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/EMDK_gradle/gradle_file.jpg&#34; alt=&#34;Gradle file to Edit&#34; title=&#34;Gradle file to Edit&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In this file you need to setup the dependencies so that the build process uses this lib as a reference without including it into the final APK (otherwise the application will exit with and exception when launched).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   dependencies {
       compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;], exclude: [&#39;com.symbol.emdk.jar&#39;])
       compile &#39;com.android.support:appcompat-v7:23.0.1&#39;
       provided fileTree(dir: &#39;libs&#39;, include: [&#39;com.symbol.emdk.jar&#39;])
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this changes you can build your project using the latest available SDK, just remember that you&amp;rsquo;re targeting Zebra devices with API level 16 or 19, so, setup your minimum SDK accordingly.&lt;/p&gt;

&lt;p&gt;You can find a demo app built with this technique &lt;a href=&#34;https://github.com/pfmaggi/GetDeviceInfo_EMDK&#34;&gt;on my github account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy coding&lt;br /&gt;
~Pietro&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Back Button and Enterprise Browser</title>
      <link>http://pietromaggi.com/2015/09/25/android-back-button-and-enterprise-browser/</link>
      <pubDate>Fri, 25 Sep 2015 11:33:11 +0200</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2015/09/25/android-back-button-and-enterprise-browser/</guid>
      <description>

&lt;h2 id=&#34;edit:7f473ce4cff36ed9ec3742536e6fab0f&#34;&gt;Edit&lt;/h2&gt;

&lt;p&gt;Enteprise Browser v1.3 introduced a change that requires to enable &lt;code&gt;FunctionKeysCapturable&lt;/code&gt; to be able to use the KeyCapture API.&lt;br /&gt;
To do this you need to update your &lt;code&gt;Config.xml&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;FunctionKeysCapturable                 value=&amp;quot;1&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;enterprise-browser:7f473ce4cff36ed9ec3742536e6fab0f&#34;&gt;Enterprise Browser&lt;/h2&gt;

&lt;p&gt;Enterprise Browser is Zebra Technologies&amp;rsquo; Industrial Browser built for our Rugged Devices, we support most of our Windows Mobile/Windows CE devices and Android devices.&lt;/p&gt;

&lt;p&gt;This product is usually used with existing web application that cannot be updated/modified moving from one device to another.
This help us winning some opportunities but sometimes present some unique challenges like, as an example, disabling the Android back button default behavior.&lt;/p&gt;

&lt;h2 id=&#34;back-button-on-android:7f473ce4cff36ed9ec3742536e6fab0f&#34;&gt;Back Button on Android?&lt;/h2&gt;

&lt;p&gt;Given that this is a cross-platform product (built on top of our RhoMobile Suite) we don&amp;rsquo;t have a custom settings to disable the back button in the Config.xml configuration file, however it is still possible to add a default Metatags in the configuration so that no changes in the existing pages are needed.&lt;/p&gt;

&lt;p&gt;So, do we&amp;rsquo;ve an API to intercept the Back Button?&lt;/p&gt;

&lt;p&gt;Of course! the &lt;a href=&#34;https://developer.motorolasolutions.com/docs/DOC-2520&#34;&gt;KeyCapture API&lt;/a&gt; can be used to intercept and disable it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;EB.KeyCapture.captureKey(BOOLEAN dispatch, STRING keyValue)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setting the &lt;code&gt;dispatch&lt;/code&gt; value to &lt;code&gt;false&lt;/code&gt;,  We just need to get the correct KeyCode.&lt;/p&gt;

&lt;p&gt;This can a bit tricky and can be different from device to device, the best solution I&amp;rsquo;ve is to ask directly to the device with a simple HTML page that display the keycode off all the keys that are pressed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;META HTTP-Equiv=&amp;quot;KeyCapture&amp;quot; Content=&amp;quot;KeyValue:All; Dispatch:False; KeyEvent:url(&#39;JavaScript:alert(&#39;Key Pressed: %s&#39;);&#39;)&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
	&amp;lt;title&amp;gt;Display KeyCode&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;H1&amp;gt;Press a key to see it&#39;s KeyCode&amp;lt;/H1&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we&amp;rsquo;ve the correct KeyCode, we just need to call this API in every page that is loaded in the browser&amp;hellip; Sometimes that is not easy to do sometimes, especially when the application cannot be modified.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve a solution for this issue: having a &lt;code&gt;DefaultMetaTags&lt;/code&gt; in Enterprise Browser&amp;rsquo;s configuration.&lt;/p&gt;

&lt;h2 id=&#34;what-s-a-defaultmetatags:7f473ce4cff36ed9ec3742536e6fab0f&#34;&gt;What&amp;rsquo;s a DefaultMetaTags&lt;/h2&gt;

&lt;p&gt;We can start from the &lt;a href=&#34;https://developer.motorolasolutions.com/docs/DOC-2571#defaultmetatags&#34;&gt;documentation&lt;/a&gt;, what does it means?&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;DefaultMetaTags&lt;/code&gt; is a way to call an Enterprise Browser API on top of every HTML page that is loaded in the browser. This can be used, as an example to enable on screen UI elements like the battery or WiFi icon.&lt;/p&gt;

&lt;p&gt;So, putting the different things together, we can put this in the &amp;ldquo;Config.xml&amp;rsquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;DefaultMetaTags&amp;gt;
    &amp;lt;MetaTag value=&amp;quot;KeyCapture~KeyValue:0xA6;Dispatch:False&amp;quot;/&amp;gt;
 &amp;lt;/DefaultMetaTags&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BTW: &lt;code&gt;0xA6&lt;/code&gt; is the correct value for the Back Button on a TC55 running Android v4.4 KitKat.&lt;/p&gt;

&lt;h2 id=&#34;closing-comments:7f473ce4cff36ed9ec3742536e6fab0f&#34;&gt;Closing comments&lt;/h2&gt;

&lt;p&gt;Enterprise Browser&amp;rsquo;s &lt;code&gt;DefaultMetaTags&lt;/code&gt; is a very flexible way to &amp;laquo;patch&amp;raquo; an existing Web application without touching its source code.&lt;/p&gt;

&lt;p&gt;As a closing comment here&amp;rsquo;s a sample configuration that zoom the current web page pressing a button:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;MetaTag VALUE=&amp;quot;KeyCapture~KeyValue:0x79;Dispatch:False;KeyEvent:url(&#39;JavaScript:eval(&#39;zoom.page=\&#39;1.3\&#39;;&#39;);&#39;)&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;If you&amp;rsquo;re interested in Enterprise Browser, you can visit us at &lt;a href=&#34;http://bit.ly/EMEAAppForum2015&#34;&gt;EMEA AppForum in London, Oct. 12th-14th&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finding the SDCard Path on Android devices</title>
      <link>http://pietromaggi.com/2014/10/19/finding-the-sdcard-path-on-android-devices/</link>
      <pubDate>Sun, 19 Oct 2014 20:55:18 +0200</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2014/10/19/finding-the-sdcard-path-on-android-devices/</guid>
      <description>

&lt;p&gt;With Motorola Solutions we&amp;rsquo;re busy finishing the first round of Android Developer&amp;rsquo;s Kitchens around Europe. Just in time to prepare for the &lt;a href=&#34;http://www.motorolasolutionsevents.com/enterprise_appforum_2014/&#34;&gt;Enterprise App Forum in Brussels!&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The nice things of these events is the interaction with our partners and theirs real live problem!&lt;/p&gt;

&lt;p&gt;Last week I got an interesting question regarding our TC55:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can I programmatically get the path for the SDCard on the TC55?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s a good question; usually you don&amp;rsquo;t want to insert in your code the dependency to an hard coded path!
The usual answer is based around the function &lt;code&gt;Environment.getExternalStorageDirectory();&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The problem is that this function report a different folder if the SDCard is inserted in the device or not.
This is not a problem unique to the TC55, it&amp;rsquo;s a common problem on Android and there are different ways to handle it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://futurewithdreams.blogspot.it/2014/01/get-external-sdcard-location-in-android.html&#34;&gt;Reading the partition table from &lt;code&gt;/proc/mounts&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/a/23949650/118862&#34;&gt;Use some environment variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/22219312/android-open-external-storage-directorysdcard-for-storing-file&#34;&gt;Still use the getExternalStorageDirectory() function, together with the isExternalStorageRemovable() and getExternalStorageState() functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given that we&amp;rsquo;ve the luxury to target just a few devices, the Motorola Solutions one :-), the best option is to use the environment variables.&lt;/p&gt;

&lt;h3 id=&#34;let-s-see-what-happens-on-the-tc55&#34;&gt;Let&amp;rsquo;s see what happens on the TC55&lt;/h3&gt;

&lt;p&gt;On this device, using &lt;code&gt;Environment.getExternalStorageDirectory();&lt;/code&gt; returns different results depending if you&amp;rsquo;ve installed or not an SDCard:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Without SDCard —&amp;gt; /&lt;code&gt;STORAGE/SDCARD1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;With SDCard —&amp;gt; &lt;code&gt;/STORAGE/SDCARD0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s see what we can achieve with the environment variables!&lt;/p&gt;

&lt;p&gt;We can log into a TC55 and use the &lt;code&gt;printenv&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;adb shell
printenv

_=/system/bin/printenv
LD_LIBRARY_PATH=/vendor/lib:/system/lib
HOSTNAME=android
BOOTCLASSPATH=/system/framework/core.jar:/system/framework/core-junit.jar:/system/framework/bouncycastle.jar:/system/framework/ext.jar:/system/framework/framework.jar:/system/framework/framework_ext.jar:/system/framework/android.policy.jar:/system/framework/services.jar:/system/framework/apache-xml.jar
PATH=/sbin:/vendor/bin:/system/sbin:/system/bin:/system/xbin
LOOP_MOUNTPOINT=/mnt/obb
ANDROID_DATA=/data
ANDROID_ROOT=/system
SHELL=/system/bin/sh
MKSH=/system/bin/sh
USER=shell
EXTERNAL_SDCARD_STORAGE=/storage/sdcard0
ANDROID_PROPERTY_WORKSPACE=8,49152
EXTERNAL_STORAGE=/storage/sdcard1
ANDROID_ASSETS=/system/app
TERM=vt100
RANDOM=16913
ASEC_MOUNTPOINT=/mnt/asec
SECURE_STORAGE_SDCARD=/storage/sdcard0
HOME=/data
ANDROID_BOOTLOGO=1
MASS_STORAGE=/mnt/udisk
PS1=$(precmd)$USER@$HOSTNAME:${PWD:-?} $
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From this is easy to see that the way to get the SDCard path is to use a couple of environment variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;System.getenv(&amp;laquo;EXTERNAL_STORAGE&amp;raquo;)&lt;/code&gt; —&amp;gt; Internal SDCard &lt;code&gt;/STORAGE/SDCARD1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;System.getenv(&amp;laquo;EXTERNAL_SDCARD_STORAGE&amp;raquo;)&lt;/code&gt; —&amp;gt; True SDCard &lt;code&gt;/STORAGE/SDCARD0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This solutions is still depending on two specific environment variables, is much better than hardcoding the path strings in the application but is probably only acceptable if you&amp;rsquo;re targeting just few devices.
Another point is that, on other devices, you get the true SDCard path linked to the &lt;code&gt;SECONDARY_STORAGE&lt;/code&gt; environment variable. So a better solution could be to check for both variables with something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String strSDCardPath = System.getenv(&amp;quot;SECONDARY_STORAGE&amp;quot;);
if ((null == strSDCardPath) || (strSDCardPath.length() == 0)) {
    strSDCardPath = System.getenv(&amp;quot;EXTERNAL_SDCARD_STORAGE&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we will start to release KitKat based devices it will be even more important taking a look at the right path for these volumes :-)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;EDIT:&lt;/em&gt; I&amp;rsquo;ve a new &lt;a href=&#34;http://pietromaggi.com/2016/01/14/secondary-external-storage-in-android-kitkat---part-1/&#34;&gt;blog post&lt;/a&gt; with additional information for Zebra Technologies KitKat devices.&lt;/p&gt;

&lt;p&gt;You can find in my github account a &lt;a href=&#34;https://github.com/pfmaggi/GetDeviceInfo&#34;&gt;sample application&lt;/a&gt; that retrieves these data.&lt;/p&gt;

&lt;p&gt;Let me know if you find this information useful via &lt;a href=&#34;http://twitter.com/pfmaggi&#34;&gt;twitter @pfmaggi&lt;/a&gt; or &lt;a href=&#34;mailto:pfm@pietromaggi.com&#34;&gt;email&lt;/a&gt; or &lt;a href=&#34;http://www.motorolasolutionsevents.com/enterprise_appforum_2014/&#34;&gt;joining me and the EMEA Software Enablement Team in Brussels for the Enterprise AppForum, our annual developer events&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting device info from MSI Android devices</title>
      <link>http://pietromaggi.com/2014/09/02/getting-device-info-from-msi-android-devices/</link>
      <pubDate>Tue, 02 Sep 2014 11:56:38 +0200</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2014/09/02/getting-device-info-from-msi-android-devices/</guid>
      <description>

&lt;h1 id=&#34;the-good-old-ways:fc4a5c33de3ac7ed61c6a8c68c9cf289&#34;&gt;The good old ways!&lt;/h1&gt;

&lt;p&gt;On Symbol/MSI Windows Mobile devices, we where providing some APIs in the EMDK to get additional information.
Looking into the Resource Coordinator is possible to find APIs like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RCM_GetESN() - retrieves the device electronic serial number&lt;/li&gt;
&lt;li&gt;RCM_GetUniqueUnitId() - retrieves the unique unit identification number&lt;/li&gt;
&lt;li&gt;RCM_GetVersion() - retrieves version information&lt;/li&gt;
&lt;li&gt;etc&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;hellip;and we don&amp;rsquo;t have anything like this in the Android EMDK. WHY?&lt;/p&gt;

&lt;p&gt;Simply because the functionality is already included in the standard Android SDK.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how to get this is data on an MSI device with the Android OS.&lt;/p&gt;

&lt;h1 id=&#34;the-fabulous-new-way:fc4a5c33de3ac7ed61c6a8c68c9cf289&#34;&gt;The fabulous new way!&lt;/h1&gt;

&lt;p&gt;You can find the completed project in &lt;a href=&#34;https://github.com/pfmaggi/GetDeviceInfo&#34;&gt;this repository&lt;/a&gt; on my github account, I&amp;rsquo;m using Windows 7 and Eclipse+ADT, but you can follow these steps with Android Studio quite nicely.&lt;/p&gt;

&lt;h1 id=&#34;create-a-new-project:fc4a5c33de3ac7ed61c6a8c68c9cf289&#34;&gt;Create a new Project&lt;/h1&gt;

&lt;p&gt;Create a new Android project, nothing fancy here, it&amp;rsquo;s just a standard app with a single Blank Activity.
You can follow these images as a guideline. Your interface may vary as Google updates the Android wizard quite often.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/create_project_01.jpg&#34; alt=&#34;Create Project - step 1&#34; title=&#34;Android New Project Wizard - page 1&#34; /&gt;
 &lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/create_project_02.jpg&#34; alt=&#34;Create Project - step 2&#34; title=&#34;Android New Project Wizard - page 2&#34; /&gt;
 &lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/create_project_03.jpg&#34; alt=&#34;Create Project - step 3&#34; title=&#34;Android New Project Wizard - page 3&#34; /&gt;
 &lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/create_project_04.jpg&#34; alt=&#34;Create Project - step 4&#34; title=&#34;Android New Project Wizard - page 4&#34; /&gt;
 &lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/create_project_05.jpg&#34; alt=&#34;Create Project - step 5&#34; title=&#34;Android New Project Wizard - page 5&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then we can do some housekeeping deleting the unnecessary main.xml menu resource:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/delete_menu.jpg&#34; alt=&#34;Delete Menu resource&#34; title=&#34;Delete unnecessary menu resource&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can then start the two main changes:
  - Setting up the Activity Layout
  - Updating the Activity onCreate method to retrieve the device data&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/activity_layout.jpg&#34; alt=&#34;Main Activity Layout&#34; title=&#34;Main Activity Layout&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;

&amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
              android:layout_width=&amp;quot;match_parent&amp;quot;
              android:layout_height=&amp;quot;match_parent&amp;quot;
              android:orientation=&amp;quot;vertical&amp;quot;
    &amp;gt;
    &amp;lt;TextView
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;@string/device_name&amp;quot;
        /&amp;gt;
    &amp;lt;TextView
        android:id=&amp;quot;@+id/device_type&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:layout_marginLeft=&amp;quot;16dp&amp;quot;
        android:layout_marginRight=&amp;quot;16dp&amp;quot;
        android:textSize=&amp;quot;18sp&amp;quot;
        style=&amp;quot;?android:listSeparatorTextViewStyle&amp;quot;
        /&amp;gt;
    &amp;lt;TextView
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;@string/electronic_serial_number&amp;quot;
        /&amp;gt;
    &amp;lt;TextView
        android:id=&amp;quot;@+id/device_esn&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:layout_marginLeft=&amp;quot;16dp&amp;quot;
        android:layout_marginRight=&amp;quot;16dp&amp;quot;
        android:textSize=&amp;quot;18sp&amp;quot;
        style=&amp;quot;?android:listSeparatorTextViewStyle&amp;quot;
        /&amp;gt;
    &amp;lt;TextView
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;@string/build_number&amp;quot;
        /&amp;gt;
    &amp;lt;TextView
        android:id=&amp;quot;@+id/build_number&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:layout_marginLeft=&amp;quot;16dp&amp;quot;
        android:layout_marginRight=&amp;quot;16dp&amp;quot;
        android:textSize=&amp;quot;18sp&amp;quot;
        style=&amp;quot;?android:listSeparatorTextViewStyle&amp;quot;
        /&amp;gt;
&amp;lt;/LinearLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This together with the string.xml containing the referenced string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;resources&amp;gt;

    &amp;lt;string name=&amp;quot;app_name&amp;quot;&amp;gt;Get Device Info&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;electronic_serial_number&amp;quot;&amp;gt;Device ESN:&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;build_number&amp;quot;&amp;gt;Build Number:&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;device_name&amp;quot;&amp;gt;Device:&amp;lt;/string&amp;gt;

&amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the simple Activity java code to collect the information is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.pietromaggi.sample.getdeviceinfo;

import android.os.Build;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.widget.TextView;


public class MainActivity extends ActionBarActivity {
    TextView DeviceNameTextView;
    TextView ESNTextView;
    TextView BuildNumberTextView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        DeviceNameTextView = (TextView)findViewById(R.id.device_type);
        DeviceNameTextView.setText(Build.DEVICE);

        ESNTextView = (TextView)findViewById(R.id.device_esn);
        ESNTextView.setText(Build.SERIAL);

        BuildNumberTextView = (TextView)findViewById(R.id.build_number);
        BuildNumberTextView.setText(Build.ID);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;where-s-the-tricks:fc4a5c33de3ac7ed61c6a8c68c9cf289&#34;&gt;Where&amp;rsquo;s the tricks?&lt;/h1&gt;

&lt;p&gt;There&amp;rsquo;s really no trick, Android SDK provide this information, and more using these constants:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.android.com/reference/android/os/Build.html#DEVICE&#34;&gt;Build.DEVICE = The name of the industrial design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.android.com/reference/android/os/Build.html#SERIAL&#34;&gt;Build.SERIAL = A hardware serial number, if available&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.android.com/reference/android/os/Build.html#ID&#34;&gt;Build.ID = changelist number&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Obviously, it&amp;rsquo;s the OEM building the device that put together the plumbing to link the correct information. Your mileage may vary on different devices.&lt;/p&gt;

&lt;p&gt;Running this application on an ET1 with Jelly Bean you get:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/screen_ET1.png&#34; alt=&#34;ET1 Screenshot&#34; title=&#34;ET1 Screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Running this application on an MC40 with Jelly Bean you get:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/screen_MC40.png&#34; alt=&#34;MC40 Screenshot&#34; title=&#34;MC40 Screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;While the TC55 is always a bit different :-)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/screen_TC55JB.png&#34; alt=&#34;TC55 Screenshot&#34; title=&#34;TC55 Screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Hope you may find this useful. Send me an email if you&amp;rsquo;d like to see any particular topic on this blog.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Diving into Android source code</title>
      <link>http://pietromaggi.com/2014/01/02/diving-into-android-source-code/</link>
      <pubDate>Thu, 02 Jan 2014 14:34:27 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2014/01/02/diving-into-android-source-code/</guid>
      <description>

&lt;h2 id=&#34;why-dive-into-android-code:29c65bc279e3a113bf9cc4bb66b79657&#34;&gt;Why dive into Android code?&lt;/h2&gt;

&lt;p&gt;When you&amp;rsquo;ve to write applications for Android, you&amp;rsquo;re targeting a giant moving API surface, sometimes you can be surprised of some different behavior in different Android versions or with an API call that is not well documented, so having the option to delve into Android Source Code is a great opportunity.&lt;/p&gt;

&lt;p&gt;A lot of things can be written on how to do this, there&amp;rsquo;s some documentation available on &lt;a href=&#34;http://source.android.com/source/index.html&#34;&gt;AOSP website&lt;/a&gt;, however I think that the best starting point is a video tutorial by NewCircle&amp;rsquo;s Instructor Dave Smith on this very topic:&lt;/p&gt;

&lt;h4 id=&#34;diving-into-android-source-code:29c65bc279e3a113bf9cc4bb66b79657&#34;&gt;Diving into Android Source Code&lt;/h4&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/NsqFOSzoYE8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;p&gt;So, take your time to setup your own copy of the Android source code and, next time you&amp;rsquo;re asking yourself &amp;laquo;What&amp;rsquo;s going on when you call an API, you can check the source code!&amp;raquo;&lt;/p&gt;

&lt;h2 id=&#34;on-a-similar-topic-dalvik-vm:29c65bc279e3a113bf9cc4bb66b79657&#34;&gt;On a similar topic: Dalvik VM&lt;/h2&gt;

&lt;p&gt;Dan Bernstein has presented at Google I/O 2008 a talk about the internals of Dalvik VM:&lt;/p&gt;

&lt;h4 id=&#34;dalvik-virtual-machine-internals:29c65bc279e3a113bf9cc4bb66b79657&#34;&gt;Dalvik Virtual Machine Internals&lt;/h4&gt;

&lt;p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/ptjedOZEXPM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re interested in this piece of the Android Source Code, this is the best starting point, even if nowadays ART has taken the place of Dalvik. A lot of Dalvik design is still in use nowadays!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>