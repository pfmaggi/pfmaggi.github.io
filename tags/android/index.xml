<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Pietro F. Maggi</title>
    <link>http://pietromaggi.com/tags/android/</link>
    <description>Recent content in Android on Pietro F. Maggi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>pfm@pietromaggi.com (Pietro F. Maggi)</managingEditor>
    <webMaster>pfm@pietromaggi.com (Pietro F. Maggi)</webMaster>
    <copyright>(c) 2013-2016 Pietro F. Maggi</copyright>
    <lastBuildDate>Wed, 13 Apr 2016 09:00:00 +0100</lastBuildDate>
    <atom:link href="http://pietromaggi.com/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Story of Three Barcodes</title>
      <link>http://pietromaggi.com/2016/04/13/the-story-of-three-barcodes/</link>
      <pubDate>Wed, 13 Apr 2016 09:00:00 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2016/04/13/the-story-of-three-barcodes/</guid>
      <description>

&lt;h2 id=&#34;intro:b992efff59f828918c2030b8fd3cff3d&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;Simple questions can bring to complex investigation.&lt;br /&gt;
Last month my colleague Alberto asked me:&lt;br /&gt;
&lt;em&gt;&amp;laquo;Can I use SimulScan to read labels with three barcodes?&amp;raquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;laquo;Of course&amp;raquo;&lt;/em&gt;, was my default answer. &lt;em&gt;&amp;laquo;That&amp;rsquo;s what SimulScan is for!&amp;raquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Fire up a TC75, launch the SimulScan demo and go to select the custom template for three barcodes and&amp;hellip; wait.&lt;br /&gt;
Where&amp;rsquo;s the template for three barcodes?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/simulscan/available_custom.png&#34; alt=&#34;SimulScan available custom template&#34; title=&#34;SimulScan available custom template&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ok, seems that we actually need to do some work&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;first-option-define-a-template:b992efff59f828918c2030b8fd3cff3d&#34;&gt;First option: define a template&lt;/h2&gt;

&lt;p&gt;Some background:&lt;br /&gt;
SimulScan came with an online template builder that allows to upload the image of the label you want to acquire, and build a template defining active areas for barcodes, images and text fields.
Very powerful, but of little use if you want to be able to read all the labels with three barcodes&amp;hellip; whatever decoder you need to use for the barcodes.&lt;/p&gt;

&lt;p&gt;Alberto built a template for one of the label his customer needed to read, and it was working well there, but it was not reading the other labels&amp;hellip; building a different template for every single label was not an option&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;another-option-can-we-build-a-new-custom-template-for-three-barcodes:b992efff59f828918c2030b8fd3cff3d&#34;&gt;Another option: can we build a new custom template for three barcodes?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&amp;laquo;Sure, how hard can it be?&amp;raquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It ends up that is was a bit harder than expected, but way more interesting!&lt;/p&gt;

&lt;h2 id=&#34;the-journey:b992efff59f828918c2030b8fd3cff3d&#34;&gt;The journey&lt;/h2&gt;

&lt;h3 id=&#34;step-1-get-the-templates:b992efff59f828918c2030b8fd3cff3d&#34;&gt;Step 1 - Get the templates.&lt;/h3&gt;

&lt;p&gt;Where are the custom templates?
In the &lt;code&gt;/enterprise/device/settings/datawedge/templates/&lt;/code&gt; folder of one of the supported devices.&lt;br /&gt;
A much more complicated (but more fun) to get these files (or if you don&amp;rsquo;t have a device handy) is to retrieve the templates from the SimulScan demo application or, more exactly, in the &lt;code&gt;SimulScanRes.apk&lt;/code&gt; that you can find in the &lt;code&gt;\system&lt;/code&gt; folder of our Android devices that includes SimulScan (TC55 KK, TC75, TC70 and TC8000).&lt;br /&gt;
You can retrieve it with &lt;code&gt;adb&lt;/code&gt; or directly from the recovery images available on &lt;a href=&#34;https://portal.motorolasolutions.com/Support/US-EN/Resolution?solutionId=100517&amp;amp;productDetailGUID=a6f635630acbd410VgnVCM20000013c7b00aRCRD&amp;amp;detailChannelGUID=2202caf8fb16e310VgnVCM1000000389bd0aRCRD&#34;&gt;Zebra&amp;rsquo;s support website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once we&amp;rsquo;ve the apk, we can use a tool like &lt;a href=&#34;http://ibotpeaches.github.io/Apktool/&#34;&gt;&lt;code&gt;apktool&lt;/code&gt;&lt;/a&gt; to decompress it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apktool d SimulScanRes.apk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will unpack the content of the apk, decompiling the xml resources and making available the SMALI source of the application. For this particular application, simply unzipping the apk is enough as the templates are in the &lt;code&gt;assets&lt;/code&gt; folder.&lt;br /&gt;
Files in the asset folder are included in the apk unmodified.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/simulscan/asset_templates.png&#34; alt=&#34;SimulScan templates in the asset folder&#34; title=&#34;SimulScan templates in the asset folder&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at the content of one of these files, as an example &lt;code&gt;Default - Barcode 1&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/simulscan/template_xml.png&#34; alt=&#34;SimulScan templates xml&#34; title=&#34;SimulScan templates xml&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ok, not exactly what I was expecting in an XML file&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;step-2-understand-how-the-templates-are-built:b992efff59f828918c2030b8fd3cff3d&#34;&gt;Step 2 - Understand how the templates are built&lt;/h3&gt;

&lt;p&gt;Nevertheless, the file looks familiar, and the &lt;code&gt;PD94&lt;/code&gt; start of the file rings a bell&amp;hellip; could it be a BASE64 encoded file?&lt;br /&gt;
Let&amp;rsquo;s try with &lt;a href=&#34;https://www.base64decode.org/&#34;&gt;an online BASE64 encoder/decoder&lt;/a&gt;, and what we get is much better:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;ssmain version=&amp;quot;2.0&amp;quot; name=&amp;quot;Barcode 1&amp;quot;&amp;gt;
&amp;lt;sstemplate number=&amp;quot;1&amp;quot; name=&amp;quot;Barcode 1&amp;quot; width=&amp;quot;0&amp;quot; height=&amp;quot;0&amp;quot; ttype=&amp;quot;default-barcode&amp;quot;&amp;gt;
    &amp;lt;region number=&amp;quot;1&amp;quot; name=&amp;quot;Barcode&amp;quot; x=&amp;quot;0&amp;quot; y=&amp;quot;0&amp;quot; width=&amp;quot;0&amp;quot; height=&amp;quot;0&amp;quot; rtype=&amp;quot;0x02&amp;quot;&amp;gt;
    &amp;lt;procmode ptype=&amp;quot;barcode&amp;quot; barcodeType=&amp;quot;any&amp;quot; /&amp;gt;
    &amp;lt;/region&amp;gt;
    &amp;lt;!--******** Common parameters for this template *********--&amp;gt;
    &amp;lt;dparam id=&amp;quot;ui_result_confirmation&amp;quot; type=&amp;quot;boolean&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;
    &amp;lt;dparam id=&amp;quot;auto_capture_sensitivity&amp;quot; type=&amp;quot;integer&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;
    &amp;lt;!--Flexiscript corresponding to this template--&amp;gt;
    &amp;lt;templatefs&amp;gt;7A3377526522702B7733707C616D2B73216E876D216F226E7056772170637000&amp;lt;/templatefs&amp;gt;
    &amp;lt;!--
Corresponding Flexiscript output :
Decode
i = N-1;
a = i;

EndOfFrame
If (a &amp;gt;= 0)
    OutputEx(0,1);
    R = 0;
EndIf;
--&amp;gt;
&amp;lt;/sstemplate&amp;gt;
&amp;lt;!--Flexiscript corresponding to this form--&amp;gt;
&amp;lt;mainfs&amp;gt;7A3377526522702B7733707C616D2B73216E886D65226F226E7062886D65226F65226E70637000&amp;lt;/mainfs&amp;gt;
&amp;lt;!--
Corresponding Flexiscript output :
Decode
i = N-1;
a = i;

EndOfFrame
If (a &amp;gt;= 0)
    Message(-1,1);
Else
    Message(-1,-1);
EndIf;
--&amp;gt;
&amp;lt;/ssmain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, we still get some fancy HEX string and a reference to Flexiscript.&lt;br /&gt;
I cannot be sure about this, but a reference to Flexiscript can be found in &lt;a href=&#34;http://scholar.harvard.edu/files/mzhang/files/resume_minzhang.pdf?m=1431284569&#34;&gt;Min Zhang CV&lt;/a&gt;, she&amp;rsquo;s currently a PhD at Harvard that worked as an intern in Motorola Solution in 2011-2012. On his CV we can find:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FlexiScript Project:&lt;/strong&gt; &lt;em&gt;Establish the whole GUI system of FlexiScript, a language for barcode decoding. Such as text coloring, breakpoints, frame design, Meta data, Most-Recently Used files List, barcode image generating, etc. (C# &amp;amp; C, Windows)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, at least seems that it&amp;rsquo;s not something that we will find much more information on internet&amp;hellip;&lt;/p&gt;

&lt;p&gt;Back to the HEX string.&lt;br /&gt;
They looks like ASCII code to me. Let&amp;rsquo;s try with an &lt;a href=&#34;http://www.rapidtables.com/convert/number/hex-to-ascii.htm&#34;&gt;HEX to ASCII converter&lt;/a&gt;.&lt;br /&gt;
The first HEX string: &lt;code&gt;7A3377526522702B7733707C616D2B73216E876D216F226E7056772170637000&lt;/code&gt;&lt;br /&gt;
becomes: &lt;code&gt;z3wRe&amp;quot;p+w3p|am+s!nm!o&amp;quot;npVw!pcp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And the second one, from: &lt;code&gt;7A3377526522702B7733707C616D2B73216E886D65226F226E7062886D65226F65226E70637000&lt;/code&gt;&lt;br /&gt;
becomes: &lt;code&gt;z3wRe&amp;quot;p+w3p|am+s!nme&amp;quot;o&amp;quot;npbme&amp;quot;oe&amp;quot;npcp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ok, seems that we&amp;rsquo;ve all the pieces now.&lt;/p&gt;

&lt;p&gt;We just need to bring them back together in the right order!&lt;/p&gt;

&lt;h3 id=&#34;step-3-test-your-assumptions:b992efff59f828918c2030b8fd3cff3d&#34;&gt;Step 3 - Test your assumptions!&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s start with a different template and see if we can change bits of it to slowly reach our goal of a 3 Barcodes custom template, our Holy Grail!&lt;/p&gt;

&lt;p&gt;The original decode template looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;ssmain version=&amp;quot;2.0&amp;quot; name=&amp;quot;Barcode 4&amp;quot;&amp;gt;
    &amp;lt;sstemplate name=&amp;quot;Barcode 4&amp;quot; width=&amp;quot;0&amp;quot; height=&amp;quot;0&amp;quot; number=&amp;quot;1&amp;quot; ttype=&amp;quot;barcode&amp;quot;&amp;gt;
        &amp;lt;region number=&amp;quot;1&amp;quot; name=&amp;quot;Barcode1&amp;quot; x=&amp;quot;0&amp;quot; y=&amp;quot;0&amp;quot; width=&amp;quot;0&amp;quot; height=&amp;quot;0&amp;quot; rtype=&amp;quot;0x02&amp;quot;&amp;gt;
        &amp;lt;procmode ptype=&amp;quot;barcode&amp;quot; barcodeType=&amp;quot;any&amp;quot; /&amp;gt;
        &amp;lt;/region&amp;gt;
        &amp;lt;region number=&amp;quot;2&amp;quot; name=&amp;quot;Barcode2&amp;quot; x=&amp;quot;0&amp;quot; y=&amp;quot;0&amp;quot; width=&amp;quot;0&amp;quot; height=&amp;quot;0&amp;quot; rtype=&amp;quot;0x02&amp;quot;&amp;gt;
        &amp;lt;procmode ptype=&amp;quot;barcode&amp;quot; barcodeType=&amp;quot;any&amp;quot; /&amp;gt;
        &amp;lt;/region&amp;gt;
        &amp;lt;region number=&amp;quot;3&amp;quot; name=&amp;quot;Barcode3&amp;quot; x=&amp;quot;0&amp;quot; y=&amp;quot;0&amp;quot; width=&amp;quot;0&amp;quot; height=&amp;quot;0&amp;quot; rtype=&amp;quot;0x02&amp;quot;&amp;gt;
        &amp;lt;procmode ptype=&amp;quot;barcode&amp;quot; barcodeType=&amp;quot;any&amp;quot; /&amp;gt;
        &amp;lt;/region&amp;gt;
        &amp;lt;region number=&amp;quot;4&amp;quot; name=&amp;quot;Barcode4&amp;quot; x=&amp;quot;0&amp;quot; y=&amp;quot;0&amp;quot; width=&amp;quot;0&amp;quot; height=&amp;quot;0&amp;quot; rtype=&amp;quot;0x02&amp;quot;&amp;gt;
        &amp;lt;procmode ptype=&amp;quot;barcode&amp;quot; barcodeType=&amp;quot;any&amp;quot; /&amp;gt;
        &amp;lt;/region&amp;gt;
        &amp;lt;!--Flexiscript corresponding to this template--&amp;gt;
        &amp;lt;templatefs&amp;gt;7A3377526522707C616D5273256E876D216F226E70876D226F236E70876D236F246E70876D246F256E7056772170637000&amp;lt;/templatefs&amp;gt;
        &amp;lt;!--******** Common parameters for this template *********--&amp;gt;
        &amp;lt;dparam id=&amp;quot;auto_capture_sensitivity&amp;quot; type=&amp;quot;integer&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;
        &amp;lt;dparam id=&amp;quot;ui_result_confirmation&amp;quot; type=&amp;quot;boolean&amp;quot; value=&amp;quot;False&amp;quot; /&amp;gt;
        &amp;lt;!--
            Corresponding Flexiscript output :
            Decode
            i = N-1;

            EndOfFrame
            If ( N&amp;gt;=4 )
                OutputEx(0,1);
                OutputEx(1,2);
                OutputEx(2,3);
                OutputEx(3,4);
                R = 0;
            EndIf;--&amp;gt;
    &amp;lt;/sstemplate&amp;gt;
    &amp;lt;!--Flexiscript corresponding to this template--&amp;gt;
    &amp;lt;mainfs&amp;gt;7A3377526522707C616D5273256E886D65226F226E7062886D65226F65226E70637000&amp;lt;/mainfs&amp;gt;

    &amp;lt;!--******** Common parameters for this template *********--&amp;gt;
    &amp;lt;!--
        Corresponding Flexiscript output :
        Decode
        i = N-1;

        EndOfFrame
        If ( N&amp;gt;=4 )
            Message(-1,1);
        Else
            Message(-1,-1);
        EndIf;--&amp;gt;
&amp;lt;/ssmain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, test the untouched template, with a 4 barcodes label:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/simulscan/4_barcodes_1.png&#34; alt=&#34;SimulScan with 4 Barcodes label, no changes to the template&#34; title=&#34;SimulScan with 4 Barcodes label, no changes to the template&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And now let&amp;rsquo;s try to change some of the parameters, the region name and the template name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;ssmain version=&amp;quot;2.0&amp;quot; name=&amp;quot;Barcode 4a&amp;quot;&amp;gt;
    &amp;lt;sstemplate name=&amp;quot;Barcode 4&amp;quot; width=&amp;quot;0&amp;quot; height=&amp;quot;0&amp;quot; number=&amp;quot;1&amp;quot; ttype=&amp;quot;barcode&amp;quot;&amp;gt;
        &amp;lt;region number=&amp;quot;1&amp;quot; name=&amp;quot;part&amp;quot; x=&amp;quot;0&amp;quot; y=&amp;quot;0&amp;quot; width=&amp;quot;0&amp;quot; height=&amp;quot;0&amp;quot; rtype=&amp;quot;0x02&amp;quot;&amp;gt;
        &amp;lt;procmode ptype=&amp;quot;barcode&amp;quot; barcodeType=&amp;quot;any&amp;quot; /&amp;gt;
        &amp;lt;/region&amp;gt;
        &amp;lt;region number=&amp;quot;2&amp;quot; name=&amp;quot;supplier&amp;quot; x=&amp;quot;0&amp;quot; y=&amp;quot;0&amp;quot; width=&amp;quot;0&amp;quot; height=&amp;quot;0&amp;quot; rtype=&amp;quot;0x02&amp;quot;&amp;gt;
        &amp;lt;procmode ptype=&amp;quot;barcode&amp;quot; barcodeType=&amp;quot;any&amp;quot; /&amp;gt;
        &amp;lt;/region&amp;gt;
        &amp;lt;region number=&amp;quot;3&amp;quot; name=&amp;quot;quantity&amp;quot; x=&amp;quot;0&amp;quot; y=&amp;quot;0&amp;quot; width=&amp;quot;0&amp;quot; height=&amp;quot;0&amp;quot; rtype=&amp;quot;0x02&amp;quot;&amp;gt;
        &amp;lt;procmode ptype=&amp;quot;barcode&amp;quot; barcodeType=&amp;quot;any&amp;quot; /&amp;gt;
        &amp;lt;/region&amp;gt;
        &amp;lt;region number=&amp;quot;4&amp;quot; name=&amp;quot;serial&amp;quot; x=&amp;quot;0&amp;quot; y=&amp;quot;0&amp;quot; width=&amp;quot;0&amp;quot; height=&amp;quot;0&amp;quot; rtype=&amp;quot;0x02&amp;quot;&amp;gt;
        &amp;lt;procmode ptype=&amp;quot;barcode&amp;quot; barcodeType=&amp;quot;any&amp;quot; /&amp;gt;
        &amp;lt;/region&amp;gt;
        &amp;lt;!--Flexiscript corresponding to this template--&amp;gt;
        &amp;lt;templatefs&amp;gt;7A3377526522707C616D5273256E876D216F226E70876D226F236E70876D236F246E70876D246F256E7056772170637000&amp;lt;/templatefs&amp;gt;
        &amp;lt;!--******** Common parameters for this template *********--&amp;gt;
        &amp;lt;dparam id=&amp;quot;auto_capture_sensitivity&amp;quot; type=&amp;quot;integer&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;
        &amp;lt;dparam id=&amp;quot;ui_result_confirmation&amp;quot; type=&amp;quot;boolean&amp;quot; value=&amp;quot;False&amp;quot; /&amp;gt;
    &amp;lt;/sstemplate&amp;gt;
    &amp;lt;mainfs&amp;gt;7A3377526522707C616D5273256E886D65226F226E7062886D65226F65226E70637000&amp;lt;/mainfs&amp;gt;
&amp;lt;/ssmain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now need to convert it to BASE64, we can still use the &lt;a href=&#34;https://www.base64encode.org/&#34;&gt;same website&lt;/a&gt; we used to decode it, to now encode it to:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/simulscan/4_barcodes_2.png&#34; alt=&#34;SimulScan 4 Barcodes template encoded in BASE64&#34; title=&#34;SimulScan 4 Barcodes template encoded in BASE64&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Loading the templates to &lt;code&gt;/enterprise/device/settings/datawedge/templates/&lt;/code&gt;, relaunching SimulScan and selecting our template, we can see that the new names are used:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/simulscan/4_barcodes_3.png&#34; alt=&#34;SimulScan with 4 Barcodes label, changed names&#34; title=&#34;SimulScan with 4 Barcodes label, changed names&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So, the idea that the template is an xml with a simple BASE64 encoding is correct.&lt;br /&gt;
Now the fun part, make it works with three barcodes!&lt;/p&gt;

&lt;h3 id=&#34;step-4-heavy-lifting:b992efff59f828918c2030b8fd3cff3d&#34;&gt;Step 4 - Heavy lifting&lt;/h3&gt;

&lt;p&gt;Here we need to change the actual Flexiscript code to process only three barcodes. The idea is to build something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;ssmain version=&amp;quot;2.0&amp;quot; name=&amp;quot;Barcode 3&amp;quot;&amp;gt;
    &amp;lt;sstemplate name=&amp;quot;Barcode 3&amp;quot; width=&amp;quot;0&amp;quot; height=&amp;quot;0&amp;quot; number=&amp;quot;1&amp;quot; ttype=&amp;quot;barcode&amp;quot;&amp;gt;
        &amp;lt;region number=&amp;quot;1&amp;quot; name=&amp;quot;Barcode1&amp;quot; x=&amp;quot;0&amp;quot; y=&amp;quot;0&amp;quot; width=&amp;quot;0&amp;quot; height=&amp;quot;0&amp;quot; rtype=&amp;quot;0x02&amp;quot;&amp;gt;
        &amp;lt;procmode ptype=&amp;quot;barcode&amp;quot; barcodeType=&amp;quot;any&amp;quot; /&amp;gt;
        &amp;lt;/region&amp;gt;
        &amp;lt;region number=&amp;quot;2&amp;quot; name=&amp;quot;Barcode2&amp;quot; x=&amp;quot;0&amp;quot; y=&amp;quot;0&amp;quot; width=&amp;quot;0&amp;quot; height=&amp;quot;0&amp;quot; rtype=&amp;quot;0x02&amp;quot;&amp;gt;
        &amp;lt;procmode ptype=&amp;quot;barcode&amp;quot; barcodeType=&amp;quot;any&amp;quot; /&amp;gt;
        &amp;lt;/region&amp;gt;
        &amp;lt;region number=&amp;quot;3&amp;quot; name=&amp;quot;Barcode3&amp;quot; x=&amp;quot;0&amp;quot; y=&amp;quot;0&amp;quot; width=&amp;quot;0&amp;quot; height=&amp;quot;0&amp;quot; rtype=&amp;quot;0x02&amp;quot;&amp;gt;
        &amp;lt;procmode ptype=&amp;quot;barcode&amp;quot; barcodeType=&amp;quot;any&amp;quot; /&amp;gt;
        &amp;lt;/region&amp;gt;
        &amp;lt;!--Flexiscript corresponding to this template--&amp;gt;
        &amp;lt;templatefs&amp;gt;??????&amp;lt;/templatefs&amp;gt;
        &amp;lt;!--******** Common parameters for this template *********--&amp;gt;
        &amp;lt;dparam id=&amp;quot;auto_capture_sensitivity&amp;quot; type=&amp;quot;integer&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;
        &amp;lt;dparam id=&amp;quot;ui_result_confirmation&amp;quot; type=&amp;quot;boolean&amp;quot; value=&amp;quot;False&amp;quot; /&amp;gt;
        &amp;lt;!--
            Corresponding Flexiscript output :
            Decode
            i = N-1;

            EndOfFrame
            If ( N&amp;gt;=3 )
                OutputEx(0,1);
                OutputEx(1,2);
                OutputEx(2,3);
                R = 0;
            EndIf;--&amp;gt;
    &amp;lt;/sstemplate&amp;gt;
    &amp;lt;!--Flexiscript corresponding to this template--&amp;gt;
    &amp;lt;mainfs&amp;gt;??????&amp;lt;/mainfs&amp;gt;

    &amp;lt;!--******** Common parameters for this template *********--&amp;gt;
    &amp;lt;!--
        Corresponding Flexiscript output :
        Decode
        i = N-1;

        EndOfFrame
        If ( N&amp;gt;=3 )
            Message(-1,1);
        Else
            Message(-1,-1);
        EndIf;--&amp;gt;
&amp;lt;/ssmain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not bad, we just miss the encoding of the actual Flexiscript&amp;hellip;&lt;/p&gt;

&lt;p&gt;The original code for the first snippets was: &lt;code&gt;z3wRe&amp;quot;p|amRs%nm!o&amp;quot;npm&amp;quot;o#npm#o$npm$o%npVw!pcp&lt;/code&gt;.  Looking in the other files for 5 and 10 barcodes:&lt;/p&gt;

&lt;p&gt;4 Barcodes &lt;code&gt;z3wRe&amp;quot;p|amRs%nm!o&amp;quot;npm&amp;quot;o#npm#o$npm$o%npVw!pcp&lt;/code&gt;&lt;br /&gt;
5 Barcodes &lt;code&gt;z3wRe&amp;quot;p|amRs&amp;amp;nm!o&amp;quot;npm&amp;quot;o#npm#o$npm$o%npm%o&amp;amp;npVw!pcp&lt;/code&gt;&lt;br /&gt;
10 Barcodes &lt;code&gt;z3wRe&amp;quot;p|amRs&amp;quot;!nm!o&amp;quot;npm&amp;quot;o#npm#o$npm$o%npm%o&amp;amp;npm&amp;amp;o&#39;npm&#39;o(npm(o)npm)o*npm*o&amp;quot;!npVw!pcp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;One of the assumptions that I can make is that the numbers are encoded as follow:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/simulscan/numbers.png&#34; alt=&#34;Flexiscript numbers encoding&#34; title=&#34;Flexiscript numbers encoding&#34; /&gt;&lt;/p&gt;

&lt;p&gt;My first test would be to use &lt;code&gt;z3wRe&amp;quot;p|amRs$nm!o&amp;quot;npm&amp;quot;o#npm#o$npVw!pcp&lt;/code&gt; that is translated to: &lt;code&gt;7A3377526522707C616D5273246E876D216F226E70876D226F236E70876D236F246E7056772170637000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the second snippets, we can proceeds in the same way, starting from the original &lt;code&gt;z3wRe&amp;quot;p|amRs%nme&amp;quot;o&amp;quot;npbme&amp;quot;oe&amp;quot;npcp&lt;/code&gt; and using the &lt;code&gt;$&lt;/code&gt; instead of &lt;code&gt;%&lt;/code&gt;: &lt;code&gt;z3wRe&amp;quot;p|amRs$nme&amp;quot;o&amp;quot;npbme&amp;quot;oe&amp;quot;npcp&lt;/code&gt;.  This is then translated to the final: &lt;code&gt;7A3377526522707C616D5273246E886D65226F226E7062886D65226F65226E70637000&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;step-5-profitt:b992efff59f828918c2030b8fd3cff3d&#34;&gt;Step 5 - Profitt&lt;/h3&gt;

&lt;p&gt;Putting everything together and encoding it to BASE64, we can get &lt;a href=&#34;http://pietromaggi.com/assets/pfm_barcode_3.xml&#34;&gt;the desired template&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/simulscan/3_barcodes.png&#34; alt=&#34;SimulScan with 3 Barcodes label&#34; title=&#34;SimulScan with 3 Barcodes label&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Hopefully Alberto will be happy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Disabling MC40 Home Button with a custom intent</title>
      <link>http://pietromaggi.com/2016/01/18/disabling-mc40-home-button-with-a-custom-intent/</link>
      <pubDate>Mon, 18 Jan 2016 09:00:00 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2016/01/18/disabling-mc40-home-button-with-a-custom-intent/</guid>
      <description>

&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;Zebra Technologies&amp;rsquo; devices are purpose built to be single use devices. Having an OS like Android nowadays provides a lot of flexibility&amp;hellip;  sometimes a bit too much.&lt;br /&gt;
With this idea in mind, the Android version used on these devices sometimes provide some nice surprise, like an Intent to disable the omnipresent Android&amp;rsquo;s Home button.&lt;/p&gt;

&lt;h2 id=&#34;the-basic-idea&#34;&gt;The basic idea&lt;/h2&gt;

&lt;p&gt;MC40 support an &lt;a href=&#34;http://developer.android.com/reference/android/content/Intent.html&#34;&gt;Android intent&lt;/a&gt; to disable the normal Home button behavior: &lt;em&gt;You can disable it and there&amp;rsquo;s no way to exit from the foreground application&lt;/em&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.zebra.com/community/android/android-forums/android-blogs/blog/2014/12/19/disabling-home-button-via-intent-mc40&#34;&gt;You can find a blog by Pavel Machala briefly describing the idea on Launchpad&lt;/a&gt;.&lt;br /&gt;
Here I want to present a simple sample that show how to use this intent, covering the only issue that is: &lt;em&gt;handling re-branded devices&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;project-setup&#34;&gt;Project setup&lt;/h2&gt;

&lt;p&gt;We start creating a new Android application in Android Studio (I&amp;rsquo;m using Android Studio v1.5.1 with Build tools 23.0.1, you&amp;rsquo;re mileage can vary if you&amp;rsquo;re using a different setup).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; is not required to build this application using Zebra Technologies&amp;rsquo; EMDK. A normal Android application can use this intent.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/AndroidNewPrj_01.jpg&#34; alt=&#34;Creating a new Android Application, step 1&#34; title=&#34;Creating a new Android Application, step 1&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/AndroidNewPrj_02.jpg&#34; alt=&#34;Creating a new Android Application, step 2&#34; title=&#34;Creating a new Android Application, step 2&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/AndroidNewPrj_03.jpg&#34; alt=&#34;Creating a new Android Application, step 3&#34; title=&#34;Creating a new Android Application, step 3&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/AndroidNewPrj_04.jpg&#34; alt=&#34;Creating a new Android Application, step 4&#34; title=&#34;Creating a new Android Application, step 4&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once we&amp;rsquo;ve the app framework setup by Android Studio, we can simplify the interface down to a Status message and a button.&lt;br /&gt;
First step: remove &lt;code&gt;content_main.xml&lt;/code&gt; and &lt;code&gt;menu_main&lt;/code&gt; then replace the content of &lt;code&gt;activity_main.xml&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;match_parent&amp;quot;
    android:gravity=&amp;quot;center&amp;quot;
    android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;
                    
    &amp;lt;TextView
        android:id=&amp;quot;@+id/tvwHomeBtnStatus&amp;quot;
        android:layout_width=&amp;quot;wrap_content&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot; 
        android:padding=&amp;quot;24dp&amp;quot;
        android:text=&amp;quot;@string/home_btn_status_on&amp;quot;/&amp;gt;

    &amp;lt;Button
        android:id=&amp;quot;@+id/btnToggleStatus&amp;quot;
        android:layout_width=&amp;quot;wrap_content&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot; 
        android:text=&amp;quot;@string/toggle&amp;quot;/&amp;gt;
&amp;lt;/LinearLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This layout requires the following &lt;code&gt;string.xml&lt;/code&gt; inside the &lt;code&gt;res/values&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;resources&amp;gt;
    &amp;lt;string name=&amp;quot;app_name&amp;quot;&amp;gt;MC40HomeButton&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;home_btn_status_on&amp;quot;&amp;gt;Home Button Enabled&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;home_btn_status_off&amp;quot;&amp;gt;Home Button Disabled&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;toggle&amp;quot;&amp;gt;Toggle current device setting&amp;lt;/string&amp;gt;
&amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/Strings.jpg&#34; alt=&#34;Our Strings.xml at this point&#34; title=&#34;Our Strings.xml at this point&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can now remove a lot of the generated template code in &lt;code&gt;MainActivity.java&lt;/code&gt; trimming down the code to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.pietromaggi.sample.mc40homebutton;

import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }
}                                
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we run the application at this moment, it&amp;rsquo;s not doing a lot :-)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/Screenshot_tag1.png&#34; alt=&#34;MC40 Screenshot of the app as recorded at tag1&#34; title=&#34;MC40 Screenshot of the app as recorded at tag1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can find the app at this stage &lt;a href=&#34;https://github.com/pfmaggi/mc40_homebutton/tree/tag1&#34;&gt;on the github repository under the &lt;code&gt;tag1&lt;/code&gt; tag&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next step would be to check that we&amp;rsquo;re really running on a Zebra Technologies&amp;rsquo; MC40, and then adding some logic to the app.&lt;/p&gt;

&lt;h2 id=&#34;dealing-with-multiple-os-versions-and-re-branding&#34;&gt;Dealing with multiple OS versions and re-branding&lt;/h2&gt;

&lt;p&gt;First we check that we&amp;rsquo;re running on a Zebra&amp;rsquo;s MC40 using a couple of Android constant:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;android.os.Build.MANUFACTURER&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;android.os.Build.MODEL&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The catch is that MC40, running Jelly Bean, report &amp;laquo;Motorola Solution&amp;raquo; as &lt;code&gt;MANUFACTURER&lt;/code&gt;, we need to address this difference and, as reported in &lt;a href=&#34;https://developer.zebra.com/community/android/android-forums/android-blogs/blog/2014/12/19/disabling-home-button-via-intent-mc40&#34;&gt;Pavel&amp;rsquo;s notes&lt;/a&gt;, the broadcast intent action is different for Motorola Solution or Zebra&amp;rsquo;s MC40.&lt;/p&gt;

&lt;p&gt;Once we&amp;rsquo;ve seen if the device the app is running on is supported, we can send a first Intent, to disable the home button, and configure the toggle button, so that is really toggle the Home Button status from disable to enabled and vice versa.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.pietromaggi.sample.mc40homebutton;

import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

public class MainActivity extends AppCompatActivity {
  private static final String MANUFACTURER_ZEBRA = &amp;quot;Zebra Technologies&amp;quot;;
  private static final String MANUFACTURER_MSI = &amp;quot;Motorola Solutions&amp;quot;;
  private static final String MODEL_MC40 = &amp;quot;MC40N0&amp;quot;;
  private static final String INTENT_ZEBRA = &amp;quot;com.symbol.intent.action.HOMEKEY_MODE&amp;quot;;
  private static final String INTENT_MSI = &amp;quot;com.motorolasolutions.intent.action.HOMEKEY_MODE&amp;quot;;
  private static final String INTENT_EXTRA = &amp;quot;state&amp;quot;;
  private String mStrIntent;
  private TextView mTvwStatus;
  private int mStatus;

  @Override
  protected void onCreate(Bundle savedInstanceState) {
    String StrManufacturer = Build.MANUFACTURER;
    String strModel = Build.MODEL;
    boolean bSupported = true;

    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    mTvwStatus = (TextView) findViewById(R.id.tvwHomeBtnStatus);

    if (strModel.equalsIgnoreCase(MODEL_MC40)) {
      // We&#39;re running on an MC40
      if (StrManufacturer.equalsIgnoreCase(MANUFACTURER_ZEBRA)) {
        // This is a Zebra Device
        mStrIntent = INTENT_ZEBRA;
      } else if (StrManufacturer.equalsIgnoreCase(MANUFACTURER_MSI)) {
        // This is a Motorola Solution Device
        // just double OS version, only Jelly Bean is supported
        mStrIntent = INTENT_MSI;
        if (Build.VERSION_CODES.JELLY_BEAN != Build.VERSION.SDK_INT) {
          bSupported = false;
        }

      }
    } else {
      // This is something else, not supported
      bSupported = false;
    }

    Button btnToggle = (Button)findViewById(R.id.btnToggleStatus);
    if (bSupported) {
      mTvwStatus.setText(R.string.home_btn_status_off);
      mStatus = 0;
      Intent i = new Intent(mStrIntent);
      i.putExtra(INTENT_EXTRA, mStatus);
      sendBroadcast(i);

      btnToggle.setOnClickListener(new View.OnClickListener() {
          @Override
          public void onClick(View v) {
          //Toggle Current Status
          if (0 == mStatus) {
            mStatus = 1;
            mTvwStatus.setText(R.string.home_btn_status_on);
          } else {
            mStatus = 0;
            mTvwStatus.setText(R.string.home_btn_status_off);
          }
          Intent i = new Intent(mStrIntent);
          i.putExtra(INTENT_EXTRA, mStatus);
          sendBroadcast(i);
        }
      });
    } else {
      mTvwStatus.setText(R.string.device_not_supported);
      btnToggle.setEnabled(false);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we run the application on a supported device, we get the expected behavior:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/Screenshot_tag2.png&#34; alt=&#34;MC40 Screenshot of the app as recorded at tag2&#34; title=&#34;MC40 Screenshot of the app as recorded at tag2&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;managing-state&#34;&gt;Managing state&lt;/h2&gt;

&lt;p&gt;The application now works as expected, but with an issue linked to not managing the state. As an example, simply rotating the device, the Activity is destroyed to create a new one with the standard behavior to disable the Home Button, even if we just re-enabled it using the &lt;code&gt;toggle&lt;/code&gt; button.&lt;br /&gt;
An easy solution is to add some code to manage the Application status overriding the &lt;code&gt;onSaveInstanceState(Bundle)&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
public void onSaveInstanceState(Bundle savedInstanceState) {
  super.onSaveInstanceState(savedInstanceState);
  savedInstanceState.putInt(KEY_STATE, mState);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And update the &lt;a href=&#34;https://github.com/pfmaggi/mc40_homebutton/blob/tag3/app/src/main/java/com/pietromaggi/sample/mc40homebutton/MainActivity.java#L55&#34;&gt;&lt;code&gt;onCreate&lt;/code&gt; method to check the bundle to see if it&amp;rsquo;s defined and behave accordingly&lt;/a&gt;.&lt;br /&gt;
The final version of the application, managing the state, can be find on github associated to &lt;a href=&#34;https://github.com/pfmaggi/mc40_homebutton/tree/tag3&#34;&gt;tag3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let me know if you&amp;rsquo;ve found this article useful.&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;notes&#34;&gt;Notes&lt;/h5&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;If your app locks down a few other things or you&amp;rsquo;re using something like Zebra&amp;rsquo;s &lt;a href=&#34;https://www.zebra.com/us/en/products/software/mobile-computers/mobile-app-utilities/enterprise-home-screen.html&#34;&gt;Enterprise Home Screen&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Secondary External Storage in Android KitKat - Part 1</title>
      <link>http://pietromaggi.com/2016/01/14/secondary-external-storage-in-android-kitkat---part-1/</link>
      <pubDate>Thu, 14 Jan 2016 23:00:00 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2016/01/14/secondary-external-storage-in-android-kitkat---part-1/</guid>
      <description>

&lt;p&gt;First technical post for 2016. Finally!&lt;/p&gt;

&lt;p&gt;To kick-start 2016 I&amp;rsquo;ve chosen a topic that is more and more relevant in our market: The changes introduced by Google in Android v4.4 KitKat, regarding the secondary storage (the SDCard).&lt;br /&gt;
I&amp;rsquo;ve already talked about this in my AppForum 2015 talk last October in London&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:51c058b2f0ea7a68582777f63f59ded1:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:51c058b2f0ea7a68582777f63f59ded1:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, but I want to add some extra info and rationales here.&lt;/p&gt;

&lt;h2 id=&#34;a-bit-of-background:51c058b2f0ea7a68582777f63f59ded1&#34;&gt;A bit of background&lt;/h2&gt;

&lt;p&gt;Android&amp;rsquo;s purpose is to establish an open platform for developers to build innovative apps.
For this reason, Google put in place a compatibility program that defines technical details of the Android Platform;&lt;/p&gt;

&lt;p&gt;For every Android release, there&amp;rsquo;s a Compatibility Definition Document, the last available at this moment is for &lt;a href=&#34;http://static.googleusercontent.com/media/source.android.com/it//compatibility/6.0/android-6.0-cdd.pdf&#34;&gt;Android 6.0, aka Marshmallow&lt;/a&gt;, that defines some of the technical features and device needs to have to be a compatible Android device. And this compatibility is a requirement to be able to license GMS&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:51c058b2f0ea7a68582777f63f59ded1:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:51c058b2f0ea7a68582777f63f59ded1:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; for the device.&lt;/p&gt;

&lt;p&gt;To put it clearly:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You want GMS? You need to comply to the CDD&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here we&amp;rsquo;re talking about Android v4.4 KitKat, so here&amp;rsquo;s a link to &lt;a href=&#34;http://source.android.com/compatibility/4.4/android-4.4-cdd.pdf&#34;&gt;Android 4.4 CDD&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-s-the-catch:51c058b2f0ea7a68582777f63f59ded1&#34;&gt;What&amp;rsquo;s the catch?&lt;/h2&gt;

&lt;p&gt;From the CDD, Android devices are required to have a Secondary Storage available with a minimum 1GB size if you don&amp;rsquo;t have this internal in your device but you provide an SDCard slot, you need to ship the device with an SDCard, again, 1GB minimum size.&lt;br /&gt;
So usually, you end up that the SDCard is your &lt;em&gt;Secondary External Storage&lt;/em&gt;, and the &lt;em&gt;Primary External Storage&lt;/em&gt; is the 1GB partition (minimum) you included in the device.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Not a big deal&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To access an External Storage on Android v4.3 and previous versions, you have to specify a couple of permissions in your &lt;code&gt;AndroidManifest.xml&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These will gave you read&amp;amp;write access to all the External Storage available&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:51c058b2f0ea7a68582777f63f59ded1:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:51c058b2f0ea7a68582777f63f59ded1:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;br /&gt;
Given that there are ways to gently ask for the &lt;a href=&#34;http://pietromaggi.com/2014/10/19/finding-the-sdcard-path-on-android-devices/&#34;&gt;SDCard true path&lt;/a&gt; this was more or less working.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But Android is now a multiuser OS! and an SDCard with a FAT file system, is not very good protecting the data between the different users&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Android support SDCard with FAT file system, to provide a layer of security, it uses the &lt;a href=&#34;https://en.wikipedia.org/wiki/Filesystem_in_Userspace&#34;&gt;Linux FUSE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Android v4.4 Google decides to go a step further mandating that an app can write (with the right permissions that we just saw) only on the Primary External Storage. For all the other External Storage, an app can only write in its package folder. e.g. if you app package is com.pietromaggi.sample.externalstorage, It can only write in the folders &lt;code&gt;&amp;lt;sdcard root&amp;gt;/Android/data/com.pietromaggi.sample.externalstorage&lt;/code&gt;.&lt;br /&gt;
There&amp;rsquo;s no way, for a normal application, to write anywhere else on the SDCard.&lt;/p&gt;

&lt;h2 id=&#34;ok-but-there-s-an-happy-end-somewhere:51c058b2f0ea7a68582777f63f59ded1&#34;&gt;OK, but there&amp;rsquo;s an happy end somewhere?&lt;/h2&gt;

&lt;p&gt;Really, if you&amp;rsquo;re trying to get a way to revert Android behavior to what it was before API level 19, no, this is it.&lt;br /&gt;
Luckily Google has introduced new API in KitKat (and Lollipop and Marshmallow) that allows to mitigate the issue. Some user interventions may be needed but at least there are standard APIs available.&lt;/p&gt;

&lt;p&gt;In the second part of this blog I&amp;rsquo;ll present a sample app that uses some of these APIs.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:51c058b2f0ea7a68582777f63f59ded1:1&#34;&gt;Slides presented in London: &lt;script async class=&#39;speakerdeck-embed&#39; data-id=&#39;ef4248bf72454b2e9602db55bdf1e8ed&#39; data-ratio=&#39;1.33333333333333&#39; src=&#39;//speakerdeck.com/assets/embed.js&#39;&gt;&lt;/script&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:51c058b2f0ea7a68582777f63f59ded1:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:51c058b2f0ea7a68582777f63f59ded1:2&#34;&gt;GMS Stands for Google Mobile Services, and is the collection of services and application built by Google that are not part of AOSP (Android Open Source Project) like GMail, Google Maps, Google Play Store and the push notification service GCM (Google Cloud Messaging).
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:51c058b2f0ea7a68582777f63f59ded1:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:51c058b2f0ea7a68582777f63f59ded1:3&#34;&gt;The catch is that, before Android v4.4, API level 19, and the introduction of the &lt;code&gt;Environment.getExternalFilesDirs()&lt;/code&gt; there was no way to know how many External Storage you had available on a device. The only available API was &lt;code&gt;Environment.getExternalStorageDirectory()&lt;/code&gt; that returns the Primary External Storage.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:51c058b2f0ea7a68582777f63f59ded1:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Building Zebra&#39;s EMDK project using SDK Platform 23</title>
      <link>http://pietromaggi.com/2015/11/25/building-zebras-emdk-project-using-sdk-platform-23/</link>
      <pubDate>Wed, 25 Nov 2015 09:54:55 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2015/11/25/building-zebras-emdk-project-using-sdk-platform-23/</guid>
      <description>

&lt;p&gt;There&amp;rsquo;s a recurring question coming to me and to Launchpad&amp;rsquo;s forums lately:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.motorolasolutions.com/message/86287#86287&#34;&gt;&lt;em&gt;How can I compile my Android app, using Zebra&amp;rsquo;s EMDK, if I need the latest support library?&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;some-background&#34;&gt;Some background&lt;/h1&gt;

&lt;p&gt;With the Android tools moving super-fast (Android studio v1.0 launched at the beginning of 2015, the latest stable release is v1.4.1, we already have v1.5RC and v2.0 has been announced&amp;hellip;) keeping up to this pace is not easy for our EMDK team!&lt;/p&gt;

&lt;p&gt;We discovered some integration issues when Android Studio v1.3 was released and &lt;a href=&#34;https://developer.motorolasolutions.com/community/android/android-forums/android-blogs/blog/2015/08/21/announcement-emdk-issue-with-android-studio-13-new-project-wizard&#34;&gt;we presented a workaround&lt;/a&gt; to use the EMDK as the building SDK. Limiting the project to API level 16 or 19. This should be good, right?&lt;/p&gt;

&lt;p&gt;A downside of this approach surfaced when Google updated the templates for new projects, now based on the Android Support Library. I really like the approach to base new projects on the support library; the problem is that it does require to build the project with API level 21+.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here we can have a problem&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;using-zebra-s-emdk&#34;&gt;Using Zebra&amp;rsquo;s EMDK&lt;/h1&gt;

&lt;p&gt;So, talking just about Android Studio, that is the current up-to-date Android IDE, we currently document two ways to use the EMDK:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.motorolasolutions.com/docs/DOC-2983&#34;&gt;The official one&lt;/a&gt;, selecting the EMDK in the &amp;laquo;Compile SDK&amp;raquo; drop-down when creating the project&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.motorolasolutions.com/community/android/android-forums/android-blogs/blog/2015/08/21/announcement-emdk-issue-with-android-studio-13-new-project-wizard&#34;&gt;The Android Studio v1.3+ workaround way&lt;/a&gt; that suggest to manually set the EMDK as the &amp;laquo;Compile SDK&amp;raquo;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both methods fails to compile a project using the latest Android Support Library.&lt;/p&gt;

&lt;h1 id=&#34;a-little-gradle-magic&#34;&gt;A little gradle magic&lt;/h1&gt;

&lt;p&gt;Here&amp;rsquo;s a third, &lt;strong&gt;UNOFFICIAL&lt;/strong&gt;, way to include the EMDK in an Android project and use the latest available SDK to build the project.&lt;/p&gt;

&lt;h2 id=&#34;copy-the-lib-file-in-your-project&#34;&gt;Copy the lib file in your project&lt;/h2&gt;

&lt;p&gt;First of all, create in your Android project a lib folder and copy into it the com.symbol.emdk.jar library that you got installing the EMDK on your PC/Mac:&lt;/p&gt;

&lt;p&gt;This is probably easier to say than to do, because the default Android Studio project view doesn&amp;rsquo;t show these files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/EMDK_gradle/Android_Project1.jpg&#34; alt=&#34;Default Android Project Panel&#34; title=&#34;Default Android Project Panel&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The easiest way, at least for me, is to copy the file from the setup position to a newly created &lt;code&gt;libs&lt;/code&gt; folder in my project from Windows&amp;rsquo; File Explorer or OSX&amp;rsquo;s Finder and then check that everything is OK switching the Android Studio project view from &amp;laquo;Android&amp;raquo; to &amp;laquo;Project Files&amp;raquo;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/EMDK_gradle/Android_Project2.jpg&#34; alt=&#34;Project Files Panel View&#34; title=&#34;Project Files Panel View&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;modify-the-build-gradle-file&#34;&gt;Modify the build.gradle file&lt;/h2&gt;

&lt;p&gt;OK, once the file is included in our project (and this means that you can check in this file in your SCM and checkout on a new PC and rebuilt it without the need to Zebra EMDK installed) we can explain to Android Studio how to use it. To do this we need to modify the &lt;code&gt;build.gradle&lt;/code&gt; file included in the app folder. If you&amp;rsquo;ve switched back to the &amp;laquo;Android Project view&amp;raquo;, this is the Module: App, gradle file. As shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/EMDK_gradle/gradle_file.jpg&#34; alt=&#34;Gradle file to Edit&#34; title=&#34;Gradle file to Edit&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In this file you need to setup the dependencies so that the build process uses this lib as a reference without including it into the final APK (otherwise the application will exit with and exception when launched).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   dependencies {
       compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;], exclude: [&#39;com.symbol.emdk.jar&#39;])
       compile &#39;com.android.support:appcompat-v7:23.0.1&#39;
       provided fileTree(dir: &#39;libs&#39;, include: [&#39;com.symbol.emdk.jar&#39;])
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this changes you can build your project using the latest available SDK, just remember that you&amp;rsquo;re targeting Zebra devices with API level 16 or 19, so, setup your minimum SDK accordingly.&lt;/p&gt;

&lt;p&gt;You can find a demo app built with this technique &lt;a href=&#34;https://github.com/pfmaggi/GetDeviceInfo_EMDK&#34;&gt;on my github account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy coding&lt;br /&gt;
~Pietro&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Back Button and Enterprise Browser</title>
      <link>http://pietromaggi.com/2015/09/25/android-back-button-and-enterprise-browser/</link>
      <pubDate>Fri, 25 Sep 2015 11:33:11 +0200</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2015/09/25/android-back-button-and-enterprise-browser/</guid>
      <description>

&lt;h2 id=&#34;edit&#34;&gt;Edit&lt;/h2&gt;

&lt;p&gt;Enteprise Browser v1.3 introduced a change that requires to enable &lt;code&gt;FunctionKeysCapturable&lt;/code&gt; to be able to use the KeyCapture API.&lt;br /&gt;
To do this you need to update your &lt;code&gt;Config.xml&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;FunctionKeysCapturable                 value=&amp;quot;1&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;enterprise-browser&#34;&gt;Enterprise Browser&lt;/h2&gt;

&lt;p&gt;Enterprise Browser is Zebra Technologies&amp;rsquo; Industrial Browser built for our Rugged Devices, we support most of our Windows Mobile/Windows CE devices and Android devices.&lt;/p&gt;

&lt;p&gt;This product is usually used with existing web application that cannot be updated/modified moving from one device to another.
This help us winning some opportunities but sometimes present some unique challenges like, as an example, disabling the Android back button default behavior.&lt;/p&gt;

&lt;h2 id=&#34;back-button-on-android&#34;&gt;Back Button on Android?&lt;/h2&gt;

&lt;p&gt;Given that this is a cross-platform product (built on top of our RhoMobile Suite) we don&amp;rsquo;t have a custom settings to disable the back button in the Config.xml configuration file, however it is still possible to add a default Metatags in the configuration so that no changes in the existing pages are needed.&lt;/p&gt;

&lt;p&gt;So, do we&amp;rsquo;ve an API to intercept the Back Button?&lt;/p&gt;

&lt;p&gt;Of course! the &lt;a href=&#34;https://developer.motorolasolutions.com/docs/DOC-2520&#34;&gt;KeyCapture API&lt;/a&gt; can be used to intercept and disable it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;EB.KeyCapture.captureKey(BOOLEAN dispatch, STRING keyValue)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setting the &lt;code&gt;dispatch&lt;/code&gt; value to &lt;code&gt;false&lt;/code&gt;,  We just need to get the correct KeyCode.&lt;/p&gt;

&lt;p&gt;This can a bit tricky and can be different from device to device, the best solution I&amp;rsquo;ve is to ask directly to the device with a simple HTML page that display the keycode off all the keys that are pressed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;META HTTP-Equiv=&amp;quot;KeyCapture&amp;quot; Content=&amp;quot;KeyValue:All; Dispatch:False; KeyEvent:url(&#39;JavaScript:alert(&#39;Key Pressed: %s&#39;);&#39;)&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
	&amp;lt;title&amp;gt;Display KeyCode&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;H1&amp;gt;Press a key to see it&#39;s KeyCode&amp;lt;/H1&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we&amp;rsquo;ve the correct KeyCode, we just need to call this API in every page that is loaded in the browser&amp;hellip; Sometimes that is not easy to do sometimes, especially when the application cannot be modified.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve a solution for this issue: having a &lt;code&gt;DefaultMetaTags&lt;/code&gt; in Enterprise Browser&amp;rsquo;s configuration.&lt;/p&gt;

&lt;h2 id=&#34;what-s-a-defaultmetatags&#34;&gt;What&amp;rsquo;s a DefaultMetaTags&lt;/h2&gt;

&lt;p&gt;We can start from the &lt;a href=&#34;https://developer.motorolasolutions.com/docs/DOC-2571#defaultmetatags&#34;&gt;documentation&lt;/a&gt;, what does it means?&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;DefaultMetaTags&lt;/code&gt; is a way to call an Enterprise Browser API on top of every HTML page that is loaded in the browser. This can be used, as an example to enable on screen UI elements like the battery or WiFi icon.&lt;/p&gt;

&lt;p&gt;So, putting the different things together, we can put this in the &amp;ldquo;Config.xml&amp;rsquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;DefaultMetaTags&amp;gt;
    &amp;lt;MetaTag value=&amp;quot;KeyCapture~KeyValue:0xA6;Dispatch:False&amp;quot;/&amp;gt;
 &amp;lt;/DefaultMetaTags&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BTW: &lt;code&gt;0xA6&lt;/code&gt; is the correct value for the Back Button on a TC55 running Android v4.4 KitKat.&lt;/p&gt;

&lt;h2 id=&#34;closing-comments&#34;&gt;Closing comments&lt;/h2&gt;

&lt;p&gt;Enterprise Browser&amp;rsquo;s &lt;code&gt;DefaultMetaTags&lt;/code&gt; is a very flexible way to &amp;laquo;patch&amp;raquo; an existing Web application without touching its source code.&lt;/p&gt;

&lt;p&gt;As a closing comment here&amp;rsquo;s a sample configuration that zoom the current web page pressing a button:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;MetaTag VALUE=&amp;quot;KeyCapture~KeyValue:0x79;Dispatch:False;KeyEvent:url(&#39;JavaScript:eval(&#39;zoom.page=\&#39;1.3\&#39;;&#39;);&#39;)&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;If you&amp;rsquo;re interested in Enterprise Browser, you can visit us at &lt;a href=&#34;http://bit.ly/EMEAAppForum2015&#34;&gt;EMEA AppForum in London, Oct. 12th-14th&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finding the SDCard Path on Android devices</title>
      <link>http://pietromaggi.com/2014/10/19/finding-the-sdcard-path-on-android-devices/</link>
      <pubDate>Sun, 19 Oct 2014 20:55:18 +0200</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2014/10/19/finding-the-sdcard-path-on-android-devices/</guid>
      <description>

&lt;p&gt;With Motorola Solutions we&amp;rsquo;re busy finishing the first round of Android Developer&amp;rsquo;s Kitchens around Europe. Just in time to prepare for the &lt;a href=&#34;http://www.motorolasolutionsevents.com/enterprise_appforum_2014/&#34;&gt;Enterprise App Forum in Brussels!&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The nice things of these events is the interaction with our partners and theirs real live problem!&lt;/p&gt;

&lt;p&gt;Last week I got an interesting question regarding our TC55:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can I programmatically get the path for the SDCard on the TC55?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s a good question; usually you don&amp;rsquo;t want to insert in your code the dependency to an hard coded path!
The usual answer is based around the function &lt;code&gt;Environment.getExternalStorageDirectory();&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The problem is that this function report a different folder if the SDCard is inserted in the device or not.
This is not a problem unique to the TC55, it&amp;rsquo;s a common problem on Android and there are different ways to handle it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://futurewithdreams.blogspot.it/2014/01/get-external-sdcard-location-in-android.html&#34;&gt;Reading the partition table from &lt;code&gt;/proc/mounts&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/a/23949650/118862&#34;&gt;Use some environment variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/22219312/android-open-external-storage-directorysdcard-for-storing-file&#34;&gt;Still use the getExternalStorageDirectory() function, together with the isExternalStorageRemovable() and getExternalStorageState() functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given that we&amp;rsquo;ve the luxury to target just a few devices, the Motorola Solutions one :-), the best option is to use the environment variables.&lt;/p&gt;

&lt;h3 id=&#34;let-s-see-what-happens-on-the-tc55&#34;&gt;Let&amp;rsquo;s see what happens on the TC55&lt;/h3&gt;

&lt;p&gt;On this device, using &lt;code&gt;Environment.getExternalStorageDirectory();&lt;/code&gt; returns different results depending if you&amp;rsquo;ve installed or not an SDCard:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Without SDCard —&amp;gt; /&lt;code&gt;STORAGE/SDCARD1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;With SDCard —&amp;gt; &lt;code&gt;/STORAGE/SDCARD0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s see what we can achieve with the environment variables!&lt;/p&gt;

&lt;p&gt;We can log into a TC55 and use the &lt;code&gt;printenv&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;adb shell
printenv

_=/system/bin/printenv
LD_LIBRARY_PATH=/vendor/lib:/system/lib
HOSTNAME=android
BOOTCLASSPATH=/system/framework/core.jar:/system/framework/core-junit.jar:/system/framework/bouncycastle.jar:/system/framework/ext.jar:/system/framework/framework.jar:/system/framework/framework_ext.jar:/system/framework/android.policy.jar:/system/framework/services.jar:/system/framework/apache-xml.jar
PATH=/sbin:/vendor/bin:/system/sbin:/system/bin:/system/xbin
LOOP_MOUNTPOINT=/mnt/obb
ANDROID_DATA=/data
ANDROID_ROOT=/system
SHELL=/system/bin/sh
MKSH=/system/bin/sh
USER=shell
EXTERNAL_SDCARD_STORAGE=/storage/sdcard0
ANDROID_PROPERTY_WORKSPACE=8,49152
EXTERNAL_STORAGE=/storage/sdcard1
ANDROID_ASSETS=/system/app
TERM=vt100
RANDOM=16913
ASEC_MOUNTPOINT=/mnt/asec
SECURE_STORAGE_SDCARD=/storage/sdcard0
HOME=/data
ANDROID_BOOTLOGO=1
MASS_STORAGE=/mnt/udisk
PS1=$(precmd)$USER@$HOSTNAME:${PWD:-?} $
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From this is easy to see that the way to get the SDCard path is to use a couple of environment variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;System.getenv(&amp;laquo;EXTERNAL_STORAGE&amp;raquo;)&lt;/code&gt; —&amp;gt; Internal SDCard &lt;code&gt;/STORAGE/SDCARD1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;System.getenv(&amp;laquo;EXTERNAL_SDCARD_STORAGE&amp;raquo;)&lt;/code&gt; —&amp;gt; True SDCard &lt;code&gt;/STORAGE/SDCARD0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This solutions is still depending on two specific environment variables, is much better than hardcoding the path strings in the application but is probably only acceptable if you&amp;rsquo;re targeting just few devices.
Another point is that, on other devices, you get the true SDCard path linked to the &lt;code&gt;SECONDARY_STORAGE&lt;/code&gt; environment variable. So a better solution could be to check for both variables with something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String strSDCardPath = System.getenv(&amp;quot;SECONDARY_STORAGE&amp;quot;);
if ((null == strSDCardPath) || (strSDCardPath.length() == 0)) {
    strSDCardPath = System.getenv(&amp;quot;EXTERNAL_SDCARD_STORAGE&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we will start to release KitKat based devices it will be even more important taking a look at the right path for these volumes :-)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;EDIT:&lt;/em&gt; I&amp;rsquo;ve a new &lt;a href=&#34;http://pietromaggi.com/2016/01/14/secondary-external-storage-in-android-kitkat---part-1/&#34;&gt;blog post&lt;/a&gt; with additional information for Zebra Technologies KitKat devices.&lt;/p&gt;

&lt;p&gt;You can find in my github account a &lt;a href=&#34;https://github.com/pfmaggi/GetDeviceInfo&#34;&gt;sample application&lt;/a&gt; that retrieves these data.&lt;/p&gt;

&lt;p&gt;Let me know if you find this information useful via &lt;a href=&#34;http://twitter.com/pfmaggi&#34;&gt;twitter @pfmaggi&lt;/a&gt; or &lt;a href=&#34;mailto:pfm@pietromaggi.com&#34;&gt;email&lt;/a&gt; or &lt;a href=&#34;http://www.motorolasolutionsevents.com/enterprise_appforum_2014/&#34;&gt;joining me and the EMEA Software Enablement Team in Brussels for the Enterprise AppForum, our annual developer events&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting device info from MSI Android devices</title>
      <link>http://pietromaggi.com/2014/09/02/getting-device-info-from-msi-android-devices/</link>
      <pubDate>Tue, 02 Sep 2014 11:56:38 +0200</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2014/09/02/getting-device-info-from-msi-android-devices/</guid>
      <description>

&lt;h1 id=&#34;the-good-old-ways:fc4a5c33de3ac7ed61c6a8c68c9cf289&#34;&gt;The good old ways!&lt;/h1&gt;

&lt;p&gt;On Symbol/MSI Windows Mobile devices, we where providing some APIs in the EMDK to get additional information.
Looking into the Resource Coordinator is possible to find APIs like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RCM_GetESN() - retrieves the device electronic serial number&lt;/li&gt;
&lt;li&gt;RCM_GetUniqueUnitId() - retrieves the unique unit identification number&lt;/li&gt;
&lt;li&gt;RCM_GetVersion() - retrieves version information&lt;/li&gt;
&lt;li&gt;etc&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;hellip;and we don&amp;rsquo;t have anything like this in the Android EMDK. WHY?&lt;/p&gt;

&lt;p&gt;Simply because the functionality is already included in the standard Android SDK.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how to get this is data on an MSI device with the Android OS.&lt;/p&gt;

&lt;h1 id=&#34;the-fabulous-new-way:fc4a5c33de3ac7ed61c6a8c68c9cf289&#34;&gt;The fabulous new way!&lt;/h1&gt;

&lt;p&gt;You can find the completed project in &lt;a href=&#34;https://github.com/pfmaggi/GetDeviceInfo&#34;&gt;this repository&lt;/a&gt; on my github account, I&amp;rsquo;m using Windows 7 and Eclipse+ADT, but you can follow these steps with Android Studio quite nicely.&lt;/p&gt;

&lt;h1 id=&#34;create-a-new-project:fc4a5c33de3ac7ed61c6a8c68c9cf289&#34;&gt;Create a new Project&lt;/h1&gt;

&lt;p&gt;Create a new Android project, nothing fancy here, it&amp;rsquo;s just a standard app with a single Blank Activity.
You can follow these images as a guideline. Your interface may vary as Google updates the Android wizard quite often.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/create_project_01.jpg&#34; alt=&#34;Create Project - step 1&#34; title=&#34;Android New Project Wizard - page 1&#34; /&gt;
 &lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/create_project_02.jpg&#34; alt=&#34;Create Project - step 2&#34; title=&#34;Android New Project Wizard - page 2&#34; /&gt;
 &lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/create_project_03.jpg&#34; alt=&#34;Create Project - step 3&#34; title=&#34;Android New Project Wizard - page 3&#34; /&gt;
 &lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/create_project_04.jpg&#34; alt=&#34;Create Project - step 4&#34; title=&#34;Android New Project Wizard - page 4&#34; /&gt;
 &lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/create_project_05.jpg&#34; alt=&#34;Create Project - step 5&#34; title=&#34;Android New Project Wizard - page 5&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then we can do some housekeeping deleting the unnecessary main.xml menu resource:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/delete_menu.jpg&#34; alt=&#34;Delete Menu resource&#34; title=&#34;Delete unnecessary menu resource&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can then start the two main changes:
  - Setting up the Activity Layout
  - Updating the Activity onCreate method to retrieve the device data&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/activity_layout.jpg&#34; alt=&#34;Main Activity Layout&#34; title=&#34;Main Activity Layout&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;

&amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
              android:layout_width=&amp;quot;match_parent&amp;quot;
              android:layout_height=&amp;quot;match_parent&amp;quot;
              android:orientation=&amp;quot;vertical&amp;quot;
    &amp;gt;
    &amp;lt;TextView
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;@string/device_name&amp;quot;
        /&amp;gt;
    &amp;lt;TextView
        android:id=&amp;quot;@+id/device_type&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:layout_marginLeft=&amp;quot;16dp&amp;quot;
        android:layout_marginRight=&amp;quot;16dp&amp;quot;
        android:textSize=&amp;quot;18sp&amp;quot;
        style=&amp;quot;?android:listSeparatorTextViewStyle&amp;quot;
        /&amp;gt;
    &amp;lt;TextView
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;@string/electronic_serial_number&amp;quot;
        /&amp;gt;
    &amp;lt;TextView
        android:id=&amp;quot;@+id/device_esn&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:layout_marginLeft=&amp;quot;16dp&amp;quot;
        android:layout_marginRight=&amp;quot;16dp&amp;quot;
        android:textSize=&amp;quot;18sp&amp;quot;
        style=&amp;quot;?android:listSeparatorTextViewStyle&amp;quot;
        /&amp;gt;
    &amp;lt;TextView
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;@string/build_number&amp;quot;
        /&amp;gt;
    &amp;lt;TextView
        android:id=&amp;quot;@+id/build_number&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:layout_marginLeft=&amp;quot;16dp&amp;quot;
        android:layout_marginRight=&amp;quot;16dp&amp;quot;
        android:textSize=&amp;quot;18sp&amp;quot;
        style=&amp;quot;?android:listSeparatorTextViewStyle&amp;quot;
        /&amp;gt;
&amp;lt;/LinearLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This together with the string.xml containing the referenced string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;resources&amp;gt;

    &amp;lt;string name=&amp;quot;app_name&amp;quot;&amp;gt;Get Device Info&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;electronic_serial_number&amp;quot;&amp;gt;Device ESN:&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;build_number&amp;quot;&amp;gt;Build Number:&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;device_name&amp;quot;&amp;gt;Device:&amp;lt;/string&amp;gt;

&amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the simple Activity java code to collect the information is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.pietromaggi.sample.getdeviceinfo;

import android.os.Build;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.widget.TextView;


public class MainActivity extends ActionBarActivity {
    TextView DeviceNameTextView;
    TextView ESNTextView;
    TextView BuildNumberTextView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        DeviceNameTextView = (TextView)findViewById(R.id.device_type);
        DeviceNameTextView.setText(Build.DEVICE);

        ESNTextView = (TextView)findViewById(R.id.device_esn);
        ESNTextView.setText(Build.SERIAL);

        BuildNumberTextView = (TextView)findViewById(R.id.build_number);
        BuildNumberTextView.setText(Build.ID);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;where-s-the-tricks:fc4a5c33de3ac7ed61c6a8c68c9cf289&#34;&gt;Where&amp;rsquo;s the tricks?&lt;/h1&gt;

&lt;p&gt;There&amp;rsquo;s really no trick, Android SDK provide this information, and more using these constants:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.android.com/reference/android/os/Build.html#DEVICE&#34;&gt;Build.DEVICE = The name of the industrial design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.android.com/reference/android/os/Build.html#SERIAL&#34;&gt;Build.SERIAL = A hardware serial number, if available&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.android.com/reference/android/os/Build.html#ID&#34;&gt;Build.ID = changelist number&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Obviously, it&amp;rsquo;s the OEM building the device that put together the plumbing to link the correct information. Your mileage may vary on different devices.&lt;/p&gt;

&lt;p&gt;Running this application on an ET1 with Jelly Bean you get:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/screen_ET1.png&#34; alt=&#34;ET1 Screenshot&#34; title=&#34;ET1 Screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Running this application on an MC40 with Jelly Bean you get:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/screen_MC40.png&#34; alt=&#34;MC40 Screenshot&#34; title=&#34;MC40 Screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;While the TC55 is always a bit different :-)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/screen_TC55JB.png&#34; alt=&#34;TC55 Screenshot&#34; title=&#34;TC55 Screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Hope you may find this useful. Send me an email if you&amp;rsquo;d like to see any particular topic on this blog.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Diving into Android source code</title>
      <link>http://pietromaggi.com/2014/01/02/diving-into-android-source-code/</link>
      <pubDate>Thu, 02 Jan 2014 14:34:27 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2014/01/02/diving-into-android-source-code/</guid>
      <description>

&lt;h2 id=&#34;why-dive-into-android-code:29c65bc279e3a113bf9cc4bb66b79657&#34;&gt;Why dive into Android code?&lt;/h2&gt;

&lt;p&gt;When you&amp;rsquo;ve to write applications for Android, you&amp;rsquo;re targeting a giant moving API surface, sometimes you can be surprised of some different behavior in different Android versions or with an API call that is not well documented, so having the option to delve into Android Source Code is a great opportunity.&lt;/p&gt;

&lt;p&gt;A lot of things can be written on how to do this, there&amp;rsquo;s some documentation available on &lt;a href=&#34;http://source.android.com/source/index.html&#34;&gt;AOSP website&lt;/a&gt;, however I think that the best starting point is a video tutorial by NewCircle&amp;rsquo;s Instructor Dave Smith on this very topic:&lt;/p&gt;

&lt;h4 id=&#34;diving-into-android-source-code:29c65bc279e3a113bf9cc4bb66b79657&#34;&gt;Diving into Android Source Code&lt;/h4&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/NsqFOSzoYE8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;p&gt;So, take your time to setup your own copy of the Android source code and, next time you&amp;rsquo;re asking yourself &amp;laquo;What&amp;rsquo;s going on when you call an API, you can check the source code!&amp;raquo;&lt;/p&gt;

&lt;h2 id=&#34;on-a-similar-topic-dalvik-vm:29c65bc279e3a113bf9cc4bb66b79657&#34;&gt;On a similar topic: Dalvik VM&lt;/h2&gt;

&lt;p&gt;Dan Bernstein has presented at Google I/O 2008 a talk about the internals of Dalvik VM:&lt;/p&gt;

&lt;h4 id=&#34;dalvik-virtual-machine-internals:29c65bc279e3a113bf9cc4bb66b79657&#34;&gt;Dalvik Virtual Machine Internals&lt;/h4&gt;

&lt;p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/ptjedOZEXPM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re interested in this piece of the Android Source Code, this is the best starting point, even if nowadays ART has taken the place of Dalvik. A lot of Dalvik design is still in use nowadays!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>