<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sample on Pietro F. Maggi</title>
    <link>http://pietromaggi.com/tags/sample/</link>
    <description>Recent content in Sample on Pietro F. Maggi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>pfm@pietromaggi.com (Pietro F. Maggi)</managingEditor>
    <webMaster>pfm@pietromaggi.com (Pietro F. Maggi)</webMaster>
    <copyright>(c) 2013-2016 Pietro F. Maggi</copyright>
    <lastBuildDate>Mon, 01 Aug 2016 17:00:00 +0200</lastBuildDate>
    <atom:link href="http://pietromaggi.com/tags/sample/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Disabling Home Button on Zebra Android devices</title>
      <link>http://pietromaggi.com/2016/08/01/disabling-home-button-on-zebra-android-devices/</link>
      <pubDate>Mon, 01 Aug 2016 17:00:00 +0200</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2016/08/01/disabling-home-button-on-zebra-android-devices/</guid>
      <description>

&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;I presented in the past a method to disable the Home Button on Zebra&amp;rsquo;s MC40 Android device, using a custom intent&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;br /&gt;
After having published it, I got some enquiries, about having the same behaviour on other Zebra&amp;rsquo;s devices. Well, it turns out that there&amp;rsquo;s now a &amp;laquo;standard&amp;raquo; way to do this in Zebra&amp;rsquo;s Mx extension using the UI Manager profile. This post is going to show how to implement a simple application that can disable the Home Button on all Zebra&amp;rsquo;s devices that have Mx v4.3 installed&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id=&#34;the-basic-idea&#34;&gt;The basic idea&lt;/h2&gt;

&lt;p&gt;Mx v4.3 introduced the support in the &lt;a href=&#34;http://techdocs.zebra.com/emdk-for-android/4-2/mx/uimgr/#homekey-enabledisable&#34;&gt;UI Manager to disable the Home Button&lt;/a&gt; to disable the normal Home button behavior: &lt;em&gt;You can disable it and there&amp;rsquo;s no way to exit from the foreground application&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;project-setup&#34;&gt;Project setup&lt;/h2&gt;

&lt;p&gt;We start creating a new Android application in Android Studio. I&amp;rsquo;m using Android Studio v2.1.2 with Build tools 23.0.3, and the EMDK v4.2. Your mileage can vary if you&amp;rsquo;re using a different setup.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; I prefer to integrate Zebra Technologies&amp;rsquo; EMDK as a library in the gradle module file. You can find more information about this in the &lt;a href=&#34;http://techdocs.zebra.com/emdk-for-android/4-2/tutorial/tutCreateProjectAndroidStudio/#emdkasadependencyingradlebuild&#34;&gt;EMDK documentation&lt;/a&gt; and in &lt;a href=&#34;http://pietromaggi.com/2015/11/25/building-zebras-emdk-project-using-sdk-platform-23/&#34;&gt;this blog&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;create-a-new-android-project&#34;&gt;Create a new Android project&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mx_home_btn/AndroidNewPrj_01.png&#34; alt=&#34;Creating a new Android Application, step 1&#34; title=&#34;Creating a new Android Application, step 1&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mx_home_btn/AndroidNewPrj_02.png&#34; alt=&#34;Creating a new Android Application, step 2&#34; title=&#34;Creating a new Android Application, step 2&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mx_home_btn/AndroidNewPrj_03.png&#34; alt=&#34;Creating a new Android Application, step 3&#34; title=&#34;Creating a new Android Application, step 3&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mx_home_btn/AndroidNewPrj_04.png&#34; alt=&#34;Creating a new Android Application, step 4&#34; title=&#34;Creating a new Android Application, step 4&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;add-the-emdk-library-reference-to-the-project&#34;&gt;Add the EMDK library reference to the project&lt;/h3&gt;

&lt;p&gt;Next step is to add a reference to the EMDK library that you need to have already installed on your development machine &lt;a href=&#34;http://techdocs.zebra.com/emdk-for-android/4-2/guide/setup/&#34;&gt;following the Getting Started guide&lt;/a&gt;.  In my case I&amp;rsquo;m using a mac and I need to modify my gradle file as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apply plugin: &#39;com.android.application&#39;

android {
    compileSdkVersion 23
    buildToolsVersion &amp;quot;23.0.3&amp;quot;

    defaultConfig {
        applicationId &amp;quot;com.pietromaggi.sample.mxhomebutton&amp;quot;
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName &amp;quot;1.0&amp;quot;
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;
        }
    }
}

dependencies {
    provided fileTree(include: [&#39;com.symbol.emdk.jar&#39;], dir: &#39;/Applications/androidSDK/add-ons/addon-symbol-emdk_v4.2-API-16/libs/&#39;)
    compile fileTree(exclude: [&#39;com.symbol.emdk.jar&#39;], dir: &#39;libs&#39;)
    testCompile &#39;junit:junit:4.12&#39;
    compile &#39;com.android.support:appcompat-v7:23.4.0&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;add-the-emdk-library-and-permission-reference-to-the-android-manifest-xml-file&#34;&gt;Add the EMDK library and permission reference to the Android Manifest XML file&lt;/h3&gt;

&lt;p&gt;Next we need to update the AndroidManifest.xml file to add the requirement of having the EMDK library and requesting the EMDK permission:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;manifest xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    package=&amp;quot;com.pietromaggi.sample.mxhomebutton&amp;quot;&amp;gt;

    &amp;lt;uses-permission android:name=&amp;quot;com.symbol.emdk.permission.EMDK&amp;quot; /&amp;gt;

    &amp;lt;application
        android:allowBackup=&amp;quot;true&amp;quot;
        android:icon=&amp;quot;@mipmap/ic_launcher&amp;quot;
        android:label=&amp;quot;@string/app_name&amp;quot;
        android:supportsRtl=&amp;quot;true&amp;quot;
        android:theme=&amp;quot;@style/AppTheme&amp;quot;&amp;gt;

        &amp;lt;uses-library android:name=&amp;quot;com.symbol.emdk&amp;quot; /&amp;gt;

        &amp;lt;activity android:name=&amp;quot;.MainActivity&amp;quot;&amp;gt;
            &amp;lt;intent-filter&amp;gt;
                &amp;lt;action android:name=&amp;quot;android.intent.action.MAIN&amp;quot; /&amp;gt;

                &amp;lt;category android:name=&amp;quot;android.intent.category.LAUNCHER&amp;quot; /&amp;gt;
            &amp;lt;/intent-filter&amp;gt;
        &amp;lt;/activity&amp;gt;
    &amp;lt;/application&amp;gt;

&amp;lt;/manifest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-the-mx-profile-to-disable-the-home-button&#34;&gt;Create the Mx Profile to disable the Home Button&lt;/h3&gt;

&lt;p&gt;We can use EMDK&amp;rsquo;s Wizard to create the&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mx_home_btn/EMDKWizard_01.png&#34; alt=&#34;Create EMDK UIManager Profile, step 1&#34; title=&#34;Create EMDK UIManager Profile, step 1&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mx_home_btn/EMDKWizard_02.png&#34; alt=&#34;Create EMDK UIManager Profile, step 2&#34; title=&#34;Create EMDK UIManager Profile, step 2&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mx_home_btn/EMDKWizard_03.png&#34; alt=&#34;Create EMDK UIManager Profile, step 3&#34; title=&#34;Create EMDK UIManager Profile, step 3&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mx_home_btn/EMDKWizard_04.png&#34; alt=&#34;Create EMDK UIManager Profile, step 4&#34; title=&#34;Create EMDK UIManager Profile, step 4&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In this way we obtain this profile to disable the home button:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!--This is an auto generated document. Changes to this document may cause incorrect behavior.--&amp;gt;
&amp;lt;wap-provisioningdoc&amp;gt;
    &amp;lt;characteristic type=&amp;quot;ProfileInfo&amp;quot;&amp;gt;
        &amp;lt;parm name=&amp;quot;created_wizard_version&amp;quot; value=&amp;quot;4.1.1&amp;quot;/&amp;gt;
    &amp;lt;/characteristic&amp;gt;
    &amp;lt;characteristic type=&amp;quot;Profile&amp;quot;&amp;gt;
        &amp;lt;parm name=&amp;quot;ProfileName&amp;quot; value=&amp;quot;HomeButton&amp;quot;/&amp;gt;
        &amp;lt;parm name=&amp;quot;ModifiedDate&amp;quot; value=&amp;quot;2016-08-01 14:12:10&amp;quot;/&amp;gt;
        &amp;lt;parm name=&amp;quot;TargetSystemVersion&amp;quot; value=&amp;quot;4.4&amp;quot;/&amp;gt;
        &amp;lt;characteristic type=&amp;quot;UiMgr&amp;quot; version=&amp;quot;4.3&amp;quot;&amp;gt;
        &amp;lt;parm name=&amp;quot;emdk_name&amp;quot; value=&amp;quot;&amp;quot;/&amp;gt;
        &amp;lt;parm name=&amp;quot;HomeKeyUsage&amp;quot; value=&amp;quot;2&amp;quot;/&amp;gt;
        &amp;lt;/characteristic&amp;gt;
    &amp;lt;/characteristic&amp;gt;
&amp;lt;/wap-provisioningdoc&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;add-handling-of-emdk-profile-apis-in-mainactivity&#34;&gt;Add handling of EMDK Profile APIs in MainActivity&lt;/h3&gt;

&lt;p&gt;Here we can follow along EMDK documentation&amp;rsquo;s &lt;a href=&#34;http://techdocs.zebra.com/emdk-for-android/4-2/tutorial/tutdatacaptureprofile/&#34;&gt;Data Capture Profile Feature Tutorial&lt;/a&gt;.&lt;br /&gt;
First step is to implement the EMDKListener interface in the MainActivity class, obtaining this code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.pietromaggi.sample.mxhomebutton;

import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;

import com.symbol.emdk.EMDKManager;

public class MainActivity extends AppCompatActivity implements EMDKManager.EMDKListener {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }

    @Override
    public void onOpened(EMDKManager emdkManager) {

    }

    @Override
    public void onClosed() {

    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;ve now to request an EMDKMAnager Instance and, in the &lt;code&gt;onOpened&lt;/code&gt; callback, get an instance of the Profile Manager to process the profile we created at the previous step.&lt;/p&gt;

&lt;p&gt;Again, this is just a cut and past from the &lt;a href=&#34;http://techdocs.zebra.com/emdk-for-android/4-2/tutorial/tutdatacaptureprofile/&#34;&gt;Data Capture Profile Feature Tutorial&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.pietromaggi.sample.mxhomebutton;

import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.widget.Toast;

import com.symbol.emdk.EMDKManager;
import com.symbol.emdk.EMDKResults;
import com.symbol.emdk.ProfileManager;

public class MainActivity extends AppCompatActivity implements EMDKManager.EMDKListener {

    private EMDKManager emdkManager;
    private ProfileManager mProfileManager;
    private String profileName = &amp;quot;HomeButton&amp;quot;;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        //The EMDKManager object will be created and returned in the callback.
        EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), this);

        //Check the return status of getEMDKManager
        if(results.statusCode != EMDKResults.STATUS_CODE.SUCCESS)
        {
            //Failed to create EMDKManager object
            Toast.makeText(this, &amp;quot;Error retrieving EMDK Manager instance.&amp;quot;, Toast.LENGTH_SHORT);
        }
    }

    @Override
    public void onOpened(EMDKManager emdkManager) {
        this.emdkManager = emdkManager;
        //Get the ProfileManager object to process the profiles
        mProfileManager = (ProfileManager) emdkManager.getInstance(EMDKManager.FEATURE_TYPE.PROFILE);

        if(mProfileManager != null)
        {
            try{

                String[] modifyData = new String[1];
                //Call processProfile with profile name and SET flag to create the profile. The modifyData can be null.

                EMDKResults results = mProfileManager.processProfile(profileName, ProfileManager.PROFILE_FLAG.SET, modifyData);
                if(results.statusCode == EMDKResults.STATUS_CODE.FAILURE)
                {
                    //Failed to set profile
                }
            }catch (Exception ex){
                // Handle any exception
            }


        }
    }

    @Override
    public void onClosed() {

    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        //Clean up the objects created by EMDK manager
        emdkManager.release();
    }
}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we run this application on a Zebra device with Mx v4.3+ we see that it disables the Home Button.&lt;br /&gt;
Notes that this is not a kiosk mode, settings and notifications are still available and you need to use other Mx Profiles to disable these.  However, this setting is now persisted on the device even if you reset it.  To revert back to the default you need to do an &lt;em&gt;Enterprise Reset&lt;/em&gt; or a &lt;em&gt;Factory Reset&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;add-a-small-interface-to-enable-disable-the-home-button&#34;&gt;Add a small interface to enable/disable the home button&lt;/h3&gt;

&lt;p&gt;To complete this sample could be useful to add a small UI that allows to enable/disable the home button; something like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mx_home_btn/AppUI.png&#34; alt=&#34;Sample UI with Toggle Button&#34; title=&#34;Sample UI with Toggle Button&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is the new layout file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;RelativeLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    xmlns:tools=&amp;quot;http://schemas.android.com/tools&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;match_parent&amp;quot;
    android:paddingBottom=&amp;quot;@dimen/activity_vertical_margin&amp;quot;
    android:paddingLeft=&amp;quot;@dimen/activity_horizontal_margin&amp;quot;
    android:paddingRight=&amp;quot;@dimen/activity_horizontal_margin&amp;quot;
    android:paddingTop=&amp;quot;@dimen/activity_vertical_margin&amp;quot;
    tools:context=&amp;quot;com.pietromaggi.sample.mxhomebutton.MainActivity&amp;quot;&amp;gt;

    &amp;lt;LinearLayout
        android:orientation=&amp;quot;horizontal&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:layout_centerHorizontal=&amp;quot;true&amp;quot;&amp;gt;

        &amp;lt;TextView
            android:layout_width=&amp;quot;wrap_content&amp;quot;
            android:layout_height=&amp;quot;wrap_content&amp;quot;
            android:text=&amp;quot;@string/home_button_status&amp;quot;
            android:layout_centerHorizontal=&amp;quot;true&amp;quot; /&amp;gt;

        &amp;lt;ToggleButton
            android:id=&amp;quot;@+id/tgHomeButton&amp;quot;
            android:layout_width=&amp;quot;wrap_content&amp;quot;
            android:layout_height=&amp;quot;wrap_content&amp;quot;
            android:textOn=&amp;quot;Enabled&amp;quot;
            android:textOff=&amp;quot;Disabled&amp;quot; /&amp;gt;


    &amp;lt;/LinearLayout&amp;gt;
&amp;lt;/RelativeLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this is the code taking care of the click event for the toggle button. You can find here the whole onCreate callback:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    //The EMDKManager object will be created and returned in the callback.
    EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), this);

    final ToggleButton tgHomeButton = (ToggleButton)findViewById(R.id.tgHomeButton);

    //Check the return status of getEMDKManager
    if(results.statusCode != EMDKResults.STATUS_CODE.SUCCESS)
    {
        //Failed to create EMDKManager object
        Toast.makeText(this, &amp;quot;Error retrieving EMDK Manager instance.&amp;quot;, Toast.LENGTH_SHORT);
        tgHomeButton.setEnabled(false);
    } else {
        tgHomeButton.setEnabled(true);

        tgHomeButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(mProfileManager != null)
                {
                    try{

                        String[] modifyData = new String[1];

                        boolean on = ((ToggleButton) v).isChecked();
                            modifyData[0] =
                                    &amp;quot;&amp;lt;?xml version=\&amp;quot;1.0\&amp;quot; encoding=\&amp;quot;UTF-8\&amp;quot;?&amp;gt;&amp;lt;!--This is an auto generated document. Changes to this document may cause incorrect behavior.--&amp;gt;&amp;lt;wap-provisioningdoc&amp;gt;\n&amp;quot; +
                                    &amp;quot;  &amp;lt;characteristic type=\&amp;quot;ProfileInfo\&amp;quot;&amp;gt;\n&amp;quot; +
                                    &amp;quot;    &amp;lt;parm name=\&amp;quot;created_wizard_version\&amp;quot; value=\&amp;quot;4.1.1\&amp;quot;/&amp;gt;\n&amp;quot; +
                                    &amp;quot;  &amp;lt;/characteristic&amp;gt;\n&amp;quot; +
                                    &amp;quot;  &amp;lt;characteristic type=\&amp;quot;Profile\&amp;quot;&amp;gt;\n&amp;quot; +
                                    &amp;quot;    &amp;lt;parm name=\&amp;quot;ProfileName\&amp;quot; value=\&amp;quot;HomeButton\&amp;quot;/&amp;gt;\n&amp;quot; +
                                    &amp;quot;    &amp;lt;parm name=\&amp;quot;ModifiedDate\&amp;quot; value=\&amp;quot;2016-08-01 16:30:10\&amp;quot;/&amp;gt;\n&amp;quot; +
                                    &amp;quot;    &amp;lt;parm name=\&amp;quot;TargetSystemVersion\&amp;quot; value=\&amp;quot;4.4\&amp;quot;/&amp;gt;\n&amp;quot; +
                                    &amp;quot;    &amp;lt;characteristic type=\&amp;quot;UiMgr\&amp;quot; version=\&amp;quot;4.3\&amp;quot;&amp;gt;\n&amp;quot; +
                                    &amp;quot;      &amp;lt;parm name=\&amp;quot;emdk_name\&amp;quot; value=\&amp;quot;\&amp;quot;/&amp;gt;\n&amp;quot; +
                                    &amp;quot;      &amp;lt;parm name=\&amp;quot;HomeKeyUsage\&amp;quot; value=\&amp;quot;&amp;quot; + (on?&amp;quot;1&amp;quot;:&amp;quot;2&amp;quot;) + &amp;quot;\&amp;quot;/&amp;gt;\n&amp;quot; +
                                    &amp;quot;    &amp;lt;/characteristic&amp;gt;\n&amp;quot; +
                                    &amp;quot;  &amp;lt;/characteristic&amp;gt;\n&amp;quot; +
                                    &amp;quot;&amp;lt;/wap-provisioningdoc&amp;gt;\n&amp;quot;;

                        //Call processProfile with profile name and SET flag to create the profile. The modifyData can be null.
                        EMDKResults results = mProfileManager.processProfile(profileName, ProfileManager.PROFILE_FLAG.SET, modifyData);
                        if(results.statusCode == EMDKResults.STATUS_CODE.FAILURE)
                        {
                            //Failed to set profile
                            Toast.makeText(MainActivity.this, &amp;quot;Failed to set the new profile&amp;quot;, Toast.LENGTH_SHORT).show();
                        } else if (results.statusCode == EMDKResults.STATUS_CODE.CHECK_XML) {
                            String responseXML = results.getStatusString();
                            if (responseXML.contains(&amp;quot;error&amp;quot;)) {
                                Toast.makeText(MainActivity.this, &amp;quot;Failed to set the new profile&amp;quot;, Toast.LENGTH_SHORT).show();
                            }
                        }
                    }catch (Exception ex){
                        // Handle any exception
                        Toast.makeText(MainActivity.this, &amp;quot;Failed to set the new profile&amp;quot;, Toast.LENGTH_SHORT).show();
                    }


                }
            }

        });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Mx is getting better and better, and the latest version have introduced some interesting additional features and more are going to be added in the future.&lt;br /&gt;
I hope that this small blog has made this clear and you can find more interesting suggestion on EMDK official documentation.&lt;/p&gt;

&lt;p&gt;For now I leave you with a video of the app working and the complete source code of the project available on github.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mx_home_btn/AppUI.gif&#34; alt=&#34;Sample UI with Toggle Button&#34; title=&#34;Sample UI with Toggle Button&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;http://pietromaggi.com/2016/01/18/disabling-mc40-home-button-with-a-custom-intent/&#34;&gt;Disabling MC40 Home Button with a custom intent&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;http://techdocs.zebra.com/emdk-for-android/4-2/mx/uimgr/#homekey-enabledisable&#34;&gt;UI Manager documentation&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Disabling MC40 Home Button with a custom intent</title>
      <link>http://pietromaggi.com/2016/01/18/disabling-mc40-home-button-with-a-custom-intent/</link>
      <pubDate>Mon, 18 Jan 2016 09:00:00 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2016/01/18/disabling-mc40-home-button-with-a-custom-intent/</guid>
      <description>

&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;Zebra Technologies&amp;rsquo; devices are purpose built to be single use devices. Having an OS like Android nowadays provides a lot of flexibility&amp;hellip;  sometimes a bit too much.&lt;br /&gt;
With this idea in mind, the Android version used on these devices sometimes provide some nice surprise, like an Intent to disable the omnipresent Android&amp;rsquo;s Home button.&lt;/p&gt;

&lt;h2 id=&#34;the-basic-idea&#34;&gt;The basic idea&lt;/h2&gt;

&lt;p&gt;MC40 support an &lt;a href=&#34;http://developer.android.com/reference/android/content/Intent.html&#34;&gt;Android intent&lt;/a&gt; to disable the normal Home button behavior: &lt;em&gt;You can disable it and there&amp;rsquo;s no way to exit from the foreground application&lt;/em&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.zebra.com/community/android/android-forums/android-blogs/blog/2014/12/19/disabling-home-button-via-intent-mc40&#34;&gt;You can find a blog by Pavel Machala briefly describing the idea on Launchpad&lt;/a&gt;.&lt;br /&gt;
Here I want to present a simple sample that show how to use this intent, covering the only issue that is: &lt;em&gt;handling re-branded devices&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;project-setup&#34;&gt;Project setup&lt;/h2&gt;

&lt;p&gt;We start creating a new Android application in Android Studio (I&amp;rsquo;m using Android Studio v1.5.1 with Build tools 23.0.1, you&amp;rsquo;re mileage can vary if you&amp;rsquo;re using a different setup).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; is not required to build this application using Zebra Technologies&amp;rsquo; EMDK. A normal Android application can use this intent.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/AndroidNewPrj_01.jpg&#34; alt=&#34;Creating a new Android Application, step 1&#34; title=&#34;Creating a new Android Application, step 1&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/AndroidNewPrj_02.jpg&#34; alt=&#34;Creating a new Android Application, step 2&#34; title=&#34;Creating a new Android Application, step 2&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/AndroidNewPrj_03.jpg&#34; alt=&#34;Creating a new Android Application, step 3&#34; title=&#34;Creating a new Android Application, step 3&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/AndroidNewPrj_04.jpg&#34; alt=&#34;Creating a new Android Application, step 4&#34; title=&#34;Creating a new Android Application, step 4&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once we&amp;rsquo;ve the app framework setup by Android Studio, we can simplify the interface down to a Status message and a button.&lt;br /&gt;
First step: remove &lt;code&gt;content_main.xml&lt;/code&gt; and &lt;code&gt;menu_main&lt;/code&gt; then replace the content of &lt;code&gt;activity_main.xml&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;match_parent&amp;quot;
    android:gravity=&amp;quot;center&amp;quot;
    android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;
                    
    &amp;lt;TextView
        android:id=&amp;quot;@+id/tvwHomeBtnStatus&amp;quot;
        android:layout_width=&amp;quot;wrap_content&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot; 
        android:padding=&amp;quot;24dp&amp;quot;
        android:text=&amp;quot;@string/home_btn_status_on&amp;quot;/&amp;gt;

    &amp;lt;Button
        android:id=&amp;quot;@+id/btnToggleStatus&amp;quot;
        android:layout_width=&amp;quot;wrap_content&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot; 
        android:text=&amp;quot;@string/toggle&amp;quot;/&amp;gt;
&amp;lt;/LinearLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This layout requires the following &lt;code&gt;string.xml&lt;/code&gt; inside the &lt;code&gt;res/values&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;resources&amp;gt;
    &amp;lt;string name=&amp;quot;app_name&amp;quot;&amp;gt;MC40HomeButton&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;home_btn_status_on&amp;quot;&amp;gt;Home Button Enabled&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;home_btn_status_off&amp;quot;&amp;gt;Home Button Disabled&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;toggle&amp;quot;&amp;gt;Toggle current device setting&amp;lt;/string&amp;gt;
&amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/Strings.jpg&#34; alt=&#34;Our Strings.xml at this point&#34; title=&#34;Our Strings.xml at this point&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can now remove a lot of the generated template code in &lt;code&gt;MainActivity.java&lt;/code&gt; trimming down the code to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.pietromaggi.sample.mc40homebutton;

import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }
}                                
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we run the application at this moment, it&amp;rsquo;s not doing a lot :-)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/Screenshot_tag1.png&#34; alt=&#34;MC40 Screenshot of the app as recorded at tag1&#34; title=&#34;MC40 Screenshot of the app as recorded at tag1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can find the app at this stage &lt;a href=&#34;https://github.com/pfmaggi/mc40_homebutton/tree/tag1&#34;&gt;on the github repository under the &lt;code&gt;tag1&lt;/code&gt; tag&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next step would be to check that we&amp;rsquo;re really running on a Zebra Technologies&amp;rsquo; MC40, and then adding some logic to the app.&lt;/p&gt;

&lt;h2 id=&#34;dealing-with-multiple-os-versions-and-re-branding&#34;&gt;Dealing with multiple OS versions and re-branding&lt;/h2&gt;

&lt;p&gt;First we check that we&amp;rsquo;re running on a Zebra&amp;rsquo;s MC40 using a couple of Android constant:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;android.os.Build.MANUFACTURER&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;android.os.Build.MODEL&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The catch is that MC40, running Jelly Bean, report &amp;laquo;Motorola Solution&amp;raquo; as &lt;code&gt;MANUFACTURER&lt;/code&gt;, we need to address this difference and, as reported in &lt;a href=&#34;https://developer.zebra.com/community/android/android-forums/android-blogs/blog/2014/12/19/disabling-home-button-via-intent-mc40&#34;&gt;Pavel&amp;rsquo;s notes&lt;/a&gt;, the broadcast intent action is different for Motorola Solution or Zebra&amp;rsquo;s MC40.&lt;/p&gt;

&lt;p&gt;Once we&amp;rsquo;ve seen if the device the app is running on is supported, we can send a first Intent, to disable the home button, and configure the toggle button, so that is really toggle the Home Button status from disable to enabled and vice versa.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.pietromaggi.sample.mc40homebutton;

import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

public class MainActivity extends AppCompatActivity {
  private static final String MANUFACTURER_ZEBRA = &amp;quot;Zebra Technologies&amp;quot;;
  private static final String MANUFACTURER_MSI = &amp;quot;Motorola Solutions&amp;quot;;
  private static final String MODEL_MC40 = &amp;quot;MC40N0&amp;quot;;
  private static final String INTENT_ZEBRA = &amp;quot;com.symbol.intent.action.HOMEKEY_MODE&amp;quot;;
  private static final String INTENT_MSI = &amp;quot;com.motorolasolutions.intent.action.HOMEKEY_MODE&amp;quot;;
  private static final String INTENT_EXTRA = &amp;quot;state&amp;quot;;
  private String mStrIntent;
  private TextView mTvwStatus;
  private int mStatus;

  @Override
  protected void onCreate(Bundle savedInstanceState) {
    String StrManufacturer = Build.MANUFACTURER;
    String strModel = Build.MODEL;
    boolean bSupported = true;

    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    mTvwStatus = (TextView) findViewById(R.id.tvwHomeBtnStatus);

    if (strModel.equalsIgnoreCase(MODEL_MC40)) {
      // We&#39;re running on an MC40
      if (StrManufacturer.equalsIgnoreCase(MANUFACTURER_ZEBRA)) {
        // This is a Zebra Device
        mStrIntent = INTENT_ZEBRA;
      } else if (StrManufacturer.equalsIgnoreCase(MANUFACTURER_MSI)) {
        // This is a Motorola Solution Device
        // just double OS version, only Jelly Bean is supported
        mStrIntent = INTENT_MSI;
        if (Build.VERSION_CODES.JELLY_BEAN != Build.VERSION.SDK_INT) {
          bSupported = false;
        }

      }
    } else {
      // This is something else, not supported
      bSupported = false;
    }

    Button btnToggle = (Button)findViewById(R.id.btnToggleStatus);
    if (bSupported) {
      mTvwStatus.setText(R.string.home_btn_status_off);
      mStatus = 0;
      Intent i = new Intent(mStrIntent);
      i.putExtra(INTENT_EXTRA, mStatus);
      sendBroadcast(i);

      btnToggle.setOnClickListener(new View.OnClickListener() {
          @Override
          public void onClick(View v) {
          //Toggle Current Status
          if (0 == mStatus) {
            mStatus = 1;
            mTvwStatus.setText(R.string.home_btn_status_on);
          } else {
            mStatus = 0;
            mTvwStatus.setText(R.string.home_btn_status_off);
          }
          Intent i = new Intent(mStrIntent);
          i.putExtra(INTENT_EXTRA, mStatus);
          sendBroadcast(i);
        }
      });
    } else {
      mTvwStatus.setText(R.string.device_not_supported);
      btnToggle.setEnabled(false);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we run the application on a supported device, we get the expected behavior:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/Screenshot_tag2.png&#34; alt=&#34;MC40 Screenshot of the app as recorded at tag2&#34; title=&#34;MC40 Screenshot of the app as recorded at tag2&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;managing-state&#34;&gt;Managing state&lt;/h2&gt;

&lt;p&gt;The application now works as expected, but with an issue linked to not managing the state. As an example, simply rotating the device, the Activity is destroyed to create a new one with the standard behavior to disable the Home Button, even if we just re-enabled it using the &lt;code&gt;toggle&lt;/code&gt; button.&lt;br /&gt;
An easy solution is to add some code to manage the Application status overriding the &lt;code&gt;onSaveInstanceState(Bundle)&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
public void onSaveInstanceState(Bundle savedInstanceState) {
  super.onSaveInstanceState(savedInstanceState);
  savedInstanceState.putInt(KEY_STATE, mState);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And update the &lt;a href=&#34;https://github.com/pfmaggi/mc40_homebutton/blob/tag3/app/src/main/java/com/pietromaggi/sample/mc40homebutton/MainActivity.java#L55&#34;&gt;&lt;code&gt;onCreate&lt;/code&gt; method to check the bundle to see if it&amp;rsquo;s defined and behave accordingly&lt;/a&gt;.&lt;br /&gt;
The final version of the application, managing the state, can be find on github associated to &lt;a href=&#34;https://github.com/pfmaggi/mc40_homebutton/tree/tag3&#34;&gt;tag3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let me know if you&amp;rsquo;ve found this article useful.&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;notes&#34;&gt;Notes&lt;/h5&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;If your app locks down a few other things or you&amp;rsquo;re using something like Zebra&amp;rsquo;s &lt;a href=&#34;https://www.zebra.com/us/en/products/software/mobile-computers/mobile-app-utilities/enterprise-home-screen.html&#34;&gt;Enterprise Home Screen&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Building Zebra&#39;s EMDK project using SDK Platform 23</title>
      <link>http://pietromaggi.com/2015/11/25/building-zebras-emdk-project-using-sdk-platform-23/</link>
      <pubDate>Wed, 25 Nov 2015 09:54:55 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2015/11/25/building-zebras-emdk-project-using-sdk-platform-23/</guid>
      <description>

&lt;h1 id=&#34;note-emdk-4-0-is-now-documenting-this-method-to-add-com-symbol-emdk-jar-as-a-dependency-http-techdocs-zebra-com-emdk-for-android-4-0-tutorial-tutcreateprojectandroidstudio-emdkasadependencyingradlebuild&#34;&gt;Note: &lt;a href=&#34;http://techdocs.zebra.com/emdk-for-android/4-0/tutorial/tutCreateProjectAndroidStudio/#emdkasadependencyingradlebuild&#34;&gt;EMDK 4.0 is now documenting this method to add com.symbol.emdk.jar as a dependency&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;There&amp;rsquo;s a recurring question coming to me and to Launchpad&amp;rsquo;s forums lately:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.zebra.com/message/86287#86287&#34;&gt;&lt;em&gt;How can I compile my Android app, using Zebra&amp;rsquo;s EMDK, if I need the latest support library?&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;some-background&#34;&gt;Some background&lt;/h1&gt;

&lt;p&gt;With the Android tools moving super-fast (Android studio v1.0 launched at the beginning of 2015, the latest stable release is v1.4.1, we already have v1.5RC and v2.0 has been announced&amp;hellip;) keeping up to this pace is not easy for our EMDK team!&lt;/p&gt;

&lt;p&gt;We discovered some integration issues when Android Studio v1.3 was released and &lt;a href=&#34;https://developer.zebra.com/community/android/android-forums/android-blogs/blog/2015/08/21/announcement-emdk-issue-with-android-studio-13-new-project-wizard&#34;&gt;we presented a workaround&lt;/a&gt; to use the EMDK as the building SDK. Limiting the project to API level 16 or 19. This should be good, right?&lt;/p&gt;

&lt;p&gt;A downside of this approach surfaced when Google updated the templates for new projects, now based on the Android Support Library. I really like the approach to base new projects on the support library; the problem is that it does require to build the project with API level 21+.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here we can have a problem&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;using-zebra-s-emdk&#34;&gt;Using Zebra&amp;rsquo;s EMDK&lt;/h1&gt;

&lt;p&gt;So, talking just about Android Studio, that is the current up-to-date Android IDE, we currently document two ways to use the EMDK:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://techdocs.zebra.com/emdk-for-android/4-0/tutorial/tutCreateProjectAndroidStudio/#setemdkapi19ascompilesdkinprojectstructure&#34;&gt;The official one&lt;/a&gt;, selecting the EMDK in the &amp;laquo;Compile SDK&amp;raquo; drop-down when creating the project&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.zebra.com/community/android/android-forums/android-blogs/blog/2015/08/21/announcement-emdk-issue-with-android-studio-13-new-project-wizard&#34;&gt;The Android Studio v1.3+ workaround way&lt;/a&gt; that suggest to manually set the EMDK as the &amp;laquo;Compile SDK&amp;raquo;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both methods fails to compile a project using the latest Android Support Library.&lt;/p&gt;

&lt;h1 id=&#34;a-little-gradle-magic&#34;&gt;A little gradle magic&lt;/h1&gt;

&lt;p&gt;Here&amp;rsquo;s a third, &lt;strong&gt;UNOFFICIAL&lt;/strong&gt;, way to include the EMDK in an Android project and use the latest available SDK to build the project.&lt;/p&gt;

&lt;h2 id=&#34;copy-the-lib-file-in-your-project&#34;&gt;Copy the lib file in your project&lt;/h2&gt;

&lt;p&gt;First of all, create in your Android project a lib folder and copy into it the com.symbol.emdk.jar library that you got installing the EMDK on your PC/Mac:&lt;/p&gt;

&lt;p&gt;This is probably easier to say than to do, because the default Android Studio project view doesn&amp;rsquo;t show these files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/EMDK_gradle/Android_Project1.jpg&#34; alt=&#34;Default Android Project Panel&#34; title=&#34;Default Android Project Panel&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The easiest way, at least for me, is to copy the file from the setup position to a newly created &lt;code&gt;libs&lt;/code&gt; folder in my project from Windows&amp;rsquo; File Explorer or OSX&amp;rsquo;s Finder and then check that everything is OK switching the Android Studio project view from &amp;laquo;Android&amp;raquo; to &amp;laquo;Project Files&amp;raquo;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/EMDK_gradle/Android_Project2.jpg&#34; alt=&#34;Project Files Panel View&#34; title=&#34;Project Files Panel View&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;modify-the-build-gradle-file&#34;&gt;Modify the build.gradle file&lt;/h2&gt;

&lt;p&gt;OK, once the file is included in our project (and this means that you can check in this file in your SCM and checkout on a new PC and rebuilt it without the need to Zebra EMDK installed) we can explain to Android Studio how to use it. To do this we need to modify the &lt;code&gt;build.gradle&lt;/code&gt; file included in the app folder. If you&amp;rsquo;ve switched back to the &amp;laquo;Android Project view&amp;raquo;, this is the Module: App, gradle file. As shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/EMDK_gradle/gradle_file.jpg&#34; alt=&#34;Gradle file to Edit&#34; title=&#34;Gradle file to Edit&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In this file you need to setup the dependencies so that the build process uses this lib as a reference without including it into the final APK (otherwise the application will exit with and exception when launched).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   dependencies {
       compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;], exclude: [&#39;com.symbol.emdk.jar&#39;])
       compile &#39;com.android.support:appcompat-v7:23.0.1&#39;
       provided fileTree(dir: &#39;libs&#39;, include: [&#39;com.symbol.emdk.jar&#39;])
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this changes you can build your project using the latest available SDK, just remember that you&amp;rsquo;re targeting Zebra devices with API level 16 or 19, so, setup your minimum SDK accordingly.&lt;/p&gt;

&lt;p&gt;You can find a demo app built with this technique &lt;a href=&#34;https://github.com/pfmaggi/GetDeviceInfo_EMDK&#34;&gt;on my github account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy coding&lt;br /&gt;
~Pietro&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finding the SDCard Path on Android devices</title>
      <link>http://pietromaggi.com/2014/10/19/finding-the-sdcard-path-on-android-devices/</link>
      <pubDate>Sun, 19 Oct 2014 20:55:18 +0200</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2014/10/19/finding-the-sdcard-path-on-android-devices/</guid>
      <description>

&lt;p&gt;With Motorola Solutions we&amp;rsquo;re busy finishing the first round of Android Developer&amp;rsquo;s Kitchens around Europe. Just in time to prepare for the &lt;a href=&#34;http://www.motorolasolutionsevents.com/enterprise_appforum_2014/&#34;&gt;Enterprise App Forum in Brussels!&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The nice things of these events is the interaction with our partners and theirs real live problem!&lt;/p&gt;

&lt;p&gt;Last week I got an interesting question regarding our TC55:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can I programmatically get the path for the SDCard on the TC55?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s a good question; usually you don&amp;rsquo;t want to insert in your code the dependency to an hard coded path!
The usual answer is based around the function &lt;code&gt;Environment.getExternalStorageDirectory();&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The problem is that this function report a different folder if the SDCard is inserted in the device or not.
This is not a problem unique to the TC55, it&amp;rsquo;s a common problem on Android and there are different ways to handle it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://futurewithdreams.blogspot.it/2014/01/get-external-sdcard-location-in-android.html&#34;&gt;Reading the partition table from &lt;code&gt;/proc/mounts&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/a/23949650/118862&#34;&gt;Use some environment variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/22219312/android-open-external-storage-directorysdcard-for-storing-file&#34;&gt;Still use the getExternalStorageDirectory() function, together with the isExternalStorageRemovable() and getExternalStorageState() functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given that we&amp;rsquo;ve the luxury to target just a few devices, the Motorola Solutions one :-), the best option is to use the environment variables.&lt;/p&gt;

&lt;h3 id=&#34;let-s-see-what-happens-on-the-tc55&#34;&gt;Let&amp;rsquo;s see what happens on the TC55&lt;/h3&gt;

&lt;p&gt;On this device, using &lt;code&gt;Environment.getExternalStorageDirectory();&lt;/code&gt; returns different results depending if you&amp;rsquo;ve installed or not an SDCard:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Without SDCard —&amp;gt; /&lt;code&gt;STORAGE/SDCARD1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;With SDCard —&amp;gt; &lt;code&gt;/STORAGE/SDCARD0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s see what we can achieve with the environment variables!&lt;/p&gt;

&lt;p&gt;We can log into a TC55 and use the &lt;code&gt;printenv&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;adb shell
printenv

_=/system/bin/printenv
LD_LIBRARY_PATH=/vendor/lib:/system/lib
HOSTNAME=android
BOOTCLASSPATH=/system/framework/core.jar:/system/framework/core-junit.jar:/system/framework/bouncycastle.jar:/system/framework/ext.jar:/system/framework/framework.jar:/system/framework/framework_ext.jar:/system/framework/android.policy.jar:/system/framework/services.jar:/system/framework/apache-xml.jar
PATH=/sbin:/vendor/bin:/system/sbin:/system/bin:/system/xbin
LOOP_MOUNTPOINT=/mnt/obb
ANDROID_DATA=/data
ANDROID_ROOT=/system
SHELL=/system/bin/sh
MKSH=/system/bin/sh
USER=shell
EXTERNAL_SDCARD_STORAGE=/storage/sdcard0
ANDROID_PROPERTY_WORKSPACE=8,49152
EXTERNAL_STORAGE=/storage/sdcard1
ANDROID_ASSETS=/system/app
TERM=vt100
RANDOM=16913
ASEC_MOUNTPOINT=/mnt/asec
SECURE_STORAGE_SDCARD=/storage/sdcard0
HOME=/data
ANDROID_BOOTLOGO=1
MASS_STORAGE=/mnt/udisk
PS1=$(precmd)$USER@$HOSTNAME:${PWD:-?} $
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From this is easy to see that the way to get the SDCard path is to use a couple of environment variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;System.getenv(&amp;laquo;EXTERNAL_STORAGE&amp;raquo;)&lt;/code&gt; —&amp;gt; Internal SDCard &lt;code&gt;/STORAGE/SDCARD1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;System.getenv(&amp;laquo;EXTERNAL_SDCARD_STORAGE&amp;raquo;)&lt;/code&gt; —&amp;gt; True SDCard &lt;code&gt;/STORAGE/SDCARD0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This solutions is still depending on two specific environment variables, is much better than hardcoding the path strings in the application but is probably only acceptable if you&amp;rsquo;re targeting just few devices.
Another point is that, on other devices, you get the true SDCard path linked to the &lt;code&gt;SECONDARY_STORAGE&lt;/code&gt; environment variable. So a better solution could be to check for both variables with something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String strSDCardPath = System.getenv(&amp;quot;SECONDARY_STORAGE&amp;quot;);
if ((null == strSDCardPath) || (strSDCardPath.length() == 0)) {
    strSDCardPath = System.getenv(&amp;quot;EXTERNAL_SDCARD_STORAGE&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we will start to release KitKat based devices it will be even more important taking a look at the right path for these volumes :-)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;EDIT:&lt;/em&gt; I&amp;rsquo;ve a new &lt;a href=&#34;http://pietromaggi.com/2016/01/14/secondary-external-storage-in-android-kitkat---part-1/&#34;&gt;blog post&lt;/a&gt; with additional information for Zebra Technologies KitKat devices.&lt;/p&gt;

&lt;p&gt;You can find in my github account a &lt;a href=&#34;https://github.com/pfmaggi/GetDeviceInfo&#34;&gt;sample application&lt;/a&gt; that retrieves these data.&lt;/p&gt;

&lt;p&gt;Let me know if you find this information useful via &lt;a href=&#34;http://twitter.com/pfmaggi&#34;&gt;twitter @pfmaggi&lt;/a&gt; or &lt;a href=&#34;mailto:pfm@pietromaggi.com&#34;&gt;email&lt;/a&gt; or &lt;a href=&#34;http://www.motorolasolutionsevents.com/enterprise_appforum_2014/&#34;&gt;joining me and the EMEA Software Enablement Team in Brussels for the Enterprise AppForum, our annual developer events&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting device info from MSI Android devices</title>
      <link>http://pietromaggi.com/2014/09/02/getting-device-info-from-msi-android-devices/</link>
      <pubDate>Tue, 02 Sep 2014 11:56:38 +0200</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2014/09/02/getting-device-info-from-msi-android-devices/</guid>
      <description>

&lt;h1 id=&#34;the-good-old-ways&#34;&gt;The good old ways!&lt;/h1&gt;

&lt;p&gt;On Symbol/MSI Windows Mobile devices, we where providing some APIs in the EMDK to get additional information.
Looking into the Resource Coordinator is possible to find APIs like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RCM_GetESN() - retrieves the device electronic serial number&lt;/li&gt;
&lt;li&gt;RCM_GetUniqueUnitId() - retrieves the unique unit identification number&lt;/li&gt;
&lt;li&gt;RCM_GetVersion() - retrieves version information&lt;/li&gt;
&lt;li&gt;etc&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;hellip;and we don&amp;rsquo;t have anything like this in the Android EMDK. WHY?&lt;/p&gt;

&lt;p&gt;Simply because the functionality is already included in the standard Android SDK.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how to get this is data on an MSI device with the Android OS.&lt;/p&gt;

&lt;h1 id=&#34;the-fabulous-new-way&#34;&gt;The fabulous new way!&lt;/h1&gt;

&lt;p&gt;You can find the completed project in &lt;a href=&#34;https://github.com/pfmaggi/GetDeviceInfo&#34;&gt;this repository&lt;/a&gt; on my github account, I&amp;rsquo;m using Windows 7 and Eclipse+ADT, but you can follow these steps with Android Studio quite nicely.&lt;/p&gt;

&lt;h1 id=&#34;create-a-new-project&#34;&gt;Create a new Project&lt;/h1&gt;

&lt;p&gt;Create a new Android project, nothing fancy here, it&amp;rsquo;s just a standard app with a single Blank Activity.
You can follow these images as a guideline. Your interface may vary as Google updates the Android wizard quite often.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/create_project_01.jpg&#34; alt=&#34;Create Project - step 1&#34; title=&#34;Android New Project Wizard - page 1&#34; /&gt;
 &lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/create_project_02.jpg&#34; alt=&#34;Create Project - step 2&#34; title=&#34;Android New Project Wizard - page 2&#34; /&gt;
 &lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/create_project_03.jpg&#34; alt=&#34;Create Project - step 3&#34; title=&#34;Android New Project Wizard - page 3&#34; /&gt;
 &lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/create_project_04.jpg&#34; alt=&#34;Create Project - step 4&#34; title=&#34;Android New Project Wizard - page 4&#34; /&gt;
 &lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/create_project_05.jpg&#34; alt=&#34;Create Project - step 5&#34; title=&#34;Android New Project Wizard - page 5&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then we can do some housekeeping deleting the unnecessary main.xml menu resource:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/delete_menu.jpg&#34; alt=&#34;Delete Menu resource&#34; title=&#34;Delete unnecessary menu resource&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can then start the two main changes:
  - Setting up the Activity Layout
  - Updating the Activity onCreate method to retrieve the device data&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/activity_layout.jpg&#34; alt=&#34;Main Activity Layout&#34; title=&#34;Main Activity Layout&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;

&amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
              android:layout_width=&amp;quot;match_parent&amp;quot;
              android:layout_height=&amp;quot;match_parent&amp;quot;
              android:orientation=&amp;quot;vertical&amp;quot;
    &amp;gt;
    &amp;lt;TextView
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;@string/device_name&amp;quot;
        /&amp;gt;
    &amp;lt;TextView
        android:id=&amp;quot;@+id/device_type&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:layout_marginLeft=&amp;quot;16dp&amp;quot;
        android:layout_marginRight=&amp;quot;16dp&amp;quot;
        android:textSize=&amp;quot;18sp&amp;quot;
        style=&amp;quot;?android:listSeparatorTextViewStyle&amp;quot;
        /&amp;gt;
    &amp;lt;TextView
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;@string/electronic_serial_number&amp;quot;
        /&amp;gt;
    &amp;lt;TextView
        android:id=&amp;quot;@+id/device_esn&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:layout_marginLeft=&amp;quot;16dp&amp;quot;
        android:layout_marginRight=&amp;quot;16dp&amp;quot;
        android:textSize=&amp;quot;18sp&amp;quot;
        style=&amp;quot;?android:listSeparatorTextViewStyle&amp;quot;
        /&amp;gt;
    &amp;lt;TextView
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;@string/build_number&amp;quot;
        /&amp;gt;
    &amp;lt;TextView
        android:id=&amp;quot;@+id/build_number&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:layout_marginLeft=&amp;quot;16dp&amp;quot;
        android:layout_marginRight=&amp;quot;16dp&amp;quot;
        android:textSize=&amp;quot;18sp&amp;quot;
        style=&amp;quot;?android:listSeparatorTextViewStyle&amp;quot;
        /&amp;gt;
&amp;lt;/LinearLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This together with the string.xml containing the referenced string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;resources&amp;gt;

    &amp;lt;string name=&amp;quot;app_name&amp;quot;&amp;gt;Get Device Info&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;electronic_serial_number&amp;quot;&amp;gt;Device ESN:&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;build_number&amp;quot;&amp;gt;Build Number:&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;device_name&amp;quot;&amp;gt;Device:&amp;lt;/string&amp;gt;

&amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the simple Activity java code to collect the information is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.pietromaggi.sample.getdeviceinfo;

import android.os.Build;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.widget.TextView;


public class MainActivity extends ActionBarActivity {
    TextView DeviceNameTextView;
    TextView ESNTextView;
    TextView BuildNumberTextView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        DeviceNameTextView = (TextView)findViewById(R.id.device_type);
        DeviceNameTextView.setText(Build.DEVICE);

        ESNTextView = (TextView)findViewById(R.id.device_esn);
        ESNTextView.setText(Build.SERIAL);

        BuildNumberTextView = (TextView)findViewById(R.id.build_number);
        BuildNumberTextView.setText(Build.ID);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;where-s-the-tricks&#34;&gt;Where&amp;rsquo;s the tricks?&lt;/h1&gt;

&lt;p&gt;There&amp;rsquo;s really no trick, Android SDK provide this information, and more using these constants:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.android.com/reference/android/os/Build.html#DEVICE&#34;&gt;Build.DEVICE = The name of the industrial design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.android.com/reference/android/os/Build.html#SERIAL&#34;&gt;Build.SERIAL = A hardware serial number, if available&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.android.com/reference/android/os/Build.html#ID&#34;&gt;Build.ID = changelist number&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Obviously, it&amp;rsquo;s the OEM building the device that put together the plumbing to link the correct information. Your mileage may vary on different devices.&lt;/p&gt;

&lt;p&gt;Running this application on an ET1 with Jelly Bean you get:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/screen_ET1.png&#34; alt=&#34;ET1 Screenshot&#34; title=&#34;ET1 Screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Running this application on an MC40 with Jelly Bean you get:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/screen_MC40.png&#34; alt=&#34;MC40 Screenshot&#34; title=&#34;MC40 Screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;While the TC55 is always a bit different :-)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/device-info/screen_TC55JB.png&#34; alt=&#34;TC55 Screenshot&#34; title=&#34;TC55 Screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Hope you may find this useful. Send me an email if you&amp;rsquo;d like to see any particular topic on this blog.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>