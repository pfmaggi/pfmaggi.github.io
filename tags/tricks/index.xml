<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tricks on Pietro F. Maggi</title>
    <link>http://pietromaggi.com/tags/tricks/</link>
    <description>Recent content in Tricks on Pietro F. Maggi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>pfm@pietromaggi.com (Pietro F. Maggi)</managingEditor>
    <webMaster>pfm@pietromaggi.com (Pietro F. Maggi)</webMaster>
    <copyright>(c) 2013-2016 Pietro F. Maggi</copyright>
    <lastBuildDate>Mon, 01 Aug 2016 17:00:00 +0200</lastBuildDate>
    <atom:link href="http://pietromaggi.com/tags/tricks/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Disabling Home Button on Zebra Android devices</title>
      <link>http://pietromaggi.com/2016/08/01/disabling-home-button-on-zebra-android-devices/</link>
      <pubDate>Mon, 01 Aug 2016 17:00:00 +0200</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2016/08/01/disabling-home-button-on-zebra-android-devices/</guid>
      <description>

&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;I presented in the past a method to disable the Home Button on Zebra&amp;rsquo;s MC40 Android device, using a custom intent&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;br /&gt;
After having published it, I got some enquiries, about having the same behaviour on other Zebra&amp;rsquo;s devices. Well, it turns out that there&amp;rsquo;s now a &amp;laquo;standard&amp;raquo; way to do this in Zebra&amp;rsquo;s Mx extension using the UI Manager profile. This post is going to show how to implement a simple application that can disable the Home Button on all Zebra&amp;rsquo;s devices that have Mx v4.3 installed&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id=&#34;the-basic-idea&#34;&gt;The basic idea&lt;/h2&gt;

&lt;p&gt;Mx v4.3 introduced the support in the &lt;a href=&#34;http://techdocs.zebra.com/emdk-for-android/4-2/mx/uimgr/#homekey-enabledisable&#34;&gt;UI Manager to disable the Home Button&lt;/a&gt; to disable the normal Home button behavior: &lt;em&gt;You can disable it and there&amp;rsquo;s no way to exit from the foreground application&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;project-setup&#34;&gt;Project setup&lt;/h2&gt;

&lt;p&gt;We start creating a new Android application in Android Studio. I&amp;rsquo;m using Android Studio v2.1.2 with Build tools 23.0.3, and the EMDK v4.2. Your mileage can vary if you&amp;rsquo;re using a different setup.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; I prefer to integrate Zebra Technologies&amp;rsquo; EMDK as a library in the gradle module file. You can find more information about this in the &lt;a href=&#34;http://techdocs.zebra.com/emdk-for-android/4-2/tutorial/tutCreateProjectAndroidStudio/#emdkasadependencyingradlebuild&#34;&gt;EMDK documentation&lt;/a&gt; and in &lt;a href=&#34;http://pietromaggi.com/2015/11/25/building-zebras-emdk-project-using-sdk-platform-23/&#34;&gt;this blog&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;create-a-new-android-project&#34;&gt;Create a new Android project&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mx_home_btn/AndroidNewPrj_01.png&#34; alt=&#34;Creating a new Android Application, step 1&#34; title=&#34;Creating a new Android Application, step 1&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mx_home_btn/AndroidNewPrj_02.png&#34; alt=&#34;Creating a new Android Application, step 2&#34; title=&#34;Creating a new Android Application, step 2&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mx_home_btn/AndroidNewPrj_03.png&#34; alt=&#34;Creating a new Android Application, step 3&#34; title=&#34;Creating a new Android Application, step 3&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mx_home_btn/AndroidNewPrj_04.png&#34; alt=&#34;Creating a new Android Application, step 4&#34; title=&#34;Creating a new Android Application, step 4&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;add-the-emdk-library-reference-to-the-project&#34;&gt;Add the EMDK library reference to the project&lt;/h3&gt;

&lt;p&gt;Next step is to add a reference to the EMDK library that you need to have already installed on your development machine &lt;a href=&#34;http://techdocs.zebra.com/emdk-for-android/4-2/guide/setup/&#34;&gt;following the Getting Started guide&lt;/a&gt;.  In my case I&amp;rsquo;m using a mac and I need to modify my gradle file as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apply plugin: &#39;com.android.application&#39;

android {
    compileSdkVersion 23
    buildToolsVersion &amp;quot;23.0.3&amp;quot;

    defaultConfig {
        applicationId &amp;quot;com.pietromaggi.sample.mxhomebutton&amp;quot;
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName &amp;quot;1.0&amp;quot;
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;
        }
    }
}

dependencies {
    provided fileTree(include: [&#39;com.symbol.emdk.jar&#39;], dir: &#39;/Applications/androidSDK/add-ons/addon-symbol-emdk_v4.2-API-16/libs/&#39;)
    compile fileTree(exclude: [&#39;com.symbol.emdk.jar&#39;], dir: &#39;libs&#39;)
    testCompile &#39;junit:junit:4.12&#39;
    compile &#39;com.android.support:appcompat-v7:23.4.0&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;add-the-emdk-library-and-permission-reference-to-the-android-manifest-xml-file&#34;&gt;Add the EMDK library and permission reference to the Android Manifest XML file&lt;/h3&gt;

&lt;p&gt;Next we need to update the AndroidManifest.xml file to add the requirement of having the EMDK library and requesting the EMDK permission:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;manifest xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    package=&amp;quot;com.pietromaggi.sample.mxhomebutton&amp;quot;&amp;gt;

    &amp;lt;uses-permission android:name=&amp;quot;com.symbol.emdk.permission.EMDK&amp;quot; /&amp;gt;

    &amp;lt;application
        android:allowBackup=&amp;quot;true&amp;quot;
        android:icon=&amp;quot;@mipmap/ic_launcher&amp;quot;
        android:label=&amp;quot;@string/app_name&amp;quot;
        android:supportsRtl=&amp;quot;true&amp;quot;
        android:theme=&amp;quot;@style/AppTheme&amp;quot;&amp;gt;

        &amp;lt;uses-library android:name=&amp;quot;com.symbol.emdk&amp;quot; /&amp;gt;

        &amp;lt;activity android:name=&amp;quot;.MainActivity&amp;quot;&amp;gt;
            &amp;lt;intent-filter&amp;gt;
                &amp;lt;action android:name=&amp;quot;android.intent.action.MAIN&amp;quot; /&amp;gt;

                &amp;lt;category android:name=&amp;quot;android.intent.category.LAUNCHER&amp;quot; /&amp;gt;
            &amp;lt;/intent-filter&amp;gt;
        &amp;lt;/activity&amp;gt;
    &amp;lt;/application&amp;gt;

&amp;lt;/manifest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-the-mx-profile-to-disable-the-home-button&#34;&gt;Create the Mx Profile to disable the Home Button&lt;/h3&gt;

&lt;p&gt;We can use EMDK&amp;rsquo;s Wizard to create the&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mx_home_btn/EMDKWizard_01.png&#34; alt=&#34;Create EMDK UIManager Profile, step 1&#34; title=&#34;Create EMDK UIManager Profile, step 1&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mx_home_btn/EMDKWizard_02.png&#34; alt=&#34;Create EMDK UIManager Profile, step 2&#34; title=&#34;Create EMDK UIManager Profile, step 2&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mx_home_btn/EMDKWizard_03.png&#34; alt=&#34;Create EMDK UIManager Profile, step 3&#34; title=&#34;Create EMDK UIManager Profile, step 3&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mx_home_btn/EMDKWizard_04.png&#34; alt=&#34;Create EMDK UIManager Profile, step 4&#34; title=&#34;Create EMDK UIManager Profile, step 4&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In this way we obtain this profile to disable the home button:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!--This is an auto generated document. Changes to this document may cause incorrect behavior.--&amp;gt;
&amp;lt;wap-provisioningdoc&amp;gt;
    &amp;lt;characteristic type=&amp;quot;ProfileInfo&amp;quot;&amp;gt;
        &amp;lt;parm name=&amp;quot;created_wizard_version&amp;quot; value=&amp;quot;4.1.1&amp;quot;/&amp;gt;
    &amp;lt;/characteristic&amp;gt;
    &amp;lt;characteristic type=&amp;quot;Profile&amp;quot;&amp;gt;
        &amp;lt;parm name=&amp;quot;ProfileName&amp;quot; value=&amp;quot;HomeButton&amp;quot;/&amp;gt;
        &amp;lt;parm name=&amp;quot;ModifiedDate&amp;quot; value=&amp;quot;2016-08-01 14:12:10&amp;quot;/&amp;gt;
        &amp;lt;parm name=&amp;quot;TargetSystemVersion&amp;quot; value=&amp;quot;4.4&amp;quot;/&amp;gt;
        &amp;lt;characteristic type=&amp;quot;UiMgr&amp;quot; version=&amp;quot;4.3&amp;quot;&amp;gt;
        &amp;lt;parm name=&amp;quot;emdk_name&amp;quot; value=&amp;quot;&amp;quot;/&amp;gt;
        &amp;lt;parm name=&amp;quot;HomeKeyUsage&amp;quot; value=&amp;quot;2&amp;quot;/&amp;gt;
        &amp;lt;/characteristic&amp;gt;
    &amp;lt;/characteristic&amp;gt;
&amp;lt;/wap-provisioningdoc&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;add-handling-of-emdk-profile-apis-in-mainactivity&#34;&gt;Add handling of EMDK Profile APIs in MainActivity&lt;/h3&gt;

&lt;p&gt;Here we can follow along EMDK documentation&amp;rsquo;s &lt;a href=&#34;http://techdocs.zebra.com/emdk-for-android/4-2/tutorial/tutdatacaptureprofile/&#34;&gt;Data Capture Profile Feature Tutorial&lt;/a&gt;.&lt;br /&gt;
First step is to implement the EMDKListener interface in the MainActivity class, obtaining this code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.pietromaggi.sample.mxhomebutton;

import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;

import com.symbol.emdk.EMDKManager;

public class MainActivity extends AppCompatActivity implements EMDKManager.EMDKListener {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }

    @Override
    public void onOpened(EMDKManager emdkManager) {

    }

    @Override
    public void onClosed() {

    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;ve now to request an EMDKMAnager Instance and, in the &lt;code&gt;onOpened&lt;/code&gt; callback, get an instance of the Profile Manager to process the profile we created at the previous step.&lt;/p&gt;

&lt;p&gt;Again, this is just a cut and past from the &lt;a href=&#34;http://techdocs.zebra.com/emdk-for-android/4-2/tutorial/tutdatacaptureprofile/&#34;&gt;Data Capture Profile Feature Tutorial&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.pietromaggi.sample.mxhomebutton;

import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.widget.Toast;

import com.symbol.emdk.EMDKManager;
import com.symbol.emdk.EMDKResults;
import com.symbol.emdk.ProfileManager;

public class MainActivity extends AppCompatActivity implements EMDKManager.EMDKListener {

    private EMDKManager emdkManager;
    private ProfileManager mProfileManager;
    private String profileName = &amp;quot;HomeButton&amp;quot;;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        //The EMDKManager object will be created and returned in the callback.
        EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), this);

        //Check the return status of getEMDKManager
        if(results.statusCode != EMDKResults.STATUS_CODE.SUCCESS)
        {
            //Failed to create EMDKManager object
            Toast.makeText(this, &amp;quot;Error retrieving EMDK Manager instance.&amp;quot;, Toast.LENGTH_SHORT);
        }
    }

    @Override
    public void onOpened(EMDKManager emdkManager) {
        this.emdkManager = emdkManager;
        //Get the ProfileManager object to process the profiles
        mProfileManager = (ProfileManager) emdkManager.getInstance(EMDKManager.FEATURE_TYPE.PROFILE);

        if(mProfileManager != null)
        {
            try{

                String[] modifyData = new String[1];
                //Call processProfile with profile name and SET flag to create the profile. The modifyData can be null.

                EMDKResults results = mProfileManager.processProfile(profileName, ProfileManager.PROFILE_FLAG.SET, modifyData);
                if(results.statusCode == EMDKResults.STATUS_CODE.FAILURE)
                {
                    //Failed to set profile
                }
            }catch (Exception ex){
                // Handle any exception
            }


        }
    }

    @Override
    public void onClosed() {

    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        //Clean up the objects created by EMDK manager
        emdkManager.release();
    }
}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we run this application on a Zebra device with Mx v4.3+ we see that it disables the Home Button.&lt;br /&gt;
Notes that this is not a kiosk mode, settings and notifications are still available and you need to use other Mx Profiles to disable these.  However, this setting is now persisted on the device even if you reset it.  To revert back to the default you need to do an &lt;em&gt;Enterprise Reset&lt;/em&gt; or a &lt;em&gt;Factory Reset&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;add-a-small-interface-to-enable-disable-the-home-button&#34;&gt;Add a small interface to enable/disable the home button&lt;/h3&gt;

&lt;p&gt;To complete this sample could be useful to add a small UI that allows to enable/disable the home button; something like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mx_home_btn/AppUI.png&#34; alt=&#34;Sample UI with Toggle Button&#34; title=&#34;Sample UI with Toggle Button&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is the new layout file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;RelativeLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    xmlns:tools=&amp;quot;http://schemas.android.com/tools&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;match_parent&amp;quot;
    android:paddingBottom=&amp;quot;@dimen/activity_vertical_margin&amp;quot;
    android:paddingLeft=&amp;quot;@dimen/activity_horizontal_margin&amp;quot;
    android:paddingRight=&amp;quot;@dimen/activity_horizontal_margin&amp;quot;
    android:paddingTop=&amp;quot;@dimen/activity_vertical_margin&amp;quot;
    tools:context=&amp;quot;com.pietromaggi.sample.mxhomebutton.MainActivity&amp;quot;&amp;gt;

    &amp;lt;LinearLayout
        android:orientation=&amp;quot;horizontal&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:layout_centerHorizontal=&amp;quot;true&amp;quot;&amp;gt;

        &amp;lt;TextView
            android:layout_width=&amp;quot;wrap_content&amp;quot;
            android:layout_height=&amp;quot;wrap_content&amp;quot;
            android:text=&amp;quot;@string/home_button_status&amp;quot;
            android:layout_centerHorizontal=&amp;quot;true&amp;quot; /&amp;gt;

        &amp;lt;ToggleButton
            android:id=&amp;quot;@+id/tgHomeButton&amp;quot;
            android:layout_width=&amp;quot;wrap_content&amp;quot;
            android:layout_height=&amp;quot;wrap_content&amp;quot;
            android:textOn=&amp;quot;Enabled&amp;quot;
            android:textOff=&amp;quot;Disabled&amp;quot; /&amp;gt;


    &amp;lt;/LinearLayout&amp;gt;
&amp;lt;/RelativeLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this is the code taking care of the click event for the toggle button. You can find here the whole onCreate callback:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    //The EMDKManager object will be created and returned in the callback.
    EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), this);

    final ToggleButton tgHomeButton = (ToggleButton)findViewById(R.id.tgHomeButton);

    //Check the return status of getEMDKManager
    if(results.statusCode != EMDKResults.STATUS_CODE.SUCCESS)
    {
        //Failed to create EMDKManager object
        Toast.makeText(this, &amp;quot;Error retrieving EMDK Manager instance.&amp;quot;, Toast.LENGTH_SHORT);
        tgHomeButton.setEnabled(false);
    } else {
        tgHomeButton.setEnabled(true);

        tgHomeButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(mProfileManager != null)
                {
                    try{

                        String[] modifyData = new String[1];

                        boolean on = ((ToggleButton) v).isChecked();
                            modifyData[0] =
                                    &amp;quot;&amp;lt;?xml version=\&amp;quot;1.0\&amp;quot; encoding=\&amp;quot;UTF-8\&amp;quot;?&amp;gt;&amp;lt;!--This is an auto generated document. Changes to this document may cause incorrect behavior.--&amp;gt;&amp;lt;wap-provisioningdoc&amp;gt;\n&amp;quot; +
                                    &amp;quot;  &amp;lt;characteristic type=\&amp;quot;ProfileInfo\&amp;quot;&amp;gt;\n&amp;quot; +
                                    &amp;quot;    &amp;lt;parm name=\&amp;quot;created_wizard_version\&amp;quot; value=\&amp;quot;4.1.1\&amp;quot;/&amp;gt;\n&amp;quot; +
                                    &amp;quot;  &amp;lt;/characteristic&amp;gt;\n&amp;quot; +
                                    &amp;quot;  &amp;lt;characteristic type=\&amp;quot;Profile\&amp;quot;&amp;gt;\n&amp;quot; +
                                    &amp;quot;    &amp;lt;parm name=\&amp;quot;ProfileName\&amp;quot; value=\&amp;quot;HomeButton\&amp;quot;/&amp;gt;\n&amp;quot; +
                                    &amp;quot;    &amp;lt;parm name=\&amp;quot;ModifiedDate\&amp;quot; value=\&amp;quot;2016-08-01 16:30:10\&amp;quot;/&amp;gt;\n&amp;quot; +
                                    &amp;quot;    &amp;lt;parm name=\&amp;quot;TargetSystemVersion\&amp;quot; value=\&amp;quot;4.4\&amp;quot;/&amp;gt;\n&amp;quot; +
                                    &amp;quot;    &amp;lt;characteristic type=\&amp;quot;UiMgr\&amp;quot; version=\&amp;quot;4.3\&amp;quot;&amp;gt;\n&amp;quot; +
                                    &amp;quot;      &amp;lt;parm name=\&amp;quot;emdk_name\&amp;quot; value=\&amp;quot;\&amp;quot;/&amp;gt;\n&amp;quot; +
                                    &amp;quot;      &amp;lt;parm name=\&amp;quot;HomeKeyUsage\&amp;quot; value=\&amp;quot;&amp;quot; + (on?&amp;quot;1&amp;quot;:&amp;quot;2&amp;quot;) + &amp;quot;\&amp;quot;/&amp;gt;\n&amp;quot; +
                                    &amp;quot;    &amp;lt;/characteristic&amp;gt;\n&amp;quot; +
                                    &amp;quot;  &amp;lt;/characteristic&amp;gt;\n&amp;quot; +
                                    &amp;quot;&amp;lt;/wap-provisioningdoc&amp;gt;\n&amp;quot;;

                        //Call processProfile with profile name and SET flag to create the profile. The modifyData can be null.
                        EMDKResults results = mProfileManager.processProfile(profileName, ProfileManager.PROFILE_FLAG.SET, modifyData);
                        if(results.statusCode == EMDKResults.STATUS_CODE.FAILURE)
                        {
                            //Failed to set profile
                            Toast.makeText(MainActivity.this, &amp;quot;Failed to set the new profile&amp;quot;, Toast.LENGTH_SHORT).show();
                        } else if (results.statusCode == EMDKResults.STATUS_CODE.CHECK_XML) {
                            String responseXML = results.getStatusString();
                            if (responseXML.contains(&amp;quot;error&amp;quot;)) {
                                Toast.makeText(MainActivity.this, &amp;quot;Failed to set the new profile&amp;quot;, Toast.LENGTH_SHORT).show();
                            }
                        }
                    }catch (Exception ex){
                        // Handle any exception
                        Toast.makeText(MainActivity.this, &amp;quot;Failed to set the new profile&amp;quot;, Toast.LENGTH_SHORT).show();
                    }


                }
            }

        });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Mx is getting better and better, and the latest version have introduced some interesting additional features and more are going to be added in the future.&lt;br /&gt;
I hope that this small blog has made this clear and you can find more interesting suggestion on EMDK official documentation.&lt;/p&gt;

&lt;p&gt;For now I leave you with a video of the app working and the complete source code of the project available on &lt;a href=&#34;https://github.com/pfmaggi/MxHomeButton&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mx_home_btn/AppUI.gif&#34; alt=&#34;Sample UI with Toggle Button&#34; title=&#34;Sample UI with Toggle Button&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;http://pietromaggi.com/2016/01/18/disabling-mc40-home-button-with-a-custom-intent/&#34;&gt;Disabling MC40 Home Button with a custom intent&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;http://techdocs.zebra.com/emdk-for-android/4-2/mx/uimgr/#homekey-enabledisable&#34;&gt;UI Manager documentation&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Disabling MC40 Home Button with a custom intent</title>
      <link>http://pietromaggi.com/2016/01/18/disabling-mc40-home-button-with-a-custom-intent/</link>
      <pubDate>Mon, 18 Jan 2016 09:00:00 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2016/01/18/disabling-mc40-home-button-with-a-custom-intent/</guid>
      <description>

&lt;h1 id=&#34;note&#34;&gt;Note:&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;http://pietromaggi.com/2016/08/01/disabling-home-button-on-zebra-android-devices/&#34;&gt;I&amp;rsquo;ve published another post that explain how to disable the Home Button on all the Zebra&amp;rsquo;s Android devices that are supported by Mx v4.3+.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;Zebra Technologies&amp;rsquo; devices are purpose built to be single use devices. Having an OS like Android nowadays provides a lot of flexibility&amp;hellip;  sometimes a bit too much.&lt;br /&gt;
With this idea in mind, the Android version used on these devices sometimes provide some nice surprise, like an Intent to disable the omnipresent Android&amp;rsquo;s Home button.&lt;/p&gt;

&lt;h2 id=&#34;the-basic-idea&#34;&gt;The basic idea&lt;/h2&gt;

&lt;p&gt;MC40 support an &lt;a href=&#34;http://developer.android.com/reference/android/content/Intent.html&#34;&gt;Android intent&lt;/a&gt; to disable the normal Home button behavior: &lt;em&gt;You can disable it and there&amp;rsquo;s no way to exit from the foreground application&lt;/em&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.zebra.com/community/android/android-forums/android-blogs/blog/2014/12/19/disabling-home-button-via-intent-mc40&#34;&gt;You can find a blog by Pavel Machala briefly describing the idea on Launchpad&lt;/a&gt;.&lt;br /&gt;
Here I want to present a simple sample that show how to use this intent, covering the only issue that is: &lt;em&gt;handling re-branded devices&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;project-setup&#34;&gt;Project setup&lt;/h2&gt;

&lt;p&gt;We start creating a new Android application in Android Studio (I&amp;rsquo;m using Android Studio v1.5.1 with Build tools 23.0.1, you&amp;rsquo;re mileage can vary if you&amp;rsquo;re using a different setup).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; is not required to build this application using Zebra Technologies&amp;rsquo; EMDK. A normal Android application can use this intent.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/AndroidNewPrj_01.jpg&#34; alt=&#34;Creating a new Android Application, step 1&#34; title=&#34;Creating a new Android Application, step 1&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/AndroidNewPrj_02.jpg&#34; alt=&#34;Creating a new Android Application, step 2&#34; title=&#34;Creating a new Android Application, step 2&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/AndroidNewPrj_03.jpg&#34; alt=&#34;Creating a new Android Application, step 3&#34; title=&#34;Creating a new Android Application, step 3&#34; /&gt;
&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/AndroidNewPrj_04.jpg&#34; alt=&#34;Creating a new Android Application, step 4&#34; title=&#34;Creating a new Android Application, step 4&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once we&amp;rsquo;ve the app framework setup by Android Studio, we can simplify the interface down to a Status message and a button.&lt;br /&gt;
First step: remove &lt;code&gt;content_main.xml&lt;/code&gt; and &lt;code&gt;menu_main&lt;/code&gt; then replace the content of &lt;code&gt;activity_main.xml&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;match_parent&amp;quot;
    android:gravity=&amp;quot;center&amp;quot;
    android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;
                    
    &amp;lt;TextView
        android:id=&amp;quot;@+id/tvwHomeBtnStatus&amp;quot;
        android:layout_width=&amp;quot;wrap_content&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot; 
        android:padding=&amp;quot;24dp&amp;quot;
        android:text=&amp;quot;@string/home_btn_status_on&amp;quot;/&amp;gt;

    &amp;lt;Button
        android:id=&amp;quot;@+id/btnToggleStatus&amp;quot;
        android:layout_width=&amp;quot;wrap_content&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot; 
        android:text=&amp;quot;@string/toggle&amp;quot;/&amp;gt;
&amp;lt;/LinearLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This layout requires the following &lt;code&gt;string.xml&lt;/code&gt; inside the &lt;code&gt;res/values&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;resources&amp;gt;
    &amp;lt;string name=&amp;quot;app_name&amp;quot;&amp;gt;MC40HomeButton&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;home_btn_status_on&amp;quot;&amp;gt;Home Button Enabled&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;home_btn_status_off&amp;quot;&amp;gt;Home Button Disabled&amp;lt;/string&amp;gt;
    &amp;lt;string name=&amp;quot;toggle&amp;quot;&amp;gt;Toggle current device setting&amp;lt;/string&amp;gt;
&amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/Strings.jpg&#34; alt=&#34;Our Strings.xml at this point&#34; title=&#34;Our Strings.xml at this point&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can now remove a lot of the generated template code in &lt;code&gt;MainActivity.java&lt;/code&gt; trimming down the code to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.pietromaggi.sample.mc40homebutton;

import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }
}                                
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we run the application at this moment, it&amp;rsquo;s not doing a lot :-)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/Screenshot_tag1.png&#34; alt=&#34;MC40 Screenshot of the app as recorded at tag1&#34; title=&#34;MC40 Screenshot of the app as recorded at tag1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can find the app at this stage &lt;a href=&#34;https://github.com/pfmaggi/mc40_homebutton/tree/tag1&#34;&gt;on the github repository under the &lt;code&gt;tag1&lt;/code&gt; tag&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next step would be to check that we&amp;rsquo;re really running on a Zebra Technologies&amp;rsquo; MC40, and then adding some logic to the app.&lt;/p&gt;

&lt;h2 id=&#34;dealing-with-multiple-os-versions-and-re-branding&#34;&gt;Dealing with multiple OS versions and re-branding&lt;/h2&gt;

&lt;p&gt;First we check that we&amp;rsquo;re running on a Zebra&amp;rsquo;s MC40 using a couple of Android constant:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;android.os.Build.MANUFACTURER&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;android.os.Build.MODEL&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The catch is that MC40, running Jelly Bean, report &amp;laquo;Motorola Solution&amp;raquo; as &lt;code&gt;MANUFACTURER&lt;/code&gt;, we need to address this difference and, as reported in &lt;a href=&#34;https://developer.zebra.com/community/android/android-forums/android-blogs/blog/2014/12/19/disabling-home-button-via-intent-mc40&#34;&gt;Pavel&amp;rsquo;s notes&lt;/a&gt;, the broadcast intent action is different for Motorola Solution or Zebra&amp;rsquo;s MC40.&lt;/p&gt;

&lt;p&gt;Once we&amp;rsquo;ve seen if the device the app is running on is supported, we can send a first Intent, to disable the home button, and configure the toggle button, so that is really toggle the Home Button status from disable to enabled and vice versa.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.pietromaggi.sample.mc40homebutton;

import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

public class MainActivity extends AppCompatActivity {
  private static final String MANUFACTURER_ZEBRA = &amp;quot;Zebra Technologies&amp;quot;;
  private static final String MANUFACTURER_MSI = &amp;quot;Motorola Solutions&amp;quot;;
  private static final String MODEL_MC40 = &amp;quot;MC40N0&amp;quot;;
  private static final String INTENT_ZEBRA = &amp;quot;com.symbol.intent.action.HOMEKEY_MODE&amp;quot;;
  private static final String INTENT_MSI = &amp;quot;com.motorolasolutions.intent.action.HOMEKEY_MODE&amp;quot;;
  private static final String INTENT_EXTRA = &amp;quot;state&amp;quot;;
  private String mStrIntent;
  private TextView mTvwStatus;
  private int mStatus;

  @Override
  protected void onCreate(Bundle savedInstanceState) {
    String StrManufacturer = Build.MANUFACTURER;
    String strModel = Build.MODEL;
    boolean bSupported = true;

    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    mTvwStatus = (TextView) findViewById(R.id.tvwHomeBtnStatus);

    if (strModel.equalsIgnoreCase(MODEL_MC40)) {
      // We&#39;re running on an MC40
      if (StrManufacturer.equalsIgnoreCase(MANUFACTURER_ZEBRA)) {
        // This is a Zebra Device
        mStrIntent = INTENT_ZEBRA;
      } else if (StrManufacturer.equalsIgnoreCase(MANUFACTURER_MSI)) {
        // This is a Motorola Solution Device
        // just double OS version, only Jelly Bean is supported
        mStrIntent = INTENT_MSI;
        if (Build.VERSION_CODES.JELLY_BEAN != Build.VERSION.SDK_INT) {
          bSupported = false;
        }

      }
    } else {
      // This is something else, not supported
      bSupported = false;
    }

    Button btnToggle = (Button)findViewById(R.id.btnToggleStatus);
    if (bSupported) {
      mTvwStatus.setText(R.string.home_btn_status_off);
      mStatus = 0;
      Intent i = new Intent(mStrIntent);
      i.putExtra(INTENT_EXTRA, mStatus);
      sendBroadcast(i);

      btnToggle.setOnClickListener(new View.OnClickListener() {
          @Override
          public void onClick(View v) {
          //Toggle Current Status
          if (0 == mStatus) {
            mStatus = 1;
            mTvwStatus.setText(R.string.home_btn_status_on);
          } else {
            mStatus = 0;
            mTvwStatus.setText(R.string.home_btn_status_off);
          }
          Intent i = new Intent(mStrIntent);
          i.putExtra(INTENT_EXTRA, mStatus);
          sendBroadcast(i);
        }
      });
    } else {
      mTvwStatus.setText(R.string.device_not_supported);
      btnToggle.setEnabled(false);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we run the application on a supported device, we get the expected behavior:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://pietromaggi.com/images/samples/mc40_home_btn/Screenshot_tag2.png&#34; alt=&#34;MC40 Screenshot of the app as recorded at tag2&#34; title=&#34;MC40 Screenshot of the app as recorded at tag2&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;managing-state&#34;&gt;Managing state&lt;/h2&gt;

&lt;p&gt;The application now works as expected, but with an issue linked to not managing the state. As an example, simply rotating the device, the Activity is destroyed to create a new one with the standard behavior to disable the Home Button, even if we just re-enabled it using the &lt;code&gt;toggle&lt;/code&gt; button.&lt;br /&gt;
An easy solution is to add some code to manage the Application status overriding the &lt;code&gt;onSaveInstanceState(Bundle)&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
public void onSaveInstanceState(Bundle savedInstanceState) {
  super.onSaveInstanceState(savedInstanceState);
  savedInstanceState.putInt(KEY_STATE, mState);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And update the &lt;a href=&#34;https://github.com/pfmaggi/mc40_homebutton/blob/tag3/app/src/main/java/com/pietromaggi/sample/mc40homebutton/MainActivity.java#L55&#34;&gt;&lt;code&gt;onCreate&lt;/code&gt; method to check the bundle to see if it&amp;rsquo;s defined and behave accordingly&lt;/a&gt;.&lt;br /&gt;
The final version of the application, managing the state, can be find on github associated to &lt;a href=&#34;https://github.com/pfmaggi/mc40_homebutton/tree/tag3&#34;&gt;tag3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let me know if you&amp;rsquo;ve found this article useful.&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;notes&#34;&gt;Notes&lt;/h5&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;If your app locks down a few other things or you&amp;rsquo;re using something like Zebra&amp;rsquo;s &lt;a href=&#34;https://www.zebra.com/us/en/products/software/mobile-computers/mobile-app-utilities/enterprise-home-screen.html&#34;&gt;Enterprise Home Screen&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Android Back Button and Enterprise Browser</title>
      <link>http://pietromaggi.com/2015/09/25/android-back-button-and-enterprise-browser/</link>
      <pubDate>Fri, 25 Sep 2015 11:33:11 +0200</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2015/09/25/android-back-button-and-enterprise-browser/</guid>
      <description>

&lt;h2 id=&#34;edit&#34;&gt;Edit&lt;/h2&gt;

&lt;p&gt;Enteprise Browser v1.3 introduced a change that requires to enable &lt;code&gt;FunctionKeysCapturable&lt;/code&gt; to be able to use the KeyCapture API.&lt;br /&gt;
To do this you need to update your &lt;code&gt;Config.xml&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;FunctionKeysCapturable                 value=&amp;quot;1&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;enterprise-browser&#34;&gt;Enterprise Browser&lt;/h2&gt;

&lt;p&gt;Enterprise Browser is Zebra Technologies&amp;rsquo; Industrial Browser built for our Rugged Devices, we support most of our Windows Mobile/Windows CE devices and Android devices.&lt;/p&gt;

&lt;p&gt;This product is usually used with existing web application that cannot be updated/modified moving from one device to another.
This help us winning some opportunities but sometimes present some unique challenges like, as an example, disabling the Android back button default behavior.&lt;/p&gt;

&lt;h2 id=&#34;back-button-on-android&#34;&gt;Back Button on Android?&lt;/h2&gt;

&lt;p&gt;Given that this is a cross-platform product (built on top of our RhoMobile Suite) we don&amp;rsquo;t have a custom settings to disable the back button in the Config.xml configuration file, however it is still possible to add a default Metatags in the configuration so that no changes in the existing pages are needed.&lt;/p&gt;

&lt;p&gt;So, do we&amp;rsquo;ve an API to intercept the Back Button?&lt;/p&gt;

&lt;p&gt;Of course! the &lt;a href=&#34;https://developer.motorolasolutions.com/docs/DOC-2520&#34;&gt;KeyCapture API&lt;/a&gt; can be used to intercept and disable it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;EB.KeyCapture.captureKey(BOOLEAN dispatch, STRING keyValue)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setting the &lt;code&gt;dispatch&lt;/code&gt; value to &lt;code&gt;false&lt;/code&gt;,  We just need to get the correct KeyCode.&lt;/p&gt;

&lt;p&gt;This can a bit tricky and can be different from device to device, the best solution I&amp;rsquo;ve is to ask directly to the device with a simple HTML page that display the keycode off all the keys that are pressed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;META HTTP-Equiv=&amp;quot;KeyCapture&amp;quot; Content=&amp;quot;KeyValue:All; Dispatch:False; KeyEvent:url(&#39;JavaScript:alert(&#39;Key Pressed: %s&#39;);&#39;)&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
	&amp;lt;title&amp;gt;Display KeyCode&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;H1&amp;gt;Press a key to see it&#39;s KeyCode&amp;lt;/H1&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we&amp;rsquo;ve the correct KeyCode, we just need to call this API in every page that is loaded in the browser&amp;hellip; Sometimes that is not easy to do sometimes, especially when the application cannot be modified.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve a solution for this issue: having a &lt;code&gt;DefaultMetaTags&lt;/code&gt; in Enterprise Browser&amp;rsquo;s configuration.&lt;/p&gt;

&lt;h2 id=&#34;what-s-a-defaultmetatags&#34;&gt;What&amp;rsquo;s a DefaultMetaTags&lt;/h2&gt;

&lt;p&gt;We can start from the &lt;a href=&#34;https://developer.motorolasolutions.com/docs/DOC-2571#defaultmetatags&#34;&gt;documentation&lt;/a&gt;, what does it means?&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;DefaultMetaTags&lt;/code&gt; is a way to call an Enterprise Browser API on top of every HTML page that is loaded in the browser. This can be used, as an example to enable on screen UI elements like the battery or WiFi icon.&lt;/p&gt;

&lt;p&gt;So, putting the different things together, we can put this in the &amp;ldquo;Config.xml&amp;rsquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;DefaultMetaTags&amp;gt;
    &amp;lt;MetaTag value=&amp;quot;KeyCapture~KeyValue:0xA6;Dispatch:False&amp;quot;/&amp;gt;
 &amp;lt;/DefaultMetaTags&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BTW: &lt;code&gt;0xA6&lt;/code&gt; is the correct value for the Back Button on a TC55 running Android v4.4 KitKat.&lt;/p&gt;

&lt;h2 id=&#34;closing-comments&#34;&gt;Closing comments&lt;/h2&gt;

&lt;p&gt;Enterprise Browser&amp;rsquo;s &lt;code&gt;DefaultMetaTags&lt;/code&gt; is a very flexible way to &amp;laquo;patch&amp;raquo; an existing Web application without touching its source code.&lt;/p&gt;

&lt;p&gt;As a closing comment here&amp;rsquo;s a sample configuration that zoom the current web page pressing a button:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;MetaTag VALUE=&amp;quot;KeyCapture~KeyValue:0x79;Dispatch:False;KeyEvent:url(&#39;JavaScript:eval(&#39;zoom.page=\&#39;1.3\&#39;;&#39;);&#39;)&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;If you&amp;rsquo;re interested in Enterprise Browser, you can visit us at &lt;a href=&#34;http://bit.ly/EMEAAppForum2015&#34;&gt;EMEA AppForum in London, Oct. 12th-14th&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Little command line tricks</title>
      <link>http://pietromaggi.com/2014/01/10/little-command-line-tricks/</link>
      <pubDate>Fri, 10 Jan 2014 19:37:45 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>http://pietromaggi.com/2014/01/10/little-command-line-tricks/</guid>
      <description>

&lt;p&gt;This is a different blog, more a remainder for me than anything else. Hope that someone else can find these useful&amp;hellip; they&amp;rsquo;re for me!&lt;/p&gt;

&lt;h3 id=&#34;recover-a-failed-download-with-curl&#34;&gt;Recover a failed download with curl:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -C - -o partially_downloaded_file &#39;www.example.com/path/to/the/file&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;burn-a-playable-dvd-from-a-video-ts-folder-http-hints-macworld-com-article-php-story-20070612161317338&#34;&gt;&lt;a href=&#34;http://hints.macworld.com/article.php?story=20070612161317338&#34;&gt;Burn a playable DVD from a VIDEO_TS folder&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;After searching the forums and trying various things, I still couldn&amp;rsquo;t find a quick, reliable, free method of burning a VIDEO_TS folder to a pure UDF DVD,
so that it would play in regular DVD players, as well trigger DVD Player to start up automatically. Anyway, as often is the case, Terminal had the answers.
Just type in this command and change the paths to suit:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hdiutil makehybrid -udf -udf-volume-name DVD_NAME -o MY_DVD.iso /path/to/VIDEO_TS/parent/folder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure that /path/to/VIDEO_TS/parent/folder is the path to the folder containing the VIDEO_TS folder, not the VIDEO_TS folder itself.
Once the .iso file has been created, drag this to Disk Utility and hit the Burn button.&lt;/p&gt;

&lt;h3 id=&#34;generate-a-pdf-from-a-markdown-file&#34;&gt;Generate a pdf from a markdown file&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;markdown &amp;lt;File.md&amp;gt; | htmldoc --cont --headfootsize 8.0 --linkcolor blue --linkstyle plain --format pdf14 - &amp;gt; FileFormat.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;android-related-commands&#34;&gt;Android related Commands&lt;/h1&gt;

&lt;h3 id=&#34;taking-screenshot-of-an-android-device&#34;&gt;Taking screenshot of an Android device&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;adb shell screencap -p | perl -pe &#39;s/\x0D\x0A/\x0A/g&#39; &amp;gt; screen.png
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;launch-browser-and-navigate-to-url-on-android-devices&#34;&gt;Launch browser and navigate to URL on android devices&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;adb shell am start -a android.intent.action.VIEW -d URL
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>