<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Datawedge on Pietro F. Maggi</title>
    <link>https://pietromaggi.com/tags/datawedge/</link>
    <description>Recent content in Datawedge on Pietro F. Maggi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>pfm@pietromaggi.com (Pietro F. Maggi)</managingEditor>
    <webMaster>pfm@pietromaggi.com (Pietro F. Maggi)</webMaster>
    <copyright>(c) 2013-2018 Pietro F. Maggi</copyright>
    <lastBuildDate>Wed, 11 Jul 2018 09:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://pietromaggi.com/tags/datawedge/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>(Xamarin.Forms &#43; FreshMVVM &#43; DataWedge) take 2</title>
      <link>https://pietromaggi.com/2018/07/11/xamarin.forms---freshmvvm---datawedge-take-2/</link>
      <pubDate>Wed, 11 Jul 2018 09:00:00 +0200</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>https://pietromaggi.com/2018/07/11/xamarin.forms---freshmvvm---datawedge-take-2/</guid>
      <description>Note: the accompanying code is available on GitHub.
We saw in the last post how to add barcode scanning functionalities to the &amp;laquo;Inventory&amp;raquo; sample application, using DataWedge.
Today we&amp;rsquo;re going to review that code and refactor it &amp;laquo;just a bit&amp;raquo;. The goal is to make it a bit more modular, adding some flexibility to how we manage the barcode. In particular we want to have these features in our app:</description>
    </item>
    
    <item>
      <title>Xamarin.Forms &#43; FreshMVVM &#43; DataWedge = ðŸ’–</title>
      <link>https://pietromaggi.com/2018/07/07/xamarin.forms---freshmvvm---datawedge--/</link>
      <pubDate>Sat, 07 Jul 2018 09:00:00 +0200</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>https://pietromaggi.com/2018/07/07/xamarin.forms---freshmvvm---datawedge--/</guid>
      <description>Note: the accompanying code is available on GitHub.
The topic for today is how to add barcode scanning functionalities to the &amp;laquo;Inventory&amp;raquo; sample application we built in the previous post about Xamarin.Forms and FreshMVVM.
To integrate barcode scanning functionalities we&amp;rsquo;ve different options:
 Do Nothing - Barcode scanning in enabled by default simulating keyboard entry: the application receives the data in the selected input field. Integrate Barcode scanning API from Zebra&amp;rsquo;s EMDK for Xamarin - This is time consuming and add a dependency to our project.</description>
    </item>
    
    <item>
      <title>Enterprise Browser and DataWedge on Android - friends at the end</title>
      <link>https://pietromaggi.com/2016/10/29/enterprise-browser-and-datawedge-on-android---friends-at-the-end/</link>
      <pubDate>Sat, 29 Oct 2016 11:00:00 +0100</pubDate>
      <author>pfm@pietromaggi.com (Pietro F. Maggi)</author>
      <guid>https://pietromaggi.com/2016/10/29/enterprise-browser-and-datawedge-on-android---friends-at-the-end/</guid>
      <description>During Enterprise Browser hands-on lab, I got some enquiry about using other MobilityDNA utilities together with EB; in particular how to integrate SwipeAssist and Simulscan. These utilities can be integrated, with some heavy lifting, and accepting some constraints.
Some background The current scanner framework implementation on our Android devices make available a single scanner object that provides full Scanner control. As always &amp;hellip;&amp;laquo;with great power comes great responsibility&amp;raquo;: an application using the scanner object from the Barcode API, is required to release it when it&amp;rsquo;s going in the background (usually you do this handling in the onPause() callback in your native application).</description>
    </item>
    
  </channel>
</rss>